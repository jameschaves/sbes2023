title;author;journal;year;source;pages;volume;abstract;document_type;doi;url;affiliation;author_keywords;keywords;publisher;issn;language;note;selection_criteria;status
Systematic Literature Mapping of User Story Research;Amna, Anis R. and Poels, Geert;IEEE Access;2022;IEEE Digital Library;51723-51746;10;None;;10.1109/ACCESS.2022.3173745;;;;;;;;;;Accepted
Enriching User Stories with Usability Features in a Remote Agile Project: A Case Study;Marques, Anna Beatriz and Costa, Alex Felipe and Santos, Ismayle and Andrade, Rossana;;2022;ACM Digital Library;;;Considering usability aspects in the early phases of software development can avoid rework to solve usability problems identified late. We can adopt Requirements Engineering methods to identify usability requirements that explore the end users’ perspectives and usage preferences. However, usability evaluation methods are more commonly adopted in the industry than early usability methods to define usability requirements. Recently, the USARP method was proposed for usability requirements elicitation and specification. USARP suggests the combined use of personas, user stories, and usability guidelines. This paper aims to report a case study on the USARP adoption by a remote agile team in the industry. USARP supports the team in defining UI/UX requirements for a web management tool. A survey enables us to investigate the teams’ perception of the usefulness of the USARP. The results showed that USARP improved the team’s effectiveness in usability requirements elicitation. USARP enabled identifying 120 UI/UX aspects related to system functionalities. We expect this experience report can contribute to disseminating early usability methods in industry practice.;;10.1145/3571473.3571496;https://doi.org/10.1145/3571473.3571496;;;user stories, requirements elicitation, requirements specification, usability requirements, case study;Association for Computing Machinery;;;;Primary studies;Rejected
A systematic review of requirements change management;Shalinka Jayatilleke and Richard Lai;Information and Software Technology;2018;Science@Direct;163-185;93;"Context
Software requirements are often not set in concrete at the start of a software development project; and requirements changes become necessary and sometimes inevitable due to changes in customer requirements and changes in business rules and operating environments; hence, requirements development, which includes requirements changes, is a part of a software process. Previous work has shown that failing to manage software requirements changes well is a main contributor to project failure. Given the importance of the subject, there's a plethora of research work that discuss the management of requirements change in various directions, ways and means. An examination of these works suggests that there's a room for improvement.
Objective
In this paper, we present a systematic review of research in Requirements Change Management (RCM) as reported in the literature.
Method
We use a systematic review method to answer four key research questions related to requirements change management. The questions are: (1) What are the causes of requirements changes? (2) What processes are used for requirements change management? (3) What techniques are used for requirements change management? and (4) How do organizations make decisions regarding requirements changes? These questions are aimed at studying the various directions in the field of requirements change management and at providing suggestions for future research work.
Results
The four questions were answered; and the strengths and weaknesses of existing techniques for RCM were identified.
Conclusions
This paper has provided information about the current state-of-the-art techniques and practices for RCM and the research gaps in existing work. Benefits, risks and difficulties associated with RCM are also made available to software practitioners who will be in a position of making better decisions on activities related to RCM. Better decisions will lead to better planning which will increase the chance of project success.";;https://doi.org/10.1016/j.infsof.2017.09.004;https://www.sciencedirect.com/science/article/pii/S0950584917304664;;;Requirements change management, Agile, Systematic review;;0950-5849;;;;Accepted
How Agile Developers Integrate User-Centered Design Into Their Processes: A Literature Review;Caballero, Leydi and Moreno, Ana M. and Seffah, Ahmed;International Journal of Software Engineering and Knowledge Engineering;2016;El Compendex;1175-1201;26; The lack of user engagement, the absence of user feedback, incomplete and continuously changing user requirements are among the critical concerns that cause projects to fail. User-centered design (UCD) and agile software development are two iterative approaches that have been proposed to overcome such concerns. UCD is a design process focusing on user research, user interface design and usability evaluation. Introduced by software engineering practitioners, agile refers to a number of iterative and incremental software development practices that emphasize people’s needs, communication between developers and stakeholders and the ability to adapt to change. In both the agile and UCD communities, however, a full understanding of user requirements is often seen as incompatible with early and quick development iterations. We performed a literature review aiming to identify how agile teams have integrated UCD tools into their agile software development process to a better understanding of the user requirements without losing sight of the agile values and principles. UCD tools adaptations and minimal-up-front design applied in agile development are among the approaches discovered in this study. The findings could lead to a comprehensive user-centric software engineering that will overcome inherent problems faced by agile teams to understand user needs, priorities and goals. ;;10.1142/S0218194016500418; https://doi.org/10.1142/S0218194016500418;;;;;;;;;Accepted
Requirements Engineering and Software Testing in Agile Methodologies: A Systematic Mapping;Coutinho, Jarbele C. S. and Andrade, Wilkerson L. and Machado, Patr\'{\i}cia D. L.;;2019;ACM Digital Library;322–331;;The insertion of agile practices in software development has increased exponentially. Both industry and academic staff constantly face challenges related to requirements specification and testing in this context. In this study, we conducted a systematic mapping of the literature to investigate the practices, strategies, techniques, tools, and challenges met in the association of Requirements Engineering with Software Testing (REST) in the agile context. By searching seven major bibliographic databases, we identified 1.099 papers related to Agile REST. Based on the systematic mapping guidelines, we selected 14 of them for a more specific analysis. In general, the main findings include the fact that weekly meetings should be held to establish frequent communication with stakeholders. Also, most projects adopt use cases as conceptual models and perform use case detailing. Test cases are an important artifact with test case design as a Software Testing practice. For the automation of test cases, fit tables have been recommended as an artifact. Finally, proper project documentation constitutes a critical basis in Agile REST.;;10.1145/3350768.3352584;https://doi.org/10.1145/3350768.3352584;;;software requirements, software testing, agile, systematic mapping study;Association for Computing Machinery;;;;;Accepted
An Update on Effort Estimation in Agile Software Development: A Systematic Literature Review;Fernández-Diego, Marta and Méndez, Erwin R. and González-Ladrón-De-Guevara, Fernando and Abrahão, Silvia and Insfran, Emilio;IEEE Access;2020;IEEE Digital Library;166768-166800;8;None;;10.1109/ACCESS.2020.3021664;;;;;;;;;;Accepted
Review on Agile requirements engineering challenges;Elghariani, Kaiss and Kama, Nazri;;2016;IEEE Digital Library;507-512;;None;;10.1109/ICCOINS.2016.7783267;;;;;;;;;;Accepted
Management of quality requirements in agile and rapid software development: A systematic mapping study;Woubshet Behutiye and Pertti Karhapää and Lidia López and Xavier Burgués and Silverio Martínez-Fernández and Anna Maria Vollmer and Pilar Rodríguez and Xavier Franch and Markku Oivo;Information and Software Technology;2020;Science@Direct;106225;123;"Context
Quality requirements (QRs) describe the desired quality of software, and they play an important role in the success of software projects. In agile software development (ASD), QRs are often ill-defined and not well addressed due to the focus on quickly delivering functionality. Rapid software development (RSD) approaches (e.g., continuous delivery and continuous deployment), which shorten delivery times, are more prone to neglect QRs. Despite the significance of QRs in both ASD and RSD, there is limited synthesized knowledge on their management in those approaches.
Objective
This study aims to synthesize state-of-the-art knowledge about QR management in ASD and RSD, focusing on three aspects: bibliometric, strategies, and challenges.
Research method
Using a systematic mapping study with a snowballing search strategy, we identified and structured the literature on QR management in ASD and RSD.
Results
We found 156 primary studies: 106 are empirical studies, 16 are experience reports, and 34 are theoretical studies. Security and performance were the most commonly reported QR types. We identified various QR management strategies: 74 practices, 43 methods, 13 models, 12 frameworks, 11 advices, 10 tools, and 7 guidelines. Additionally, we identified 18 categories and 4 non-recurring challenges of managing QRs. The limited ability of ASD to handle QRs, time constraints due to short iteration cycles, limitations regarding the testing of QRs and neglect of QRs were the top categories of challenges.
Conclusion
Management of QRs is significant in ASD and is becoming important in RSD. This study identified research gaps, such as the need for more tools and guidelines, lightweight QR management strategies that fit short iteration cycles, investigations of the link between QRs challenges and technical debt, and extension of empirical validation of existing strategies to a wider context. It also synthesizes QR management strategies and challenges, which may be useful for practitioners.";;https://doi.org/10.1016/j.infsof.2019.106225;https://www.sciencedirect.com/science/article/pii/S095058491930240X;;;Quality requirements, Non-functional requirements, Agile software development, Rapid software development, Systematic mapping study, Systematic literature reviews;;0950-5849;;;;Accepted
Agile Methods for ERP Implementation: A Systematic Literature Review;Wijaya, Santo Fernandi and Prabowo, Harjanto and Kosala, Raymondus Raymond and Meyliana;;2018;IEEE Digital Library;571-576;;None;;10.1109/ICIMTech.2018.8528164;;;;;;;;;;Accepted
The Integration of Agile Development and Model Driven Development - A Systematic Literature Review;Hessa Alfraihi. and Kevin Lano.;;2017;El Compendex;451-458;;None;;10.5220/0006207004510458;;;;;SciTePress;2184-4348;;;;Accepted
Non-functional Requirements Prioritization: A Systematic Literature Review;Ijaz, Khush Bakht and Inayat, Irum and Allah Bukhsh, Faiza;;2019;IEEE Digital Library;379-386;;None;;10.1109/SEAA.2019.00064;;;;;;;;;;Accepted
User Stories and Natural Language Processing: A Systematic Literature Review;Raharjana, Indra Kharisma and Siahaan, Daniel and Fatichah, Chastine;IEEE Access;2021;IEEE Digital Library;53811-53826;9;None;;10.1109/ACCESS.2021.3070606;;;;;;;;;;Accepted
Software Security in Agile Software Development: A Literature Review of Challenges and Solutions;Riisom, Klaus Reche and Hubel, Martin Slusarczyk and Alradhi, Hasan Mousa and Nielsen, Niels Bonde and Kuusinen, Kati and Jabangwe, Ronald;;2018;ACM Digital Library;;;There has been a surge in number of software security threats and vulnerabilities in recent times. At the same time, expectations towards software and data security are growing. Thus there is a need to ensure that security-related tasks are effectively integrated in the software development process. However, integrating security practices with agile software development is not trivial due to, for instance, differences in process dynamics and concentration on functional vs non-functional requirements. In this short paper we present a literature review on challenges and solutions when adopting security in agile software development contexts. Our findings show that there are ongoing efforts to integrate security-practices in agile methods, but more research is needed to make the processes more optimized and simpler for developers.;;10.1145/3234152.3234189;https://doi.org/10.1145/3234152.3234189;;;security engineering, software security, secure software development, literature review, agile software development;Association for Computing Machinery;;;;;Accepted
Defining Requirements Strategies inAgile: A Design Science Research Study;Muhammad, Amna Pir and Knauss, Eric and Batsaikhan, Odzaya and Haskouri, Nassiba El and Lin, Yi-Chun and Knauss, Alessia;Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics);2022;El Compendex;73 - 89;13709 LNCS;"<div data-language=""eng"" data-ev-field=""abstract"">Research shows that many of the challenges currently encountered with agile development are related to requirements engineering. Based on design science research, this paper investigates critical challenges that arise in agile development from an undefined requirements strategy. We explore potential ways to address these challenges and synthesize the key building blocks of requirements strategies. Our design science research rests on a multiple case study with three industrial cases in the domains of communication technology, security services, and automotive. We relied on a total of 20 interviews, two workshops, participant observation in two cases, and document analysis in each of the cases to understand concrete challenges and workflows. In each case, we define a requirements strategy in collaboration with process managers and experienced engineers. From this experience, we extract guidelines for defining requirements strategies in agile development.<br/></div> &copy; 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.";;;http://dx.doi.org/10.1007/978-3-031-21388-5_6;;;"Design;Engineering research;Industrial research;Planning;Research and development management;";;03029743;English;"Agile development;Building blockes;Critical challenges;Design-science researches;Large-scale agile development;Large-scales;Multiple-case study;Requirement engineering;Requirement strategy;Research studies;";;Rejected
A multi-dimensional study of requirements changes in agile software development projects;Madampe, Kashumi and Hoda, Rashina and Grundy, John;arXiv;2020;El Compendex;;;"<div data-language=""eng"" data-ev-field=""abstract"">Agile processes are now widely practiced by software engineering (SE) teams, and the agile manifesto claims that agile methods support responding to changes well. However, no study appears to have researched whether this is accurate in reality. Requirements changes (RCs) are inevitable in any software development environment, and we wanted to acquire a holistic picture of how RCs occur and are handled in agile SE teams in practice. We also wanted to know whether responding to changes is the only or a main reason for software teams to use agile in their projects. To do this we conducted a mixed-methods research study which comprised of interviews of 10 agile practitioners from New Zealand and Australia, a literature review, and an in-depth survey with the participation of 40 agile practitioners world-wide. Through this study we identified different types of RCs, their origination including reasons for origination, forms, sources, carriers, and events at which they originate, challenging nature, and finally whether agile helps to respond to changes or not. We also found that agile teams seem to be reluctant to accept RCs, and therefore, they use several mitigation strategies. Additionally, as they accept the RCs, they use a variety of techniques to handle them. Furthermore, we found that agile allowing better response to RCs is only a minor reason for practicing agile. Several more important reasons included being able to deliver the product in a shorter period and increasing team productivity. Practitioners stated this improves the agile team environment and thus are the real motivators for teams to practice agile. Finally, we provide a set of practical recommendations that can be used to better handle RCs effectively in agile software development environments.<br/></div> &copy; 2020, CC BY-NC-ND.";;;;;;"Requirements engineering;";;23318422;English;"Agile methods;Agile process;Agile software development;Agile software development projects;Agile teams;Engineering teams;Multi dimensional;Requirement engineering;Requirements change;Software-development environments;";;Rejected
Requirements engineering in global scaled agile software development environment: A Multi-Vocal literature review protocol;Antil, Priyanka;arXiv;2020;El Compendex;;;"<div data-language=""eng"" data-ev-field=""abstract"">Context: Requirements engineering in global scaled agile software development and the planning phase for a multi-vocal literature review. Objective: Develop a protocol to specify the plan which will be followed to conduct a multivocal literature review study on requirements engineering in global scaled agile software development. Method: Kitchenham and Charters (2007), and Garousi et al. (2019) guidelines were followed to develop a protocol for multi-vocal literature review. Result: A validated protocol to conduct a multi-vocal literature review. Conclusion: The review protocol consist of five phases enumerated as follows: research questions, search strategies, validation of review process, reporting the review, and making changes to the protocol.<br/></div> Copyright &copy; 2020, The Authors. All rights reserved.";;;;;;"Software design;";;23318422;English;"Agile software development;Five-phase;Literature reviews;Planning phasis;Requirement engineering;Research questions;Review process;Search strategies;Software-development environments;";;Rejected
A Mapping Study on Requirements Engineering in Agile Software Development;Heikkila, Ville T. and Damian, Daniela and Lassenius, Casper and Paasivaara, Maria;Proceedings - 41st Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2015;2015;Scopus;199 – 207;;Agile software development (ASD) methods have gained popularity in the industry and been the subject of an increasing amount of academic research. Although requirements engineering (RE) in ASD has been studied, the overall understanding of RE in ASD as a phenomenon is still weak. We conducted a mapping study of RE in ASD to review the scientific literature. 28 articles on the topic were identified and analyzed. The results indicate that the definition of agile RE is vague. The proposed benefits from agile RE included lower process overheads, a better requirements understanding, a reduced tendency to over allocate development resources, responsiveness to change, rapid delivery of value, and improved customer relationships. The problematic areas of agile RE were the use of customer representatives, the user story requirements format, the prioritization of requirements, growing technical debt, tacit requirements knowledge, and imprecise effort estimation. We also report proposed solutions to the identified problems. © 2015 IEEE.;Conference paper;10.1109/SEAA.2015.70;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958267829&doi=10.1109%2fSEAA.2015.70&partnerID=40&md5=f3fa93d87a3a1e6ca1d9cd6e9561fa8a;;"agile development; mapping study; requirements engineering; scrum";"Application programs; Mapping; Public relations; Requirements engineering; Software design; Agile development; Agile software development; Customer relationships; Customer representative; Development resources; Mapping studies; Scientific literature; scrum; Software engineering";;;English;Cited by: 79;;Accepted
A framework to study requirements-driven collaboration among agile teams: Findings from two case studies;Irum Inayat and Siti Salwah Salim;Computers in Human Behavior;2015;Science@Direct;1367-1379;51;Stakeholders’ collaboration is required to develop requirements in agile software development. Requirements engineering and agile methods share common grounds as they both focus on stakeholder collaboration. The key issue is finding a way to study collaboration driven by requirements in geographically distributed agile teams. In this paper, we aim to propose a framework to study collaboration driven by requirements among agile teams and determine the impact of their collaboration patterns on the iteration performance. We define collaboration in terms of communication as information exchange among members, and awareness knowledge of others. Two case studies were conducted to examine communication and awareness network patterns among distributed agile teams. Data were collected through questionnaires, semi-structured interviews and onsite observation. The findings revealed that the framework aids in determining the core members, collaboration trends, clustering tendency, communication and awareness reciprocity of the teams, small worldliness and centralisation behaviour of the networks and iteration performance of the agile teams. The framework has implications for the industrial practitioners, i.e. managers to learn about their team’s collaboration in order to take measures for performance improvement. At the same time, the researchers can use this framework to study other social aspects in variable settings to produce more empirical results.;;https://doi.org/10.1016/j.chb.2014.10.040;https://www.sciencedirect.com/science/article/pii/S0747563214005639;;;Agile methods, Collaboration, Distributed agile teams, Requirements-driven collaboration, Communication and awareness;;0747-5632;;Computing for Human Learning, Behaviour and Collaboration in the Social and Mobile Networks Era;;Rejected
Lean Startup and Sustainable Business Model Innovation: A Review of the Customer Development Process;Peralta, Alberto;;2022;Springer Link;81--110;;Since its release, the Lean Startup (LS) method has taken the business model innovation world like a storm. Subject to praise and rejection by many, this practice is now mainstream for incubators, accelerators, and innovation centers. Academics are devoting many research hours to work out LS implications. Yet we found that LS application in the field of sustainable business model innovation (SBMI) has been overlooked. Thus, this chapter concentrates on deepening on three specific LS features: a set of 17 claims called the Customer Development Manifesto (CDM), the core LS process called the Customer Development (CusDev), and the suitability of the CDM and CusDev for SBMI. A thorough review of the academic innovation literature and fields has helped us rigorously examine the CDM claims finding sound supportive foundations and limiting considerations---serving as future research avenues. Extending the implications of the CDM into the CusDev practice, we also found academic support to base its approach to modelling businesses and incorporating stakeholders to this modelling. Moreover, having defined the valueholder concept as a subset of relevant (salient and fringe) stakeholders, we have widened CusDev original design to properly shape sustainable business models integrating valueholders' interests with the activities and challenges imposed by SBMI and its triple (economic, social, and environmental) bottom line. The chapter closes with implications for researchers and practitioners and future research proposals.;;10.1007/978-3-031-08313-6_4;https://doi.org/10.1007/978-3-031-08313-6_4;;;;Springer International Publishing;;;;;Rejected
Review Questions;Weber, Peterand Gabriel, Rolandand Lux, Thomasand Menke, Katharina;;2022;Springer Link;309--355;;At the end of each chapter there are review questions and in-depth exercises, which are available together with the corresponding solutions in this chapter.;;10.1007/978-3-658-35859-4_12;https://doi.org/10.1007/978-3-658-35859-4_12;;;;Springer Fachmedien Wiesbaden;;;;;Rejected
Knowledge sharing via social media in software development: a systematic literature review;Sarka, Peter and Ipsen, Christine;Knowledge Management Research \& Practice;2017;Springer Link;594--609;15;None;;;;;;;Taylor \& Francis;;;;;Rejected
Cultural Issues in Distributed Software Development: A Review;Mishra, Alokand Mishra, Deepti;;2014;Springer Link;448--456;;Cultural impact is significant in global or distributed software development. Due to cultural differences, co-ordination and collaboration problems have been reported in case studies and this also leads to low quality deliverables and high turnover in software industry. This paper presents a literature review of distributed software development (DSD) or global software development (GSD) and cultural issues. The main focus is to highlight the current research, observations, as well as practice directions in these areas. Many studies have been performed in culture and global software development, still impact of culture in distributed software development in different dimensions received less attention among researchers.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
A Review of Security Requirements Engineering Methods with Respect to Risk Analysis and Model-Driven Engineering;Mu{\~{n}}ante, Denisseand Chiprianov, Vaneaand Gallon, Laurentand Aniort{\'e}, Philippe;;2014;Springer Link;79--93;;One of the most important aspects that help improve the quality and cost of secure information systems in their early stages of the development lifecycle is Security Requirements Engineering (SRE). However, obtaining such requirements is non-trivial. One domain dealing also with eliciting security requirements is Risk Analysis (RA). Therefore, we perform a review of SRE methods in order to analyse which ones are compatible with RA processes. Moreover, the transition from these early security requirements to security policies at later stages in the lifecycle is generally non-automatic, informal and incomplete. To deal with such issues, model-driven engineering (MDE) uses formal models and automatic model transformations. Therefore, we also review which SRE methods are compatible with MDE approaches. Consequently, our review is based on criteria derived partially from existing survey works, further enriched and specialized in order to evaluate the compatibility of SRE methods with the disciplines of RA and MDE. It summarizes the evidence regarding this issue so as to improve understanding and facilitate evaluating and selecting SRE methods.;;;;;;;Springer International Publishing;;;;;Rejected
Understanding How and When Human Factors Are Used in the Software Process: A Text-Mining Based Literature Review;Ruiz, Mercedesand Salanitri, Davide;;2019;Springer Link;694--708;;Human Factors (HF) is the study of the interaction between users and technology with the aim of improving the user's experience of a product and avoid unwanted issues in the usage of the system. HF is largely applied in several fields such as industrial processes, education, training, and design. In software development, HF plays a crucial role in the efficient and effective development of a software product and the success of the final product. This paper aims at indicating the state of the art of the literature on HF in software, in general and in the software development process in particular. To do so, a preliminary literature review using text mining has been performed. This work gathered papers using the terms ``human factors'' and ``software'' from four of the most used scientific digital databases (ACM DL, Scopus, Science Direct and IEEE Xplore). A total of 2192 papers were selected and automatically gathered into three clusters by using the X-means algorithm, which automatically recommended that number of clusters. The results show that there are three main areas where HF have been researched within software development: (1) the field of product evaluation (user experience) (2) the field of software development process, especially in the project management processes (3) the field of education. The results are an initial indication of the evolution of research in this area and where and how HF is applied in software engineering.;;;;;;;Springer International Publishing;;;;;Rejected
Training students in evidence-based software engineering and systematicreviews: a systematic review and empirical study;Sebasti{\'{a}}n Pizard andFernando Acerenza andXimena Otegui andSilvana Moreno andDiego Vallespir andBarbara A. Kitchenham;Empir. Softw. Eng.;2021;Springer Link;50;26;None;;10.1007/s10664-021-09953-9;https://doi.org/10.1007/s10664-021-09953-9;;;;;;;;;Rejected
Review of Current Software Estimation Techniques;Sharma, Bhawnaand Purohit, Rajendra;;2018;Springer Link;380--399;;Software Effort Estimation is an onerous but still inevitable task project managers have to perform. Project managers often face the dilemma of selection of estimation approach whenever any new project opportunity comes across. Estimation is required for not only setting a price and bidding rounds but also for planning, budgeting, staffing and scheduling of project related tasks. This paper reviews major cost estimation techniques that are relevant in current scenario. The primary conclusion is - all estimation approaches have few advantages and disadvantages and are often complimentary in their characteristics. Observation and Evaluation of several approaches can be insightful and can help in selecting an estimation technique or combination of techniques best suited for a particular project.;;;;;;;Springer Singapore;;;;;Rejected
Quality Requirements in Large-Scale Distributed Agile Projects -- A Systematic Literature Review;Alsaqaf, Wasimand Daneva, Mayaand Wieringa, Roel;;2017;Springer Link;219--234;;Context and Motivation: Agile development methods have become increasingly popular in the last years. However, these methods hardly pay attention to quality requirements (QRs), which could undermine the profits of fast delivery by introducing high rework efforts later on. This risk is high especially in agile large-scale distributed settings. Question/problem: Although several publications reported on the insufficient attention to quality requirements in agile methods, still little is known about agile requirements engineering practices and their impact on quality requirements in large-scale distributed settings. However, companies increasingly use agile methods in those settings, where the negative impact of ignoring quality requirements is large. Hence, the goal of this study is to identify the challenges in the engineering of quality requirements in large-scale distributed agile projects that have been researched so far, the agile practices that have contributed to the emergence of these challenges, and the proposed solutions. Principle ideas/results: Following an evidence-based research method, we examined 60 papers on quality requirements in agile. We found that, while there are multiple proposals to engineer quality requirements in agile, none of those has been tried out in real-life settings. Evaluating scalability of these proposals, therefore, is a priority for future research. Contribution: This paper identified 12 challenges in agile projects that harm the quality requirements. Besides, we identified and evaluated 13 proposals for dealing with quality requirements in agile projects, along with implications for practice and research.;;;;;;;Springer International Publishing;;;;;Accepted
Software Process Improvement in Small and Medium Enterprises: A Systematic Literature Review;da Silva, Gledston Carneiroand Carneiro, Glauco de Figueiredo;;2016;Springer Link;603--613;;The knowledge of characteristics and profile of a company is the key to plan its software process improvement. It helps focusing efforts to promote alignment with organizational culture and to support the consolidation of best practices already implemented. This paper presents a systematic literature review to identify evidences in the literature related to the challenges and opportunities of the adoption of software process improvement in small and medium enterprises. The results from the study indicate that there are relevant issues that can be considered in the effective adoption of software engineering best practices in small and medium enterprises.;;;;;;;Springer International Publishing;;;;;Accepted
Organizational Maturity Models Architectures: A Systematic Literature Review;Saavedra, Vivianaand D{\'a}vila, Abrahamand Melendez, Karinand Pessoa, Marcelo;;2017;Springer Link;33--46;;Maturity models (MMs) are tools to assess how reliable is an organization and to identify its strengths and weaknesses. The increasing number of MMs developed for several domains or specific contexts based on different architectural styles (AS's), makes more difficult its understanding and reuse. This paper aims to identify and compare the AS's of organizational MMs for different domains. A Systematic Literature Review (SLR) was conducted. The SLR included 70 studies that describe the architecture of MMs for different contexts. A classification scheme was defined and tested with a group of MMs. Another group of MMs adopted the AS of existing models. As a result, the MMs found were classified into nine AS's. The AS's derived from SW-CMM and CMMI-staged are quite similar. The ISO-SPICE-based and the OPM3-based architectures are the most different. The AS's most used in studies were the CMMI-based and the progression-staged model.;;;;;;;Springer International Publishing;;;;;Rejected
Information Requirements for Big Data Projects: A Review of State-of-the-Art Approaches;Kozmina, Natalijaand Niedrite, Lailaand Zemnickis, Janis;;2018;Springer Link;73--89;;Big data technologies are rapidly gaining popularity and become widely used, thus, making the choice of developing methodologies including the approaches for requirements analysis more acute. There is a position that in the context of the Data Warehousing (DW), similar to other Decision Support Systems (DSS) technologies, defining information requirements (IR) can increase the chances of the project to be successful with its goals achieved. This way, it is important to examine this subject in the context of Big data due to the lack of research in the field of Big data requirements analysis. This paper gives an overview of the existing methods associated with Big data technologies and requirements analysis, and provides an evaluation by three types of criteria: (i) general characteristics, (ii) requirements analysis related, and (iii) Big data technologies related criteria. We summarize on the requirements analysis process in Big data projects, and explore solutions on how to (semi-) automate requirements engineering phases.;;;;;;;Springer International Publishing;;;;;Rejected
Essential Approaches to Dual-Track Agile: Results from a Grey Literature Review;"Trieflinger, Stefanand M{\""u}nch, J{\""u}rgenand Heisler, Berndand Lang, Dominic";;2021;Springer Link;55--69;;Context: Nowadays, companies are challenged by increasing market dynamics, rapid changes and disruptive participants entering the market. To survive in such an environment, companies must be able to quickly discover product ideas that meet the needs of both customers and the company and deliver these products to customers. Dual-track agile is a new type of agile development that combines product discovery and delivery activities in parallel, iterative, and cyclical ways. At present, many companies have difficulties in finding and establishing suitable approaches for implementing dual-track agile in their business context. Objective: In order to gain a better understanding of how product discovery and product delivery can interact with each other and how this interaction can be implemented in practice, this paper aims to identify suitable approaches to dual-track agile. Method: We conducted a grey literature review (GLR) according to the guidelines to Garousi et al. Results: Several approaches that support the integration of product discovery with product delivery were identified. This paper presents a selection of these approaches, i.e., the Discovery-Delivery Cycle model, Now-Next-Later Product Roadmaps, Lean Sprints, Product Kata, and Dual-Track Scrum. The approaches differ in their granularity but are similar in their underlying rationales. All approaches aim to ensure that only validated ideas turn into products and thus promise to lead to products that are better received by their users.;;;;;;;Springer International Publishing;;;;;Rejected
Customer Involvement in Continuous Deployment: A Systematic Literature Review;"Yaman, Sezin Gizemand Sauvola, Tanjaand Riungu-Kalliosaari, Leahand Hokkanen, Lauraand Kuvaja, Pasiand Oivo, Markkuand M{\""a}nnist{\""o}, Tomi";;2016;Springer Link;249--265;;[Context and motivation] In order to build successful software products and services, customer involvement and an understanding of customers' requirements and behaviours during the development process are essential. [Question/Problem] Although continuous deployment is gaining attention in the software industry as an approach for continuously learning from customers, there is no common overview of the topic yet. [Principal ideas/results] To provide a common overview, we conduct a secondary study that explores the state of reported evidence on customer input during continuous deployment in software engineering, including the potential benefits, challenges, methods and tools of the field. [Contribution] We report on a systematic literature review covering 25 primary studies. Our analysis of these studies reveals that although customer involvement in continuous deployment is highly relevant in the software industry today, it has been relatively unexplored in academic research. The field is seen as beneficial, but there are a number of challenges related to it, such as misperceptions among customers. In addition to providing a comprehensive overview of the research field, we clarify the gaps in knowledge that need to be studied further.;;;;;;;Springer International Publishing;;;;;Accepted
Adopting Agile Software Development Combined with User-Centered Design and Lean Startup: A Systematic Literature Review on Maturity Models;Zorzetti, Maximilianand Moralles, Cassianoand Salerno, Larissaand Pereira, Elianaand Marczak, Sabrinaand Bastos, Ricardo;;2021;Springer Link;517--541;;The use of Agile in the software development industry in the past two decades revealed that it is lackluster in some aspects, such as in guaranteeing user involvement and assuring that the right software is being built. There are reports that combining Agile with Lean Startup and User-Centered Design (UCD) helps in overcoming these shortcomings while also yielding several other benefits. However, there is not much documentation on how to use this ``combined approach'' and adapting existing organizations to use it is a challenge in of itself, in which the use of an instrument to guide or assess such transformations is typically pivotal to their success. As such, in this paper we seek to identify maturity models that assess the use of Agile, Lean Startup, and UCD. We conducted a systematic literature review of maturity models for these three methods published between 2001 and 2020. We characterized the maturity models and determined how they see maturity, how they are applied, and how they were evaluated. As an extended version of a previous paper, we augmented our analysis criteria and further classified the models in how they interpret maturity and what strategy they suggest when undergoing an improvement process, in addition to providing new insight on various aspects of the models. We found 35 maturity models, of which 23 were for Agile, 5 for Lean thinking, 5 for UCD, and 2 for Agile and UCD combined. No models for the combination of the three methods were found (nor for Lean Startup), as expected due to the novelty of the approach. Existing models mostly focus on practice adoption and acquiring continuous improvement capabilities, and are typically developed with a specific context in mind. We also note a lack of proper evaluation procedures being conducted on the majority of models, which could be due to the lack of well-established maturity model development methods and guidelines.;;;;;;;Springer International Publishing;;;;;Accepted
A Systematic Investigation into the Use of Game Elements in the Context of Software Business Landscapes: A Systematic Literature Review;Olgun, Serhanand Yilmaz, Muratand Clarke, Paul M.and O'Connor, Rory V.;;2017;Springer Link;384--398;;The software development process is a set of socio-technical activities to produce software artifacts in which humans play a crucial role. Since it is a people centric activity, factors such as user motivation, engagement, communication and collaboration might constrain these activities. Therefore, software business organizations stand to benefit from adopting different tools and methods in order to overcome these obstacles and to improve their software business processes. Research has been made to increase software quality and enhance the software development process. Alongside these studies, innovative techniques and concepts are beneficial. As a solution, the notion of gamification (i.e. employing game elements in non-gaming contexts) has been introduced to enhance the software development process and overcome the challenges mostly related to human factors. However, the applicability of game elements in the context of software business landscapes is still a controversial issue and not totally proven as of yet. Numerous studies have been conducted to examine the benefits of gamification and how game elements affect the software development process. Thus, in this paper, a systematic literature review was conducted in order to investigate the application of game elements both in research and industrial levels of software development and as well as in software business landscapes.;;;;;;;Springer International Publishing;;;;;Rejected
A Snapshot of 26 Years of Research on Creativity in Software Engineering - A Systematic Literature Review;Amin, Aamirand Basri, Shuiband Hassan, Mohd Fadziland Rehman, Mobashar;;2018;Springer Link;430--438;;Creativity is important for software engineering. It is expected to gain more importance in coming decades. However the research work on creativity in software engineering is scattered and scarce. The current study aims to systematically review the existing literature on creativity in software engineering. As a result, the current study has highlighted 26 years of research work on creativity in software engineering. From the 49 selected studies, nearly half addressed creativity only in requirement engineering phase. Hence, it is safe to assume that there is a lack of research work on creativity in other phases of software development.;;;;;;;Springer Singapore;;;;;Accepted
A Requirements Engineering Techniques Review in Agile Software Development Methods;Zamudio, Lizbethand Aguilar, Jos{\'e} Alfonsoand Tripp, Carolinaand Misra, Sanjay;;2017;Springer Link;683--698;;"The first phase in the software development process is the Requirements Engineering (RE). Several methods for software development and RE techniques have been used to extract these users' needs depending on the software complexity. Our goal is to map the evidence available about requirements engineering techniques adopted and challenges faced by agile methods in order to understand how traditional requirements engineering issues are resolved using agile requirements engineering. The agile methods considered for this work are: SCRUM, Dynamic Systems Development Method (DSDM), Adaptive Software Development (ASD) and Crystal Family. The present work is based on the Systematic Literature Review (SLR) method proposed by Kitchenham; we have reviewed publications from ACM, IEEE, Science Direct, DBLP and World Wide Web. From a population of 34 papers, we identified 15 primary studies, which provide information concerning RE used in Agile Software Development Processes.";;;;;;;Springer International Publishing;;;;;Accepted
Modeling in Agile Software Development: A Systematic Literature Review;Mognon, Fernandoand C. Stadzisz, Paulo;;2017;Springer Link;50--59;;Agile methods have been used for over than a decade. However, there are limitations when using agile methods in complex, large-scale projects and in distributed teams. Traditional software design techniques, like modeling, could help overcome these limitations. This paper aims to identify modeling aspects in agile software development, presenting the state-of-art in this area, by means of a systematic literature review. The results show the use of modeling practices in agile methods, throughout the project, especially in the first sprints. The main modeling languages used are UML, informal diagrams, CRC cards and textual language. There are attempts of using agile with formal methods and model-driven development, without consistent results of the effectiveness of these proposals. Finally, we observed that the literature lacks conclusive experiments on modeling in projects using agile methods.;;;;;;;Springer International Publishing;;;;;Accepted
A Review on the Critical Success Factors of Agile Software Development;Aldahmash, Abdullahand Gravell, Andy M.and Howard, Yvonne;;2017;Springer Link;504--512;;Given the evolution and increasing usage of agile methods and practices, the successful adoption of agile is crucial. During the last decade, the critical success factors (CSFs) of agile development research developed rapidly. This paper aims to review the research on CSFs of agile software development in the last ten years (2006--2016) which used empirical methodologies to identify the success factors. In this paper, eight factors are selected as critical success factors for agile software development. A taxonomy which maps these eight CSFs into Technical, Organizational, People, Process categories is introduced in this research.;;;;;;;Springer International Publishing;;;;;Rejected
Challenges of Low-Code/No-Code Software Development: A Literature Review;Rokis, Karlisand Kirikova, Marite;;2022;Springer Link;3--17;;Low-code/no-code software development is an emerging approach delivering the opportunity to build software with a minimal need for manual coding and enhancing the involvement of non-programmers in software development. Low-code principles allow enterprises to save time and costs through a more rapid development pace and to improve software products quality by bringing closer together business and information technologies as well as promoting automation. Nevertheless, the low-code/no-code approach is a relatively new and continuously progressing domain that requires understanding of existing challenges and identification of improvement directions. In this paper, challenges in the low-code software development process and suggestions for their mitigation are identified and amalgamated with the purpose to deliver insights into the current state of the low-code/no-code development process and identify areas for further research and development.;;;;;;;Springer International Publishing;;;;;Rejected
Team Topologies in Software Teams: A Multivocal Literature Review;Ahmed, Waqarand Colomo-Palacios, Ricardo;;2021;Springer Link;272--282;;Team topologies have been frequently associated with organization's success for effective software delivery in the shape of right product. Achieving excellence for software development highly depends upon the team's coordination and communication between them. Team topologies are methodology helping an organization deliberately think about different teams' purposes (fundamental topologies) and how and when they should interact with each other (core interaction mode). Authors aim to investigate the concept and the impact of team topologies. Using a Multivocal Literature Review we found significant impact of team's goals over the individual's goal in an organization. As expected organization formed using fundamental topologies and core interaction mode lead to high success rate.;;;;;;;Springer International Publishing;;;;;Rejected
Systems Engineering for Artificial Intelligence-based Systems: A Review in Time;Llinas, Jamesand Fouad, Heshamand Mittu, Ranjeev;;2021;Springer Link;93--113;;With backgrounds in the science of information fusion and information technology, a review of Systems Engineering (SE) for Artificial Intelligence (AI)-based systems is provided across time, first with a brief history of AI and then the systems' perspective based on the lead author's experience with information fusion processes. The different types of AI are reviewed, such as expert systems and machine learning. Then SE is introduced and how it has evolved and must evolve further to become fully integrated with AI, such that both disciplines can help each other move into the future and evolve together. Several SE issues are reviewed, including risk, technical debt, software engineering, test and evaluation, emergent behavior, safety, and explainable AI.;;10.1007/978-3-030-77283-3_6;https://doi.org/10.1007/978-3-030-77283-3_6;;;;Springer International Publishing;;;;;Rejected
Integration of User Experience and Agile Techniques for Requirements Analysis: A Systematic Review;Almeyda, Silvanaand Zapata Del R{\'i}o, Claudiaand Cohn, Dennis;;2021;Springer Link;187--203;;User experience and agile techniques have grown over the last decade. However, there are not many articles that study how the integration of both proposals influences requirements engineering.;;;;;;;Springer International Publishing;;;;;Rejected
Software Engineering Analytics---The Need of Post COVID-19 Business: An Academic Review;Madakam, Somayyaand Revulagadda, Rajeev K.;;2021;Springer Link;231--251;;"``Man Proposes, God Disposes''. COVID-19COVID-19; the unexpected pandemicPandemic decease is a good testimony of the above proverb by exemplifying global business operations shutting down. Pre COVID-19, the business across the globe more or less are planned one; running smoothly; trying to reach their goals and objectives; satisfying the customers, finally leading to leapfrog the companies' profits. This was the scenario, before the coronavirus; the alias of COVID-19 pandemic, which was germinated in one of the most scientific cities in china; WuhanWuhan. Entire world business collapsed; another global economic recession after 2008; touching all the continents, countries, business, tribes, religions, lifestyles, as well as professional lives. No medicine was unable to save the lakhs of human life from contamination. Even different country leaders practised various preventive methods in order to cure the decease to save human life. In this light, this book chapter will explore the state of the art of COVID-19 across the globe with respect to business. The entire data analysis is based on secondary on-line data and thematically narrated. The book chapter furtherly discussed in detail connotes, process and state of art of softwareSoftware engineering and software analytics in business for sustainabilityAnalytics. The analysis reveals that software analyticsSoftware analytics technology is the only industry lightly affected, should grow rapidly and it is the only solution provider to improve the process, and sustain business via better-automated software. In long term incurs less cost, time management, less manual intervention, integration of enterprise departments, virtual meetings, and e-commerce are the beauty of software analytics.";;10.1007/978-3-030-72929-5_11;https://doi.org/10.1007/978-3-030-72929-5_11;;;;Springer International Publishing;;;;;Rejected
Product Roadmap Alignment -- Achieving the Vision Together: A Grey Literature Review;"Trieflinger, Stefanand M{\""u}nch, J{\""u}rgenand Bogazk{\""o}y, Emreand Ei{\ss}ler, Patrickand Schneider, Janand Roling, Bastian";;2020;Springer Link;50--57;;Context: A product roadmap is an important tool in product development. It sets the strategic direction in which the product is to be developed to achieve the company's vision. However, for product roadmaps to be successful, it is essential that all stakeholders agree with the company's vision and objectives and are aligned and committed to a common product plan. Objective: In order to gain a better understanding of product roadmap alignment, this paper aims at identifying measures, activities and techniques in order to align the different stakeholders around the product roadmap. Method: We conducted a grey literature review according the guidelines to Garousi et al. Results: Several approaches to gain alignment were identified such as defining and communicating clear objectives based on the product vision, conducting cross-functional workshops, shuttle diplomacy, and mission briefing. In addition, our review identified the ``Behavioural Change Stairway Model'' that suggests five steps to gain alignment by building empathy and a trustful relationship.;;;;;;;Springer International Publishing;;;;;Rejected
BizDevOps: A Multivocal Literature Review;Lohrasbinasab, Irajand Acharya, Prameet Bhaktaand Colomo-Palacios, Ricardo;;2020;Springer Link;698--713;;BizDevOps as an extension of DevOps, reinforces the collaboration between business, development, and operation stakeholders in the organization in order to enhance the software cycle. While BizDevOps has not yet received much attention in academic circles, it has gained considerable prestige in the industry area. This situation reflects a gap between theory and practice in this context. In this work and by means of a Multivocal Literature Review authors gather visions from both academic and industry spheres on the topic. The result is a gathered image of BizDevOps, including definition, characteristics, related motivating issues, and potential challenges and benefits.;;;;;;;Springer International Publishing;;;;;Rejected
A Critical Review of Challenges in Hypermedia Systems Development;Lang, Michael;;2005;Springer Link;277--288;;None;;;;;;;Springer US;;;;;Rejected
Gamification for Improving Software Project Management Processes: A Systematic Literature Review;Machuca-Villegas, Lilianaand Gasca-Hurtado, Gloria Piedad;;2019;Springer Link;41--54;;This systematic literature review aims to (a) understand the current state of gamification as a strategy for improving processes associated with software project management and (b) define future gamification in the context of software project management. For these purposes, we identified and analyzed studies based on research interests, including software project management areas explored with gamification, gamification elements used in this context, research methods, and industry type. Our findings indicate a predominance of studies in project management areas related to integration, resources, and scoping. The most commonly reported research method is the solution proposal, and the most commonly used gamification element is the point system. Future research must focus on addressing unexplored project management areas, which can be intervened with gamification as an improvement strategy to facilitate the implementation of good practices that impact the success of software development projects.;;;;;;;Springer International Publishing;;;;;Rejected
Characterizing DevOps Culture: A Systematic Literature Review;S{\'a}nchez-Gord{\'o}n, Maryand Colomo-Palacios, Ricardo;;2018;Springer Link;3--15;;Time and quality pressures are affecting software process in all its stages. One of the proposed solutions to these pressures is DevOps. DevOps is aimed to increase the frequency, quality and speed of deploying software from development into production by means of new organizational structures and processes with a high degree of automation. Several authors underlined the fact, that beyond the tool chain, DevOps is a culture shift. However, to date the characterization of DevOps culture remains unclear. In this paper, authors tackle this problem by means of a Systematic Literature Review. Results provide a deeper understanding of the phenomena from human factor{\textasciiacute}s perspective.;;;;;;;Springer International Publishing;;;;;Rejected
Agile Development in Bureaucratic Environments: A Literature Review;Onwujekwe, Geraldand Weistroffer, Heinz;;2019;Springer Link;316--330;;For the past decade, agile development approaches have achieved a good level of success. It does appear however that not all development environments have the same level of agile readiness, hence an organization's prevalent culture may be a mismatch with the agile development approach adopted. In this paper, we report on a structured literature review of information systems development projects that were conducted in a public sector or government organization. We posit that public sector and government organizations are commonly found to be bureaucratic in nature and we investigate how this impacts the project implementation using agile methodology. We document the challenges encountered in implementing these projects and some approaches to resolving these challenges.;;;;;;;Springer International Publishing;;;;;Rejected
Agile Methodologies Applied to the Development of Internet of Things (IoT)-Based Systems: A Review;Guerrero-Ulloa, Gleiston and Rodríguez-Domínguez, Carlos and Hornos, Miguel J.;Sensors;2022;Scopus;;23;Throughout the evolution of software systems, empirical methodologies have been used in their development process, even in the Internet of Things (IoT) paradigm, to develop IoT-based systems (IoTS). In this paper, we review the fundamentals included in the manifesto for agile software development, especially in the Scrum methodology, to determine its use and role in IoTS development. Initially, 4303 documents were retrieved, a number that was reduced to 186 after applying automatic filters and by the relevance of their titles. After analysing their contents, only 60 documents were considered. Of these, 38 documents present the development of an IoTS using some methodology, 8 present methodologies focused on the construction of IoTS software, and 14 present methodologies close to the systems life cycle (SLC). Finally, only one methodology can be considered SLC-compliant. Out of 38 papers presenting the development of some IoTS following a methodology for traditional information systems (ISs), 42.1% have used Scrum as the only methodology, while 10.5% have used Scrum combined with other methodologies, such as eXtreme Programming (XP), Kanban and Rapid Prototyping. In the analysis presented herein, the existing methodologies for developing IoTSs have been grouped according to the different approaches on which they are based, such as agile, modelling, and service oriented. This study also analyses whether the different proposals consider the standard stages of the development process or not: planning and requirements gathering, solution analysis, solution design, solution coding and unit testing (construction), integration and testing (implementation), and operation and maintenance. In addition, we include a review of the automated frameworks, platforms, and tools used in the methodologies analysed to improve the development of IoTSs and the design of their underlying architectures. To conclude, the main contribution of this work is a review for IoTS researchers and developers regarding existing methodologies, frameworks, platforms, tools, and guidelines for the development of IoTSs, with a deep analysis framed within international standards dictated for this purpose. © 2023 by the authors.;Review;10.3390/s23020790;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146726491&doi=10.3390%2fs23020790&partnerID=40&md5=610a519c4d262a150af953a351f66ab8;;"agile methodologies; development methodologies; Internet of Things (IoT); Model-Based Engineering; Model-Driven Engineering; software engineering";"Humans; Internet; Internet of Things; Research Personnel; Software; Agile manufacturing systems; Integration testing; Life cycle; Software design; Software prototyping; Agile Methodologies; Agile software development; Development methodology; Development process; Internet of thing; Model-based engineering; Model-driven Engineering; Scrum methodologies; Software-systems; System life cycle; human; Internet; personnel; software; Internet of things";;;English;"Cited by: 0; All Open Access, Gold Open Access, Green Open Access";;Rejected
Toward collisions produced in requirements rankings: A qualitative approach and experimental study;Rojas, Luis A. and Macías, José A.;Journal of Systems and Software;2019;Scopus;;158;Requirements prioritization is an important issue that determines the way requirements are selected and processed in software projects. There already exist specific methods to classify and prioritize requirements, most of them based on quantitative measures. However, most of existing approaches do not consider collisions, which are an important concern in large-scale requirements sets and, more specifically, in agile development processes where requirements have to be uniquely selected for each software increment. In this paper, we propose QMPSR (Qualitative Method for Prioritizing Software Requirements), an approach that features the prioritization of requirements by considering qualitative elements that are related to the project's priorities. Our approach highlights a prioritization method that has proven to reduce collisions in software requirements rankings. Furthermore, QMPSR improves accuracy in classification when facing large-scale requirements sets, featuring no scalability problems as the number of requirements increases. We formally introduce QMPSR and then define prioritization effort and collision metrics to carry out comprehensive experiments involving different sets of requirements, comparing our approach with well-known existing prioritization methods. The experiments have provided satisfactory results, overcoming existing approaches and ensuring scalability. © 2019;Article;10.1016/j.jss.2019.110417;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072193237&doi=10.1016%2fj.jss.2019.110417&partnerID=40&md5=0623452cd48c5a7b3e021f070e5d7dca;;"Qualitative prioritization method; Requirement collision; Requirement prioritization";"Scalability; Prioritization; Qualitative approach; Qualitative method; Quantitative measures; Requirement collision; Requirements prioritization; Scalability problems; Software requirements; Requirements engineering";;;English;"Cited by: 5; All Open Access, Green Open Access";;Rejected
Defining Frames to Structure Agile Development in Hybrid Settings - A Multi-Case Interview Study;Prenner, Nils and Klünder, Jil and Schneider, Kurt;ACM International Conference Proceeding Series;2022;Scopus;34 – 44;;Companies often combine agile and plan-based methods to so-called hybrid development approaches to benefit from the advantages of both. Recent research highlights conflicts introduced when combining agile and plan-based approaches in the different phases of the software lifecycle. For example, using both agile and plan-based methods during the requirements engineering of a project requires a decision on how many requirements should be gathered up-front and how many can be gathered during the runtime of a project. These conflicts need to be solved in order to construct a successful development approach. In order to investigate why the conflicts exist, how they are addressed in industry, and how they are related to each other, we performed a multi-case interview study with 15 practitioners. Our results reveal that the conflicts exist because companies use plan-based approaches to structure their agile development and define spaces of freedom and flexibility at the same time. From this insight and our results, we derive a theory that shows how companies structure their development stepwise by defining frames.  © 2022 Owner/Author.;Conference paper;10.1145/3529320.3529324;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130786496&doi=10.1145%2f3529320.3529324&partnerID=40&md5=c48bcd73e8e436c74a7bd869db7dca65;;"agile development; Hybrid development approaches; multi-case interview study; plan-based development";"Computation theory; Requirements engineering; Software engineering; Agile development; Development approach; Hybrid development approach; Interview study; Multi-case interview study; Plan-based; Plan-based development; Recent researches; Requirement engineering; Software life cycles; Life cycle";;;English;"Cited by: 0; All Open Access, Bronze Open Access";;Rejected
Agile practices and motivation: A quantitative study with Brazilian software developers;Oliveira, Reutman and França, César;ACM International Conference Proceeding Series;2019;Scopus;365 – 368;;The motivation of software engineers has been a recurring object of study with the aim of seeking a greater and healthier performance in software development teams. Although few studies associate the use of agile methods with motivation, they have not been able to explain the reasons beyond this connection. Oriented by a theory of work motivation of software engineers, this paper aims to investigate how agile practices are related to the motivation of these individuals. A research questionnaire was designed to evaluate the correlation between the use of agile attributes and job characteristics associated to work motivation. A total of 90 software engineers in 12 Brazilian states and 48 different companies participated in the survey, and results indicate that 24 of 25 of the agile attributes have significant correlations with at least one of the characteristics of the work that ignites motivation. Following agile requirements management process and Delivering valuable functionalities earlier are among the most impacting practices. © 2019 Copyright is held by the owner/author(s).;Conference paper;10.1145/3319008.3319714;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064767632&doi=10.1145%2f3319008.3319714&partnerID=40&md5=0b260caf86bf04190796c4b1dcb45d5a;;"Agile methods; Human factors; Management; Motivation";"Engineering research; Engineers; Human engineering; Management; Motivation; Surveys; Agile methods; Agile practices; Agile requirements; Job characteristics; Quantitative study; Research questionnaires; Software developer; Software development teams; Software design";;;English;Cited by: 2;;Rejected
Enhancing requirements engineering in agile methodologies by agent-oriented goal models: Two empirical case studies;Tenso, Tanel and Norta, Alexander Horst and Rootsi, Hannes and Taveter, Kuldar and Vorontsova, Irina;Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017;2017;Scopus;268 – 275;;The use of agile methods in software engineering is a standard practice and user stories are established artefacts used for breaking complex system requirements into smaller subsets. However, user stories do not suffice for understanding the big picture of system requirements. While there are methods that try to solve this problem, they lack visual tool support and are too heavy for smaller projects. We have earlier proposed a novel agile agent-oriented modelling (AAOM) method for filling this gap. The AAOM method comprises a visual approach to requirements engineering in agile projects that is based on goal models originating in agent-oriented modelling and connects goals intuitively to user stories. The purpose of the study reported in this article was evaluating the AAOM method for requirements engineering in two real-life case studies. The qualitative evaluation explores the applicability of AAOM for requirements engineering in agile software development processes. © 2017 IEEE.;Conference paper;10.1109/REW.2017.24;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034663452&doi=10.1109%2fREW.2017.24&partnerID=40&md5=dc5c0d82f7de2318212e01a9b02fcc50;;"Agile software engineering; Case study; Goal model; User story";"Agile manufacturing systems; Requirements engineering; Software design; Agent-oriented modelling; Agile software development process; Agile software engineering; Empirical case studies; Goal modeling; Qualitative evaluations; User stories; Visual tool supports; Software engineering";;;English;Cited by: 15;;Rejected
Working towards the student Scrum - Developing Agile Android applications;Reichlmayr, Thomas;ASEE Annual Conference and Exposition, Conference Proceedings;2011;Scopus;;;Student project teams are an integral part of the software engineering curriculum. This paper reports on the classroom experiences of student teams developing Android applications using Scrum. The course in study is a software engineering undergraduate elective in Agile Software Development which used Android mobile phones donated by Google as the development environment for student teams to learn and practice Scrum. Scrum is an agile project management framework increasingly being adopted in the development of commercial software products. When used in an academic setting it provides the opportunity to introduce and practice project management skills involving planning, estimation, tracking and identifying opportunities for continuous process improvement. As the ideal number of team members on a Scrum project is 5-9 developers, Scrum maps well from a size perspective for the typical student team collaborating on a course or capstone project. While Scrum has specific project roles and ceremonies, it is intentionally non-prescriptive on the development practices to be used in the execution of the project. In a software development project these practices are realized in the familiar software engineering life-cycles activities of requirements-analysis-design-code-testdeploy. In an Agile process these activities occur in more tightly wound incremental and iterative time boxes. Agile has also introduced variations on existing software development practices such as test first design or the frontloading of testing activities early in the development life-cycle. The paper addresses the benefits and limitations of the adoption of Scrum by a student project team and proposes recommendations for a pragmatic process framework - the Student Scrum - based on the contributions of agile processes and practices. © 2011 American Society for Engineering Education.;Conference paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029053637&partnerID=40&md5=767f860d20d39963a1e449260942fcd1;;;"Android (operating system); Curricula; Engineering education; Life cycle; Management science; Project management; Software engineering; Software testing; Students; Teaching; Agile software development; Commercial software products; Continuous process improvement; Engineering undergraduates; Software development practices; Software development projects; Software engineering curricula; Software engineering life-cycle; Software design";;;English;Cited by: 6;;Rejected
User story clustering in agile development: a framework and an empirical study;Yang, Bo and Ma, Xiuyin and Wang, Chunhui and Guo, Haoran and Liu, Huai and Jin, Zhi;Frontiers of Computer Science;2022;Scopus;;17;Agile development aims at rapidly developing software while embracing the continuous evolution of user requirements along the whole development process. User stories are the primary means of requirements collection and elicitation in the agile development. A project can involve a large amount of user stories, which should be clustered into different groups based on their functionality’s similarity for systematic requirements analysis, effective mapping to developed features, and efficient maintenance. Nevertheless, the current user story clustering is mainly conducted in a manual manner, which is time-consuming and subjective to human bias. In this paper, we propose a novel approach for clustering the user stories automatically on the basis of natural language processing. Specifically, the sentence patterns of each component in a user story are first analysed and determined such that the critical structure in the representative tasks can be automatically extracted based on the user story meta-model. The similarity of user stories is calculated, which can be used to generate the connected graph as the basis of automatic user story clustering. We evaluate the approach based on thirteen datasets, compared against ten baseline techniques. Experimental results show that our clustering approach has higher accuracy, recall rate and F1-score than these baselines. It is demonstrated that the proposed approach can significantly improve the efficacy of user story clustering and thus enhance the overall performance of agile development. The study also highlights promising research directions for more accurate requirements elicitation. © 2023, Higher Education Press.;Article;10.1007/s11704-022-8262-9;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146664699&doi=10.1007%2fs11704-022-8262-9&partnerID=40&md5=a92789788867ee1ed3517ab0b0766bbe;;"agile development; clustering; user story; user story mapping";"Natural language processing systems; Requirements engineering; Agile development; Clusterings; Development process; Empirical studies; Group-based; Large amounts; User requirements; User stories; User story mapping; Mapping";;;English;Cited by: 0;;Rejected
Process model for systematic requirements prioritisation process in an agile software development environment based on 5S approach: Empirical study;Al-Ta’ani, Rami Hasan and Razali, Rozilawati;Journal of Theoretical and Applied Information Technology;2017;Scopus;1715 – 1736;95;In an unstable software development characterized by the turbulence of markets and the competitive pressures, the organization is forced to adopt new software development methodology to be survival. The agile methods have been introduced to maintain the organization endurance. New challenges await agile methods, when requirement prioritisation and re-prioritisation happened frequently, this leads to unstable and disorganize requirement prioritisation process in agile development environment. To improve its effectiveness and make the environment more systematic and organized, this study proposes an adoption of the lean manufacturing tool, which is 5S approach. The 5S approach improve the work environment as it’s designed to check the process and guaranty that issues are identified and get rid of issues. Consequently, this study aims to identify the issues that affect the requirement prioritisation process. Therefore, in-depth interviews have been carried by involving 18 agile practitioners from different agile software development companies. The data collected for this study were analyzed by using grounded theory techniques (Open, Axial and Selective coding). The results are proposed a process model that will allow an improvement of the process by applying a suitable “S” to overcome the issues that might lead to unsystematic and disorganize environment. © 2005 – ongoing JATIT & LLS.;Article;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018450046&partnerID=40&md5=90ca714ff1f0f4b287f29165479e56b2;;"5S approach; Agile methods; Lean manufacture; Requirements analysis; Requirements Prioritisation process";;;;English;Cited by: 6;;Rejected
The Role of Requirements Engineering Practices in Agile Development: An Empirical Study;Wang, Xinyu and Zhao, Liping and Wang, Ye and Sun, Jie;Communications in Computer and Information Science;2014;Scopus;195 – 205;432 CCIS;Requirements Engineering (RE) plays a fundamental role in all sorts of software development processes. Recently, agile software development has been growing in popularity. However, in contrast to the extensive research of RE in traditional software development, the role of RE in agile development has not yet been studied in depth. In this paper, we present a survey with three research questions to explore the treatment of RE in the practical agile development by investigating eight agile groups from four software development organizations. To answer the three research questions, we targeted at 108 participants with rich agile experiences and designed a questionnaire to collect their answers. Our survey shows that agile RE practices play a crucial role in agile development and they are an important prerequisite for projects' success though many agile methods advocate coding without waiting for formal requirements and design specifications. © Springer-Verlag Berlin Heidelberg 2014.;Conference paper;10.1007/978-3-662-43610-3_15;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904742226&doi=10.1007%2f978-3-662-43610-3_15&partnerID=40&md5=e7f21c5f90af445f29ba01c974061632;;"agile software development; requirements analysis; requirements engineering; scrum; survey";"Software design; Surveying; Surveys; Agile software development; Design specification; Empirical studies; Requirements analysis; Research questions; scrum; Software development organizations; Software development process; Requirements engineering";;;English;Cited by: 38;;Rejected
Why feature-based roadmaps fail in rapidly changing markets: A qualitative survey;Münch, Jürgen and Trieflinger, Stefan and Lang, Dominic;CEUR Workshop Proceedings;2018;Scopus;202 – 218;2305;Context: Companies in highly dynamic markets struggle increasingly with their ability to plan their future product portfolios and to create reliable feature-driven roadmaps. It seems that the traditional process of product roadmap creation that aims at providing a stable plan for all involved stakeholders does not fulfill its purpose anymore. However, the underlying reasons as well as necessary changes to the roadmap process are not widely analyzed and understood. Objective: This paper aims at getting an understanding of current problems and challenges with roadmapping processes in companies that are facing volatile markets with innovative products. It also aims at gathering ideas and attempts on how to react to those challenges. Method: As an initial step towards the objectice a semi-structured expert interview study with a case company in the Smart Home domain was conducted. Four employees from the case company with different roles around product roadmaps have been interviewed and a content analysis of the data has been performed. Results: The study shows a significant consensus among the interviewees about several major challenges and the necessity to change the traditional roadmapping process and format. The interviewees stated that based on their experience traditional feature-based product roadmaps are increasingly losing their benefits (such as good planning certainty) in volatile environments. Furthermore, the ability to understand customer needs and behaviors has become highly important for creating and adjusting product roadmaps. The interviewees see the need for both, sufficiently stable goals on the roadmap and flexibility with respect to products or features to be developed. To reach this target the interviewees proposed to create roadmaps based on outcome goals instead of product features. In addition, it was proposed to decrease the level of detail of the roadmaps and to emphasize the long-term view. Decisions about which feature to develop should be open as long as possible. Expected benefits of such a new way of product roadmapping are higher user-centricity, a stable overall direction, more flexibility with respect to development decisions, and less breaking of commitments. © 2018 CEUR-WS. All rights reserved.;Conference paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060604714&partnerID=40&md5=27b8cd3a4b370bc974f96b5d163ba31e;;"Agile development; Agile requirements management; Customer development; Innovation management; Lean development; Lean UX; Portfolio management; Portfolio roadmap; Product management; Product roadmap; Requirements engineering; UX";"Automation; Commerce; Ecosystems; Financial data processing; Investments; Requirements engineering; Silicon compounds; Tungsten compounds; Agile development; Agile requirements; Customer development; Innovation management; Lean development; Lean ux; Portfolio managements; Product management; Roadmap; Boron compounds";;;English;Cited by: 14;;Rejected
Discovering undocumented knowledge through visualization of agile software development activities: Case studies on industrial projects using issue tracking system and version control system;Saito, Shinobu and Iimura, Yukako and Massey, Aaron K. and Antón, Annie I.;Requirements Engineering;2018;Scopus;381 – 399;23;In agile software development projects, software engineers prioritize implementation over documentation. Is the cost of missing documentation greater than the cost of producing unnecessary or unused documentation? Agile software engineers must still maintain other software artifacts, such as tickets in an issue tracking system or source code committed to a version control system (VCS). Do these artifacts contain useful knowledge? In this paper, we examine undocumented knowledge in a multi-case exploratory case study of industrial agile software development projects. The first is an internal project with 159 source code commits and roughly 8000 lines of code. The second is an external project with 760 source code commits and roughly 50,000 lines of code. We introduce a ticket-commit network chart (TCC) that visually represents time-series commit activities along with filed issue tickets. We also implement a tool to generate the TCC using both commit log and ticket data. Our case study revealed that software engineers committed source code to the VCS without a corresponding issue ticket in a non-trivial minority of instances. If these commits were based on and linked to individual issue tickets, then these “unissued” tickets would have accounted for a non-trivial minority (5–21%) of the knowledge needed for future software modification and operations. End users and requirements engineers also evaluated the contents of these commits. They found that the omission of links to individual tickets had an important impact on future software modification or operation with between 22 and 49% of these instances resulting in undocumented knowledge. © 2018, Springer-Verlag London Ltd., part of Springer Nature.;Article;10.1007/s00766-018-0291-4;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044951576&doi=10.1007%2fs00766-018-0291-4&partnerID=40&md5=e2266f05e9c56e7464b92934face419f;;"Agile; Agile development; Agile requirements; Requirements knowledge; Requirements management";"Agile manufacturing systems; Codes (symbols); Computer programming languages; Control systems; Engineers; Information management; Requirements engineering; Tracking (position); Agile; Agile development; Agile requirements; Requirements knowledge; Requirements management; Software design";;;English;Cited by: 6;;Rejected
Is there an agile handover? An empirical study of documentation and project handover practices across agile software teams;Stettina, Christoph Johann and Kroon, Egbert;2013 International Conference on Engineering, Technology and Innovation, ICE 2013 and IEEE International Technology Management Conference, ITMC 2013;2015;Scopus;;;The growing use of agile and lean methods has heated the discussion on efficiency and sustainability of software engineering processes. During project handovers, for example, loss of knowledge has been indicated and critics of agile methods point at a lack of documentation. In this paper we take the perspective of patterns of human action, looking at the actions the teams take and the artifacts they use during a software project handover. Our results from 30 teams in small to large size projects cover the perceptions of a variety of roles and indicate that the adoption is a learning process in three interdependent phases: Environment, System and Architecture. The participants in our study perceived the biggest gaps in the usefulness of available design and requirements documentation. Based on our findings we suggest that documentation artifacts should rather support the learning process and that including maintenance staff in the development process significantly helps improving the handover. © 2013 IEEE.;Conference paper;10.1109/ITMC.2013.7352703;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962252003&doi=10.1109%2fITMC.2013.7352703&partnerID=40&md5=e62f4e03da687e9aed157ce762567eb4;;"Agile project management; agile teams; empirical study; knowledge sharing; organizational management and coordination; process improvement; software development";"Engineering research; Industrial management; Learning systems; Management science; Project management; Software design; Software engineering; Sustainable development; Agile project management; Agile teams; Empirical studies; Knowledge-sharing; Organizational management and coordinations; Process Improvement; Human resource management";;;English;Cited by: 14;;Rejected
An empirical study on the requirements engineering practices for agile software development;Kassab, Mohamad;Proceedings - 40th Euromicro Conference Series on Software Engineering and Advanced Applications, SEAA 2014;2014;Scopus;254 – 261;;Collecting, understanding, and managing requirements are critical aspects in all development methods including agile methods as well. Nevertheless, little contemporary data exists for document actual practices of software professionals for software requirements engineering activities in agile environments. To remedy this deficiency and provide useful data to other researchers we conducted a survey study that drew participants from wide range of professions, industries and geographic locations. We filtered the survey responses according to the Software Development Life Cycle, then we analyzed how agile processes (compared to traditional waterfall model) deal with a paradox of requirements engineering. In this paper, we present this exploratory survey and its quantitative results. © 2014 IEEE.;Conference paper;10.1109/SEAA.2014.77;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84916619875&doi=10.1109%2fSEAA.2014.77&partnerID=40&md5=df0ce5c59cd32b3bfda4e53e05ca6d36;;"agile development; common practices; Requirements Engineering; software development industry; software professionals";"Application programs; Life cycle; Requirements engineering; Surveys; Agile development; Agile software development; common practices; Engineering activities; Exploratory surveys; Managing requirements; Quantitative result; Software development life cycle; Software design";;;English;Cited by: 22;;Rejected
Agile Requirements Engineering and Software Planning for a Digital Health Platform to Engage the Effects of Isolation Caused by Social Distancing: Case Study;Meinert, Edward and Milne-Ives, Madison and Surodina, Svitlana and Lam, Ching;JMIR Public Health and Surveillance;2020;Scopus;;6;Background: Social distancing and shielding measures have been put in place to reduce social interaction and slow the transmission of the coronavirus disease (COVID-19). For older people, self-isolation presents particular challenges for mental health and social relationships. As time progresses, continued social distancing could have a compounding impact on these concerns. Objective: This project aims to provide a tool for older people and their families and peers to improve their well-being and health during and after regulated social distancing. First, we will evaluate the tool’s feasibility, acceptability, and usability to encourage positive nutrition, enhance physical activity, and enable virtual interaction while social distancing. Second, we will be implementing the app to provide an online community to assist families and peer groups in maintaining contact with older people using goal setting. Anonymized data from the app will be aggregated with other real-world data sources to develop a machine learning algorithm to improve the identification of patients with COVID-19 and track for real time use by health systems. Methods: Development of this project is occurring at the time of publication, and therefore, a case study design was selected to provide a systematic means of capturing software engineering in progress. The app development framework for software design was based on agile methods. The evaluation of the app’s feasibility, acceptability and usability shall be conducted using Public Health England's guidance on evaluating digital health products, Bandura’s model of health promotion, the Reach Effectiveness Adoption Implementation Maintenance (RE-AIM) framework and the Nonadoption, Abandonment and Challenges to the Scale-up, Spread and Suitability (NASSS) framework. Results: Making use of a pre-existing software framework for health behavior change, a proof of concept was developed, and a multistage app development and deployment for the solution was created. Grant submissions to fund the project and study execution have been sought at the time of publication, and prediscovery iteration of the solution has begun. Ethical approval for a feasibility study design is being sought. Conclusions: This case study lays the foundations for future app development to combat mental and societal issues arising from social distancing measures. The app will be tested and evaluated in future studies to allow continuous improvement of the app. This novel contribution will provide an evidence-based exemplar for future app development in the space of social isolation and loneliness. © Edward Meinert.;Article;10.2196/19297;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097846280&doi=10.2196%2f19297&partnerID=40&md5=4be6dfde6b8a1d7afbcf13d37e60cc53;;"Access; Aged; Agile; App; Artificial intelligence; Cellphone; Coronavirus; COVID-19; Data science; Digital health; Evaluation; Exercise; Health care quality; Information science; Mental health; Public reporting of healthcare data; Requirements engineering; Social distancing; Telemedicine";;;;English;"Cited by: 31; All Open Access, Gold Open Access, Green Open Access";;Rejected
Resolving Conflicts in Requirement Engineering Through Agile Software Development: A Comparative Case Study;Bhavsar, Raj and Thakkar, Arjun and Sanghavi, Pavan and Tanwar, Sudeep;Lecture Notes in Networks and Systems;2019;Scopus;349 – 357;55;Requirement engineering (RE) phase is the most important phase of software development life cycle (SDLC). To give the best possible product to the clients, the companies must identify and collect latest, complete, consistent, and clear requirements for the product. Poor requirements for any product will end up being the reiteration of the phases from the beginning, and it may results in an increase of cost and time. Every day clients are demanding something new, and if companies are not able to satisfy their requirements due to lack of requirement satisfaction of the clients, it may damage the reputation of the companies. In this paper, we have included some case studies regarding RE, conflicts in RE, and how to solve those conflicts which arise during the RE phase using Agile software development. © 2019, Springer Nature Singapore Pte Ltd.;Book chapter;10.1007/978-981-13-2324-9_35;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063139552&doi=10.1007%2f978-981-13-2324-9_35&partnerID=40&md5=4b4c3550de6db94fc96f4fcdff5a7c0a;;"Agile; Refinement of requirements; Requirement conflicts; Requirement engineering";;;;English;Cited by: 3;;Rejected
Improving the Quality of Requirements Engineering Process in Software Development with Agile Methods: A Case Study Telemedicine Startup XYZ;Wibawa, Adi S. and Budiardjo, Eko K. and Mahatma, Kodrat;2021 International Conference Advancement in Data Science, E-Learning and Information Systems, ICADEIS 2021;2021;Scopus;;;XYZ is a telemedicine startup company that uses Scrum, an Agile methodology, as a software development method. The company uses Scrum to deliver good products and services to customers on time, even with limited requirements. However, the company faced problems in product development, so the company could not release the product on time. Based on interviews with internal experts, the company has issues determining the priority scale of requirements and change requirement management, where both problems are part of requirement engineering. This study discusses the problems of the company XYZ regarding the requirement engineering process, especially the problem of determining the priority scale of requirements and change requirement management. This research uses the CMMI-Dev 1.3 specific process area to assess the requirement engineering process in the company using sub-specific practices in the Requirement Development (RD) and Requirement Management (REQM) process areas. Researchers conducted interviews with product managers to appraise sub-specific RD and REQM practices with current activities in the company. The results of this study are recommendations to improve the quality of the requirement engineering process by using Objective Key Result (OKR) and Action Priority Matrix (APM). © 2021 IEEE.;Conference paper;10.1109/ICADEIS52521.2021.9701962;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85126537207&doi=10.1109%2fICADEIS52521.2021.9701962&partnerID=40&md5=d33656927c8478d084c229d655a7d77e;;"Action Priority Matrix; Agile; CMMI-Dev 1.3; Objective Key Result; Requirement Engineering; Scrum";"Telemedicine; Action priority matrix; Agile; CMMI-dev 1.3; matrix; Objective key result; Process areas; Requirement development; Requirement engineering; Requirement engineering process; Scra; Software design";;;English;Cited by: 1;;Rejected
The use of design thinking for requirements engineering: An ongoing case study in the field of innovative software-intensive systems;Hehn, Jennifer and Uebernickel, Falk;Proceedings - 2018 IEEE 26th International Requirements Engineering Conference, RE 2018;2018;Scopus;400 – 405;;Requirements Engineering (RE) has been aiding software-intensive development projects for quite some time now. However, today's projects growingly demand for agile and human-centered approaches to discover and meet the often fuzzy needs of the various stakeholders involved. In that regard, Design Thinking (DT) has become one of the most promising methods to address wicked problems and define innovative solutions. We see potential to combine both, the strongly human-oriented working mode of DT with the more formal, technology-driven world of RE, to develop human-centered solutions more effectively. Yet, little is known how such an integration could be realized and which concrete benefits and challenges to expect. To better understand this endeavor, we conduct a longitudinal case study to identify how DT and RE can work together in an agile development setting from the very beginning of idea conceptualization to market-ready implementation. In this paper, we summarize our research protocol and present first findings how Design Thinking can complement current RE practices through meeting known challenges encountered by the RE community of practitioners. We provide a better understanding of the multi-faceted potential of DT for RE for both, scholars and practitioners, and describe open issues and planned future steps in our study. © 2018 IEEE.;Conference paper;10.1109/RE.2018.00-18;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056827057&doi=10.1109%2fRE.2018.00-18&partnerID=40&md5=943e84a0ac54ffd375dcb4d0a54a4e6a;;"Agile development; Design thinking; Requirements engineering";"Software engineering; Agile development; Design thinking; Development project; Innovative solutions; Longitudinal case study; Research protocol; Software intensive systems; Wicked problems; Requirements engineering";;;English;"Cited by: 27; All Open Access, Green Open Access";;Rejected
Prototyping use as a software requirements elicitation technique: A case study;Carrizo, Dante and Quintanilla, Iván;Advances in Intelligent Systems and Computing;2018;Scopus;341 – 350;746;Prototyping is an agile software development methodology. It has also been proposed as a technique to obtain the software requirements from the stakeholders. However, there are few publications proposing a prescriptive guide and show its use in practice. This article presents a report of a case in which the prototype technique was used to elicit requirements of a software system in the university academic context. For this, authors propose a procedure to apply and they carry out elicitation sessions with two stakeholders who have different familiarity with the domain. The results show that the technique is effective in achieving a high coverage of the requirements and that it seems to perform better with stakeholders who have more familiarity with the domain. Although the results do not have statistical power, the case yields trends that can help development teams adopt this technique to produce the requirements in certain cases. © Springer International Publishing AG, part of Springer Nature 2018.;Conference paper;10.1007/978-3-319-77712-2_33;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045312919&doi=10.1007%2f978-3-319-77712-2_33&partnerID=40&md5=434f8ef6bd624cd61129a367f1c01f98;;"Case study; Familiarity with the domain; Prototyping technique; Requirements engineering; Requirements production";"Information systems; Information use; Requirements engineering; Software design; Agile software development; Development teams; Familiarity with the domain; Prototype techniques; Software requirements; Software systems; Statistical power; Software prototyping";;;English;Cited by: 3;;Rejected
Combining agile software development and service-learning: A case study in experiential IS education;Robinson, Spencer and Hall, Margeret;SIGCSE 2018 - Proceedings of the 49th ACM Technical Symposium on Computer Science Education;2018;Scopus;491 – 496;2018-January;Experiential learning is ever-more popular with educators, industry, and with students themselves. Finding and delivering appropriate applied use cases can be challenging though, as on one hand industry partners May not willing to give insights to non-employees into their systems for creating truly meaningful case studies, and on the other hand the appropriate balance between instruction and application is ill-defined. Service learning projects are one solution for filling in the applied project gap. This case study takes place in the nexus between blended classrooms, applied software development, and service learning. Junior and senior level students partnered with a community actor to develop deployable software applying the Agile methodology. The service-learning project enabled students to engage in a full-cycle development project, from requirements gathering to hypercare. However, significant trade-offs in structure and classroom management must be made when the focus of the class is a full implementation. Blended technologies and course delivery were found to aid delivery and project management in a seamless manner. Drawing on feedback from stakeholders and students, this experience report makes a series of recommendations for implementing applied software development. Our contribution is the introduction and assessment of a method to marry (online) information systems education with service learning. © 2018 Association for Computing Machinery.;Conference paper;10.1145/3159450.3159564;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046354404&doi=10.1145%2f3159450.3159564&partnerID=40&md5=900f4426e230cd0355587434c15c5b6a;;"Agile software development; Experiential learning; Information systems education; Service learning; Undergraduate instruction";"Agile manufacturing systems; Computer software; Economic and social effects; Education computing; Information systems; Information use; Online systems; Project management; Students; Teaching; Agile software development; Experiential learning; Information systems educations; Service learning; Undergraduate instruction; Software design";;;English;Cited by: 8;;Rejected
Exploring collaborative writing of user stories with multimodal learning analytics: A case study on a software engineering course;Noel, Rene and Riquelme, Fabian and Lean, Roberto Mac and Merino, Erick and Cechinel, Cristian and Barcelos, Thiago S. and Villarroel, Rodolfo and Munoz, Roberto;IEEE Access;2018;Scopus;67783 – 67798;6;Software engineering is the application of principles used in engineering design, development, testing, deployment, and management of software systems. One of the software engineering's approaches, highly used in new industries, is agile development. User stories are a commonly used notation to capture user requirements in agile development. Nevertheless, for the elaboration of user stories, a high level of collaboration with the client is necessary. This professional skill is rarely measured or evaluated in educational contexts. The present work approaches collaboration in software engineering students through multimodal learning analytics, modeling, and evaluating students' collaboration while they are writing user stories. For that, we used multidirectional microphones in order to derive social network analysis metrics related to collaboration (permanence and prompting) together with human-annotated information (quality of the stories and productivity). Results show that groups with a lower productivity in writing user stories and less professional experience in managing software requirements present a non-collaborative behavior more frequently, and that teams with a fewer number of interventions are more likely to produce a greater number of user stories. Moreover, although low experience subjects produced more user stories, a greater productivity of the most experienced subjects was not statistically verified. We believe that these types of initiatives will allow the measurement and early development of such skills in university students. © 2013 IEEE.;Article;10.1109/ACCESS.2018.2876801;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055031914&doi=10.1109%2fACCESS.2018.2876801&partnerID=40&md5=9d4720f8d3e50d5a7e075d26ed87ecfe;;"agile development; multimodal learning analytics; Requirements engineering; social network analysis";"Application programs; Productivity; Quality control; Requirements engineering; Social networking (online); Software testing; Students; Agile development; Collaborative writing; Educational context; Multi-modal learning; Professional experiences; Software engineering course; Software engineering students; Software requirements; Engineering education";;;English;"Cited by: 24; All Open Access, Gold Open Access";;Rejected
How Much Undocumented Knowledge is there in Agile Software Development?: Case Study on Industrial Project Using Issue Tracking System and Version Control System;Saito, Shinobu and Iimura, Yukako and Massey, Aaron K. and Anton, Annie I.;Proceedings - 2017 IEEE 25th International Requirements Engineering Conference, RE 2017;2017;Scopus;194 – 203;;In agile software development projects, software engineers prioritize implementation over documentation to eliminate needless documentation. Is the cost of missing documentation greater than the cost of producing unnecessary or unused documentation? Even without these documents, software engineers maintain other software artifacts, such as tickets in an issue tracking system (ITS) or source code committed to a version control system (VCS). Do these artifacts contain the necessary knowledge? In this paper, we examine undocumented knowledge in an agile software development project at NTT. For our study, we collected 159 commit logs in a VCS and 102 tickets in the ITS from the three-month period of the project. We propose a ticket-commit network chart (TCC) that visually represents time-series commit activities along with filed issue tickets. We also implement a tool to generate the TCC using both commit log and ticket data. Our study revealed that in 16% of all commits, software engineers committed source code to the VCS without a corresponding issue ticket in the ITS. Had these commits been based on individual issue tickets, these 'unissued' tickets would have accounted for 20% of all tickets. Software users and requirements engineers also evaluated the contents of these commits and found that 42% of the 'unissued' tickets were required for software operation and 23% of those were required for requirements modification. © 2017 IEEE.;Conference paper;10.1109/RE.2017.33;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032798360&doi=10.1109%2fRE.2017.33&partnerID=40&md5=a968c9dcd2028de5824ac1031dee7c2a;;"Agile Agile Development; Issue Tracking System; Requirements Knowledge; Version Control System";"Agile manufacturing systems; Control systems; Engineers; Information management; Requirements engineering; Software engineering; Tracking (position); Agile development; Agile software development; Agile software development projects; Industrial projects; Issue Tracking; Requirements Knowledge; Software artifacts; Version control system; Software design";;;English;Cited by: 11;;Rejected
Scaling agile mechatronics: An industrial case study;Lantz, Jonn and Eliasson, Ulf;Continuous software engineering;2014;Scopus;211 – 222;9783319112831;The automotive industry is currently in a state of rapid change. The traditional mechanical industry has, forced by electronic revolution and global threats of climate change, transformed into a computerized electromechanical industry. A hybrid or electric car of 2013 can have, in the order of 100 electronic control units, running gigabytes of code, working together in a complex network within the car as well as being connected to networks in the world outside. This exponential increase of software has posed new challenges for the R&D organizations. In many cases the commonly used method of requirement engineering towards external suppliers in a waterfall process has shown to be unmanageable. Part of the solution has been to introduce more in-house software development and the new standardized platform for embedded software, AUTOSAR. During the past few years, Volvo Cars has focused on techniques and processes for continuous integration of embedded software for active safety, body functions, and motor and hybrid technology. The feedback times for ECU system test have decreased from months to, in the best cases, hours. Domain-specific languages (DSL), for both software and physical models, have been used to great extent when developing in-house embedded software at Volvo Cars. The main reasons are the close connection with mechatronic systems (motors, powertrain, servos, etc.), the advantage of having domain experts (not necessarily software experts) developing control software, and the facilitated reuse of algorithms. Model-driven engineering also provides a method for agile development and early learning in projects where hardware and mechanics usually are available only late. Model-based testing of the software is performed, both as pure simulation (MIL) and in hardware-in-the-loop (HIL) rigs, before it is deployed in real cars. This testing is currently being automated for several rigs, as part of the continuous integration strategy. The progress is, however, not without challenges. Details of the work split with Tier 1 suppliers, using the young AUTOSAR standard, and the efficiency of AUTOSAR code are still open problems. Another challenge is to manage the complex model framework required for virtual verification when applied on system level and numerous DSLs have to be executed together. © 2014 Springer International Publishing Switzerland. All rights reserved.;Book chapter;10.1007/978-3-319-11283-1_17;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84930695275&doi=10.1007%2f978-3-319-11283-1_17&partnerID=40&md5=1945ace6e34c81038717f2c93df4f157;;;"Agile manufacturing systems; Automotive industry; Climate change; Complex networks; Computer software reusability; Digital subscriber lines; Electronics industry; Embedded software; Integration testing; Model checking; Problem oriented languages; Traction motors; Continuous integrations; Domain specific languages; Electromechanical industry; Electronic control units; In-house software development; Industrial case study; Model-driven Engineering; Requirement engineering; Software design";;;English;Cited by: 1;;Rejected
Do we know enough about requirements prioritization in agile projects: Insights from a case study;Racheva, Zornitza and Daneva, Maya and Sikkel, Klaas and Wieringa, Roel and Herrmann, Andrea;Proceedings of the 2010 18th IEEE International Requirements Engineering Conference, RE2010;2010;Scopus;147 – 156;;Requirements prioritization is an essential mechanism of agile software development approaches. It maximizes the value delivered to the clients and accommodates changing requirements. This paper presents results of an exploratory cross-case study on agile prioritization and business value delivery processes in eight software organizations. We found that some explicit and fundamental assumptions of agile requirement prioritization approaches, as described in the agile literature on best practices, do not hold in all agile project contexts in our study. These are (i) the driving role of the client in the value creation process, (ii) the prevailing position of business value as a main prioritization criterion, (iii) the role of the prioritization process for project goal achievement. This implies that these assumptions have to be reframed and that the approaches to requirements prioritization for value creation need to be extended. © 2010 IEEE.;Conference paper;10.1109/RE.2010.27;https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650409164&doi=10.1109%2fRE.2010.27&partnerID=40&md5=ac63ceb00981e912e78d249c083eeb0f;;"Agile development; Exploratory case study; Requirements prioritization; Value creation";"Requirements engineering; Research; Agile development; Agile software development; Best-practices; Business value; Exploratory case studies; Prioritization; Prioritization process; Project goals; Requirements prioritization; Software organization; Value creation; Value creation process; Software design";;;English;Cited by: 43;;Rejected
Lean principles and techniques for improving the quality and productivity of software development projects: A case study;Middleton, Peter and Taylor, Philip S. and Flaxel, Amy and Cookson, Ammon;International Journal of Productivity and Quality Management;2007;Scopus;387 – 403;2;Software product development is recognised as difficult due to the intangible nature of the product, requirements elicitation, effective progress measurement, and so forth. In this paper, we describe some of the challenges of software product development and how the challenges are being met by lean management principles and techniques. Specifically, we examine lean principles and techniques that were devised by Toyota and other manufacturers over the last 50 years. Applying lean principles to software development projects has been advocated for over ten years and it will be shown that the extensive lean literature is a valuable source of ideas for software development. A case study with a software development organisation, Timberline Inc., will demonstrate that lean principles and techniques can be successfully applied to software product development. Copyright © 2007 Inderscience Enterprises Ltd.;Article;10.1504/IJPQM.2007.013334;https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548211776&doi=10.1504%2fIJPQM.2007.013334&partnerID=40&md5=bcebfcfee6d82b9a4d2fa53cdf2eb04c;;"Agile methods; Customer value; Lean manufacturing; Lean software development; Productivity improvement; Project management; Software process improvement";;;;English;Cited by: 19;;Rejected
A conceptual model of client-driven agile requirements prioritization: Results of a case study;Racheva, Zornitza and Daneva, Maya and Herrmann, Andrea;ESEM 2010 - Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement;2010;Scopus;;;Requirements (re)prioritization is an essential mechanism of agile development approaches to maximize the value for the clients and to accommodate changing requirements. Yet, in the agile Requirements Engineering (RE) literature, very little is known about how agile (re)prioritization happens in practice. Conceptual models about this process are missing, which, in turn, makes it difficult for both practitioners and researchers to reason about requirements decision-making at inter-iteration time. We did a multiple case study on agile requirements prioritization methods to yield a conceptual model for understanding the inter-iteration prioritization process. The model is derived by using interview data from practitioners in 8 development organizations. Such a model makes explicit the concepts that are used tacitly in the agile requirements prioritization practice and can be used for structuring future empirical investigations about this topic, and for analyzing, supporting, and improving the process in real-life projects. © 2010 ACM.;Conference paper;10.1145/1852786.1852837;https://www.scopus.com/inward/record.uri?eid=2-s2.0-78149239516&doi=10.1145%2f1852786.1852837&partnerID=40&md5=da8844d792fc01f275eb72e86aeab2f1;;"agile development; case study; inter-iteration decision-making process; requirements prioritization";"Iterative methods; Research; Software engineering; Agile development; case study; Conceptual model; Empirical investigation; inter-iteration decision-making process; Multiple-case study; Prioritization; Prioritization process; Requirements prioritization; Decision making";;;English;Cited by: 28;;Rejected
Assessing agile methods: An empirical study;Sampaio, Américo and Vasconcelos, Alexandre and Sampaio, Pedro R. Falcone;Journal of the Brazilian Computer Society;2004;Scopus;21 – 48;10;Agile software processes emerged to address the issue of building software on time and within the planned budget. To adopt an agile process, it is imperative to analyze and evaluate its effectiveness in supporting high quality software development while complying with stringent time constraints. In this paper we describe an agile method for Web-based application development (XWebProcess) and an experiment conducted with a group of forty senior undergraduate students to assess the quality/speed effectiveness of the proposed method vis-à-vis the effectiveness of Extreme Programming (XP). The results have shown that the process proposed is equally agile when compared to XP, moreover, surveys conducted as part of the experiment pointed out that XWebProcess is more suitable to Web development in dimensions such as requirements gathering, user interface and navigation design, and software testing, therefore leading to better quality software. © 2005, The Brazilian Computer Society.;Article;10.1007/BF03192357;https://www.scopus.com/inward/record.uri?eid=2-s2.0-42249099866&doi=10.1007%2fBF03192357&partnerID=40&md5=0bb0666e707b922a05ea90e1ebcea571;;"Agile Processes; Experimentation; Software Process; XP; XWebProcess";"Budget control; Software engineering; Software testing; Students; User interfaces; X ray photoelectron spectroscopy; Agile process; Agile software process; Experimentation; Requirements gathering; Software process; Undergraduate students; Web-based applications; XWebProcess; Software design";;;English;"Cited by: 5; All Open Access, Green Open Access, Hybrid Gold Open Access";;Rejected
Knowledge Management Initiatives in Agile Software Development: A Literature Review;Vasanthapriyan, Shanmuganathan;Research Anthology on Agile Software, Software Development, and Testing;2021;Scopus;2065 – 2081;4;Agile software development (ASD) is a knowledge-intensive and collaborative activity and thus Knowledge Management (KM) principals should be applied to improve the productivity of the whole ASD process from the beginning to the end of the phase. The goal is to map the evidence available on existing researches on KM initiatives in ASD in order to identify the state of the art in the area as well as the future research. Therefore, investigation of various aspects such as purposes, types of knowledge, technologies and research type are essential. The authors conducted a systematic review of literature published between 2010 and December 2017 and identified 12 studies that discuss agile requirements engineering. They formulated and applied specific inclusion and exclusion criteria in two distinct rounds to determine the most relevant studies for their research goal. Reuse of knowledge of the team is the perspective that has received more attention. © 2022, IGI Global.;Book chapter;10.4018/978-1-6684-3702-5.ch099;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85136438022&doi=10.4018%2f978-1-6684-3702-5.ch099&partnerID=40&md5=9eeb86c80203f872e57684a85e5557ed;;;;;;English;Cited by: 0;Papers that do not present online versions available.;Rejected
An industrial case study on test cases as requirements;Bjarnason, Elizabeth and Unterkalmsteiner, Michael and Engström, Emelie and Borg, Markus;Lecture Notes in Business Information Processing;2015;Scopus;27 – 39;212;It is a conundrum that agile projects can succeed ‘without requirements’ when weak requirements engineering is a known cause for project failures. While Agile development projects often manage well without extensive requirements documentation, test cases are commonly used as requirements. We have investigated this agile practice at three companies in order to understand how test cases can fill the role of requirements. We performed a case study based on twelve interviews performed in a previous study. The findings include a range of benefits and challenges in using test cases for eliciting, validating, verifying, tracing and managing requirements. In addition, we identified three scenarios for applying the practice, namely as a mature practice, as a de facto practice and as part of an agile transition. The findings provide insights into how the role of requirements may be met in agile development including challenges to consider. © Springer International Publishing Switzerland 2015.;Conference paper;10.1007/978-3-319-18612-2_3;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942798244&doi=10.1007%2f978-3-319-18612-2_3&partnerID=40&md5=bf280b72506ed0b33883457b76a0b26d;;"Acceptance test; Agile development; Behaviour-driven development; Case study; Requirements and test alignment";"Software design; Software engineering; Agile development; Agile practices; Behaviour-driven development; Industrial case study; Managing requirements; Project failures; Requirements documentations; Test case; Acceptance tests";;;English;Cited by: 7;;Rejected
Studying relevant socio-technical aspects of requirements-driven collaboration in agile teams;Inayat, Irum and Marczak, Sabrina and Salim, Siti Salwah;2013 3rd International Workshop on Empirical Requirements Engineering, EmpiRE 2013 - Proceedings;2013;Scopus;32 – 35;;Requirements engineering requires intensive collaboration among team members. Agile methods also require constant collaboration among those involved in the project. While working on certain interdependent tasks, team members develop social and technical relationships that instigate socio-technical dependencies. The main goal of our research is to investigate socio-technical aspects that underlie requirements-driven collaboration among agile teams and their influence on project performance. In this paper we present our research approach to achieve such goal and briefly report on preliminary findings. A survey revealed that communication and awareness are the most relevant socio-technical aspects that underlie requirements-driven collaboration in agile teams. Initial findings of a case study aiming to identify requirements-driven collaboration patterns suggest that teams well aware of each other have lesser communication gaps and require lesser rework. Findings will contribute to a better understanding of the relationship between collaboration and performance in agile teams. © 2013 IEEE.;Conference paper;10.1109/EmpiRE.2013.6615213;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887491494&doi=10.1109%2fEmpiRE.2013.6615213&partnerID=40&md5=aaeddc3a152cfe3ae2ffa95f60799f35;;;"Research; Agile methods; Collaboration patterns; Communication gaps; Inter-dependent tasks; Project performance; Research approach; Socio-technical aspects; Sociotechnical; Requirements engineering";;;English;Cited by: 9;;Rejected
Agile requirements engineering practices: An empirical study;Cao, Lan and Ramesh, Balasubramaniam;IEEE Software;2008;Scopus;60 – 67;25;An analysis of data from 16 software development organizations reveals seven agile requirements-engineering practices, along with their benefits and challenges. These practices include face-to-face communication, iterative RE, extreme prioritization, constant planning, prototyping, test-driven development, and reviews and tests. © 2008 IEEE.;Article;10.1109/MS.2008.1;https://www.scopus.com/inward/record.uri?eid=2-s2.0-39449130107&doi=10.1109%2fMS.2008.1&partnerID=40&md5=28c215ed11f3f14cd3cdaa6f75188544;;"Agile software development; Requirements engineering";"Computer software selection and evaluation; Data reduction; Planning; Software prototyping; Software testing; Test-driven development; Requirements engineering";;;English;Cited by: 276;;Rejected
Defining Requirements Strategies in Agile: A Design Science Research Study;Muhammad, Amna Pir and Knauss, Eric and Batsaikhan, Odzaya and Haskouri, Nassiba El and Lin, Yi-Chun and Knauss, Alessia;Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics);2022;Scopus;73 – 89;13709 LNCS;Research shows that many of the challenges currently encountered with agile development are related to requirements engineering. Based on design science research, this paper investigates critical challenges that arise in agile development from an undefined requirements strategy. We explore potential ways to address these challenges and synthesize the key building blocks of requirements strategies. Our design science research rests on a multiple case study with three industrial cases in the domains of communication technology, security services, and automotive. We relied on a total of 20 interviews, two workshops, participant observation in two cases, and document analysis in each of the cases to understand concrete challenges and workflows. In each case, we define a requirements strategy in collaboration with process managers and experienced engineers. From this experience, we extract guidelines for defining requirements strategies in agile development. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.;Conference paper;10.1007/978-3-031-21388-5_6;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85142711113&doi=10.1007%2f978-3-031-21388-5_6&partnerID=40&md5=1dfa82baa9a26489480422ef4a5c5d3c;;"Design science research; Large-scale agile development; requirements engineering; Requirements strategy";"Design; Engineering research; Industrial research; Planning; Research and development management; Agile development; Building blockes; Critical challenges; Design-science researches; Large-scale agile development; Large-scales; Multiple-case study; Requirement engineering; Requirement strategy; Research studies; Requirements engineering";;;English;Cited by: 0;;Rejected
Conceptual Modeling Versus User Story Mapping: Which is the Best Approach to Agile Requirements Engineering?;Tsilionis, Konstantinos and Maene, Joris and Heng, Samedi and Wautelet, Yves and Poelmans, Stephan;Lecture Notes in Business Information Processing;2021;Scopus;356 – 373;415 LNBIP;User stories are primary requirements artifacts within agile methods. They are comprised of short sentences written in natural language expressing units of functionality for the to-be system. Despite their simple format, when modelers are faced with a set of user stories they might be having difficulty in sorting them, evaluating their redundancy, and assessing their relevancy in the effort to prioritize them. The present paper tests the ability of modelers to understand the requirements problem through a visual representation (named the Rationale Tree) which is a conceptual model and is built out of a user stories’ set. The paper is built upon and extends previous work relating to the feasibility of generating such a representation out of a user stories’ set by comparing the performance of the Rationale Tree with the User Story Mapping approach. This is achieved by performing a two-group quantitative comparative study. The identified comparative variables for each method were understandability, recognition of missing requirements/epics/themes, and adaptability. The Rational Tree was not easy to understand and did not perform as anticipated in assisting with the recognition of missing requirements/epics/themes. However, its employment allowed modelers to offer qualitative representations of a specific software problem. Overall, the present experiment evaluates whether a conceptual model could be a consistent solution towards the holistic comprehension of a software development problem within an agile setting, compared to more ‘conventional’ techniques used so far. © 2021, Springer Nature Switzerland AG.;Conference paper;10.1007/978-3-030-75018-3_24;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85111092214&doi=10.1007%2f978-3-030-75018-3_24&partnerID=40&md5=11600ee50a8ebc6e6baccddf46e7388c;;"Agile requirements engineering; Rationale Tree; User stories; User story; User Story Mapping";"Forestry; Mapping; Comparative studies; Conceptual model; Natural languages; Qualitative representation; Rational trees; Software problems; Understandability; Visual representations; Software design";;;English;Cited by: 7;;Rejected
Mapping participatory design methods to the cognitive process of creativity to facilitate requirements engineering;Sulmon, Nicky and Derboven, Jan and Montero Perez, Maribel and Zaman, Bieke;Information Systems Research and Exploring Social Artifacts: Approaches and Methodologies;2012;Scopus;221 – 241;;This chapter describes the User-Driven Creativity Framework: a framework that links several Participatory Design (PD) activities into one combined method. This framework, designed to be accordant with the mental process model of creativity, aims to integrate user involvement and creativity in the early stages of application requirements, gathering, and concept development. This chapter aims to contribute to recent discussions on how user-centered or participatory design methods can contribute to information systems development methodologies. The authors describe a mobile language learning case study that demonstrates how an application of the framework resulted in system (paper) prototypes and unveiled perceptions of learners and teachers, effectively yielding the necessary in-depth user knowledge and involvement to establish a strong foundation for further agile development activities. This chapter provides engineers or end-user representatives with a hands-on guide to elicit user requirements and envision possible future application information architectures. © 2013, IGI Global.;Book chapter;10.4018/978-1-4666-2491-7.ch012;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898191097&doi=10.4018%2f978-1-4666-2491-7.ch012&partnerID=40&md5=0e90ee92729beb50b6a6a4932c3698f1;;;;;;English;Cited by: 0;;Rejected
Expanding empirical studies to better understand requirements-driven collaboration;Marczak, Sabrina and Inayat, Irum and Salim, Siti Salwah;CEUR Workshop Proceedings;2013;Scopus;;1005;Requirements engineering involves collaboration among project members. Ineffective collaboration may result in project failure. To study the collaboration of those who need to coordinate work due to interdependencies in requirements, in our previous work we have introduced the concept of requirements-driven collaboration as the collaboration that occurs during requirements engineering and have defined a framework to guide its study. The framework is based on social network theory and provides techniques to study diverse aspects that underlie collaboration driven by requirements. Two case studies were conducted to apply the framework and to reveal empirical insights about requirements-driven collaboration. The investigated projects were globally distributed, of medium-size, and used the waterfall model to guide the development lifecycle. In this paper we posit that additional case studies of projects with distinct characteristics can help us to better understand requirements-driven collaboration. We introduce our intent to study requirements-driven collaboration in agile projects as an example of our plan to further knowledge on the topic. Broader insights can be used by researchers and practitioners to reason about how tools and processes can be improved to better support collaboration throughout the development life-cycle.;Conference paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922309872&partnerID=40&md5=439ab01935c68bfef24fcd1f14409a3e;;"Agile Software Development; Coordination; Empirical Studies; Requirements-driven Collaboration; Social Network Analysis";"Life cycle; Requirements engineering; Social networking (online); Social sciences computing; Software engineering; Agile software development; Case-studies; Coordination; Empirical studies; Medium size; Project failures; Requirements-driven Collaboration; Waterfall model; Software design";;;English;Cited by: 1;;Rejected
Measureability of Functional Size in Agile Software Projects: Multiple Case Studies with COSMIC FSM;Hacaloglu, Tuna and Demirors, Onur;Proceedings - 45th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2019;2019;Scopus;204 – 211;;Functional size measurement (FSM) has been used in software engineering for decades as a main driver for estimation and significant input for other various project management activities throughout the project life span. To apply FSM accurately at the early stages of software development process, especially for estimation purposes, functional user requirements need to be available in detail as required by the adopted FSM method. However, in agile software development, requirement specifications, in general, are kept minimal. For this reason, the adjustment of the requirements to the necessary granularity level has been articulated as one of the barriers preventing the diffusion of FSM practices among agile teams. In this paper, we take a closer look at this problem in order to investigate the usability of FSM and to reveal FSM related challenges empirically through case studies on real agile projects from different software organizations. This study also provides a snapshot of agile organizations in terms of requirement specification and estimation related practices. © 2019 IEEE.;Conference paper;10.1109/SEAA.2019.00041;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075973406&doi=10.1109%2fSEAA.2019.00041&partnerID=40&md5=499fbbdadabceb6df85635c6d38aad03;;"agile; COSMIC; functional size";"Application programs; Cosmology; Project management; Specifications; agile; Agile software development; COSMIC; Functional size; Functional Size Measurements; Requirement specification; Software development process; Software organization; Software design";;;English;Cited by: 5;;Rejected
Managing the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson;Heikkilä, Ville T. and Paasivaara, Maria and Lasssenius, Casper and Damian, Daniela and Engblom, Christian;Empirical Software Engineering;2017;Scopus;2892 – 2936;22;In a large organization, informal communication and simple backlogs are not sufficient for the management of requirements and development work. Many large organizations are struggling to successfully adopt agile methods, but there is still little scientific knowledge on requirements management in large-scale agile development organizations. We present an in-depth study of an Ericsson telecommunications node development organization which employs a large scale agile method to develop telecommunications system software. We describe how the requirements flow from strategy to release, and related benefits and problems. Data was collected by 43 interviews, which were analyzed qualitatively. The requirements management was done in three different processes, each of which had a different process model, purpose and planning horizon. The release project management process was plan-driven, feature development process was continuous and implementation management process was agile. The perceived benefits included reduced development lead time, increased flexibility, increased planning efficiency, increased developer motivation and improved communication effectiveness. The recognized problems included difficulties in balancing planning effort, overcommitment, insufficient understanding of the development team autonomy, defining the product owner role, balancing team specialization, organizing system-level work and growing technical debt. The study indicates that agile development methods can be successfully employed in organizations where the higher level planning processes are not agile. Combining agile methods with a flexible feature development process can bring many benefits, but large-scale software development seems to require specialist roles and significant coordination effort. © 2016, The Author(s).;Article;10.1007/s10664-016-9491-z;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009188417&doi=10.1007%2fs10664-016-9491-z&partnerID=40&md5=416b03be9a0e50212ddefdd4cfd86b3a;;"Large projects; Requirements management; Scaling agile software development; Scrum; Telecommunications software";"Agile manufacturing systems; Project management; Requirements engineering; Societies and institutions; Software engineering; Agile development organization; Agile software development; Communication effectiveness; Implementation managements; Large project; Project management process; Requirements management; Scrum; Software design";;;English;"Cited by: 45; All Open Access, Green Open Access, Hybrid Gold Open Access";;Rejected
Agile Quality Requirements Engineering Challenges: First Results from a Case Study;Alsaqaf, Wasim and Daneva, Maya and Wieringa, Roel;International Symposium on Empirical Software Engineering and Measurement;2017;Scopus;454 – 459;2017-November;Agile software development methods have become increasingly popular in the last years. Despite their popularity, they have been criticized for focusing on delivering functional requirements and neglecting the quality requirements. Several studies have reported this shortcoming. However, there is little known about the challenges organizations currently face when dealing with quality requirements. Based on a qualitative exploratory case study, this research investigated real life large-scale distributed Agile projects to understand the challenges Agile teams face regarding quality requirements. Eighteen semi-structured open-ended in-depth interviews were conducted with Agile practitioners representing six different organizations in the Netherlands. Based on the analysis of the collected data, we have identified nine challenges Agile practitioners face when engineering quality requirements in large-scale distributed Agile projects that could harm the implementation of the quality requirements and result in neglecting them. © 2017 IEEE.;Conference paper;10.1109/ESEM.2017.61;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042351101&doi=10.1109%2fESEM.2017.61&partnerID=40&md5=2e5b82d6f7d13074ceedeb3174166d12;;"Agile; Case study; Empirical research method; Interviews; Quality requirements; Requirements engineering";"Requirements engineering; Software design; Agile; Agile software development; Empirical research method; Engineering challenges; Exploratory case studies; Functional requirement; Interviews; Quality requirements; Software engineering";;;English;Cited by: 7;;Rejected
Dimensions in Measuring Performance of Agile Software Development Projects: A Literature Review;Beh, Hooi Ching and Jusoh, Yusmadi Yah and Abdullah, Rusli and Hassan, Sa'Adah;Proceedings - AiIC 2022: 2022 Applied Informatics International Conference: Digital Innovation in Applied Informatics during the Pandemic;2022;Scopus;83 – 87;;Adopting and implementing Agile principles and practices in a software development project is not new these days. With the flexibility to manage changes in requirements and the rapid delivery of work products, many organisations transition from a plan-driven approach to an agile-driven one, ultimately promising high-quality work products. Some studies reported that it is a struggle for some development teams to measure the performance in agile-based projects. The purpose of this paper is to review the current literature on performance measurement frameworks or models, especially in an agile context. By conducting the literature searches and reviews, this paper provides information on the implementation of measurement metrics in agile software development projects. There are many different dimensions in measuring the performance of agile-based projects: organisational, process, project/team and individual. Each dimension is not an independent entity but intertwined in many ways. For organisations working on agile software development projects, further research is required to gain insight into the metrics of each dimension, the relationships between dimensions, and the possible integration of multiple dimensions.  © 2022 IEEE.;Conference paper;10.1109/AiIC54368.2022.9914025;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85141438242&doi=10.1109%2fAiIC54368.2022.9914025&partnerID=40&md5=031a308273326454c337dbfdc94f656d;;"agile; agile software development; ASD; metrics; performance framework; performance measurement; requirements engineering";"Software design; Agile; Agile software development; Agile software development projects; ASD; Literature reviews; Metric; Performance frameworks; Performance measurements; Requirement engineering; Work products; Requirements engineering";;;English;Cited by: 0;;Rejected
Exploring software development at the very large-scale: a revelatory case study and research agenda for agile method adaptation;Dingsøyr, Torgeir and Moe, Nils Brede and Fægri, Tor Erlend and Seim, Eva Amdahl;Empirical Software Engineering;2018;Scopus;490 – 520;23;Agile development methods were believed to best suit small, co-located teams, but the success in small teams has inspired use in large and very large-scale software development. However, fundamental assumptions of agile development are challenged when applying the methods at a very large scale. An interpretative revelatory case study on one of the largest software development programmes in Norway shows how agile methods were adapted and complemented with practices from traditional methods to handle the scale. The programme ran over four years with 12 co-located development teams and a total of 175 people involved. The case study was conducted retrospectively using group interviews with 24 participants and documents. Findings on key challenging areas are reported: customer involvement, software architecture, and inter-team coordination. The revelatory study also suggests refinements of a research agenda for very large-scale agile development. © 2017, The Author(s).;Article;10.1007/s10664-017-9524-2;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020136655&doi=10.1007%2fs10664-017-9524-2&partnerID=40&md5=85febfd2f043293a7a9b73bacb9b3cd7;;"Agile software development; Customer involvement; Extreme programming; Inter-team coordination; Knowledge management; Multi team systems; Portfolio management; Project management; Requirements engineering; Scrum; Software architecture; Software engineering; Very large-scale software development";"Financial data processing; Human resource management; Investments; Knowledge management; Management science; Project management; Requirements engineering; Software architecture; Software engineering; Agile software development; Customer involvement; EXtreme Programming; Inter-team coordinations; Portfolio managements; Scrum; Software design";;;English;"Cited by: 119; All Open Access, Green Open Access, Hybrid Gold Open Access";;Rejected
Adding value every sprint: A case study on large-scale continuous requirements engineering;Kasauli, Rashidah and Knauss, Eric and Nilsson, Agneta and Klug, Sara;CEUR Workshop Proceedings;2017;Scopus;;1796;Agile development practices, such as continuous integration and continuous delivery, promise value through shorter time to market and increased exibility. While these practices have been widely adopted in small-scale, they have shown to be challenging to adopt in large-scale, system development. This is often due to a distance between customer and developer in large scale systems, and the need to break down value from the whole system into manageable parts. The notion of value is fundamental for agile methods, especially for practices such as continuous delivery to the customer. However, how value should be handled in development practices is not clearly understood. In this paper, we investigate how the notion of adding value in every sprint has been perceived in a large-scale system development. Based on an exploratory qualitative case study, the outcome shows that it is perceived beneficial by practitioners although it comes at a price and challenges exist. Copyright 2017 for this paper by its authors.;Conference paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85016225090&partnerID=40&md5=80c8858bbf21644746de940fb77b020a;;"Continuous delivery; Continuous integration; Continuous requirements engineering; Large-scale agile; Value";"Computer software selection and evaluation; Large scale systems; Requirements engineering; Agile development; Continuous delivery; Continuous integrations; Development practices; Large-scale agile; Qualitative case studies; System development; Value; Agile manufacturing systems";;;English;Cited by: 4;;Rejected
Studying industry practices of accessibility requirements in agile development;Miranda, Darliane and Araujo, João;Proceedings of the ACM Symposium on Applied Computing;2022;Scopus;1309 – 1317;;Although many companies are aware of the need to deliver systems accessible to all, many websites and web applications present accessibility limitations, making it impossible for some people to use. This may be also observed when those applications are developed in an agile context. We are interested in studying how agile teams address accessibility. In this paper, we conducted an online survey with 13 companies that apply agile development. The main objective was to understand how these companies deal with accessibility requirements in their web projects and what methods, tools, or techniques are used to help agile teams in this process. Our empirical results revealed that most participants only have basic knowledge of web accessibility and are unfamiliar with accessibility guidelines and assistive technologies. Acceptance criteria are the artifact more used to specify these requirements. Also, the survey reveals that accessibility is not a priority item by the companies, and no specific methods or tools assist teams in this process. In general, respondents reported that lack of training and the unexpressed need imposed by customers are the main reasons for not prioritizing these requirements in their projects. © 2022 ACM.;Conference paper;10.1145/3477314.3507041;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85130355264&doi=10.1145%2f3477314.3507041&partnerID=40&md5=3c657f993d61d470560882a522bc7825;;"accessibility; agile development; requirements engineering; survey";"Websites; Accessibility requirements; Agile contexts; Agile development; Agile teams; Industry practices; Online surveys; Requirement engineering; WEB application; Web applications; Web programs; Surveys";;;English;Cited by: 1;;Rejected
A case study on benefits and side-effects of agile practices in large-scale requirements engineering;Bjarnason, Elizabeth and Wnuk, Krzysztof and Regnell, Björn;Proceedings of the 1st Agile Requirements Engineering Workshop, AREW'11 - In Conjunction with ECOOP'11;2011;Scopus;;;In the software industry, there is a strong shift from traditional phase-based development towards agile methods and practices. This paper reports on a case study aimed at investigating if, and how, agile Requirements Engineering (RE) can remedy the challenges of traditional RE, and what new challenges agile RE may pose. The results from an initial case study with 9 practitioners from a large software development company, which is transitioning towards agile-inspired processes, show that agile practices address some RE challenges such as communication gaps and overscoping, but also cause new challenges, such as striking a good balance between agility and stability, and ensuring sufficient competence in cross-functional development teams. © 2011 ACM.;Conference paper;10.1145/2068783.2068786;https://www.scopus.com/inward/record.uri?eid=2-s2.0-83255164804&doi=10.1145%2f2068783.2068786&partnerID=40&md5=c2c210221acfb5a7b67dcf3b24633209;;"Agile; Case study; Empirical study; Requirements engineering";"Research; Software design; Technical presentations; Agile; Agile methods; Agile practices; Communication gaps; Cross-functional; Development teams; Empirical study; Side effect; Software industry; Requirements engineering";;;English;"Cited by: 74; All Open Access, Green Open Access";;Rejected
Using agile methods in software product development: A case study;Srinivasan, Jayakanth and Lundqvist, Kristina;ITNG 2009 - 6th International Conference on Information Technology: New Generations;2009;Scopus;1415 – 1420;;The mythos surrounding the use of agile methods emphasizes improved customer satisfaction, developer morale, and end-product quality. While the difficulty of adopting these methods is mentioned, it is often glossed over in the discussion. This paper presents an in-depth case study of agile methods adoption in a software product development firm. The choice of the firm as the unit of analysis enables the identification of organizational, social and technological challenges with respect to using agile methods. Using a mix of interviews, observation and archival data, the evolution of agile adoption within the firm is reconstructed. The data analysis highlights the importance of the four areas of requirements management, scrum implementation, organizational learning, and verification & validation activities. © 2009 IEEE.;Conference paper;10.1109/ITNG.2009.334;https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951124156&doi=10.1109%2fITNG.2009.334&partnerID=40&md5=65aaf6ac07f66d251a81c3029c015f81;;;"Computer software; Information management; Information technology; Product development; Agile methods; Archival data; Data analysis; End-products; Organizational learning; Requirements management; Software product development; Technological challenges; Unit of analysis; Customer satisfaction";;;English;Cited by: 17;;Rejected
Research review: Globally distributed requirements engineering and agility;Yadav, Vanita;Business Innovation, Development, and Advancement in the Digital Economy;2013;Scopus;1 – 11;;Getting requirements right is considered the most important and difficult part of the software development process. As organizations and stakeholders become more globally distributed, getting requirements right will pose a greater challenge. Today, organizations are offered a sophisticated array of multimedia meeting systems with video, audio and computer support for remotely specifying requirements. In the context of present day's global workforce scenario, distributed requirements engineering is now being explored by researchers as well as industry to build an understanding of the dynamics of this highly interactive phase in a globally distributed context. Accordingly, this paper addresses the timely need of reviewing the literature on globally distributed requirements engineering. Findings highlight paucity of literature in this area. Additionally, the paper presents an innovative approach to globally distributed requirements engineering by reviewing the literature on the applicability of agile development approach in a globally distributed setting. Contributing to academic and practitioner literature, the author discusses emerging directions for future research in this area. © 2013 by IGI Global. All rights reserved.;Book chapter;10.4018/978-1-4666-2934-9.ch001;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84946409829&doi=10.4018%2f978-1-4666-2934-9.ch001&partnerID=40&md5=de72e6adcb354d7099d8e18470fa7a1d;;;;;;English;Cited by: 1;Studies that do not deal with RE OR ASD;Rejected
A framework for requirements prioritisation process in an agile software development environment: Empirical study;Al-Ta'ani, Rami Hasan and Razali, Rozilawati;International Journal on Advanced Science, Engineering and Information Technology;2016;Scopus;846 – 856;6;User requirements are in high demand due to advancements of technology and business needs. Therefore, it is extremely difficult to achieve user requirements at one single time. Agile methods have been introduced to mitigate such issues by implementing user requirements incrementally and iteratively. The top significant aspect in agile development is selecting a group of prominent requirements to be implemented in iteration. This could be derived from continuous requirements prioritisation (RP). To assign which requirements should be selected by practitioners is considered one of the obstacles faced in the process of implementing the inter-iteration period. This study aimed to identify the RP elements and factors that should be considered through the RP process in agile software development. The elements and factors were identified through a review of previous studies and in-depth interviews involving 18 agile practitioners from different software development organizations in different countries (i.e., Malaysia and Jordan), over a period of 2 years. To get the best result, the data is analyzed by using grounded theory techniques (Open, Axial and Selective coding). The elements and factors from the RP process will guide practitioners to an effective RP process that can produce highquality requirements, which are expected to meet the needs of the intended users.;Article;10.18517/ijaseit.6.6.1375;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85010199546&doi=10.18517%2fijaseit.6.6.1375&partnerID=40&md5=160ec12952b23bc841300e702de570e8;;"Agile methods; Requirements analysis; Requirements prioritisation";;;;English;"Cited by: 19; All Open Access, Hybrid Gold Open Access";;Rejected
Agile requirements engineering practices and challenges: an empirical study;Ramesh, Balasubramaniam and Cao, Lan and Baskerville, Richard;Information Systems Journal;2010;Scopus;449 – 480;20;This paper describes empirical research into agile requirements engineering (RE) practices. Based on an analysis of data collected in 16 US software development organizations, we identify six agile practices. We also identify seven challenges that are created by the use of these practices. We further analyse how this collection of practices helps mitigate some, while exacerbating other risks in RE. We provide a framework for evaluating the impact and appropriateness of agile RE practices by relating them to RE risks. Two risks that are intractable by agile RE practices emerge from the analysis. First, problems with customer inability and a lack of concurrence among customers significantly impact agile development. Second, risks associated with the neglecting non-functional requirements such as security and scalability are a serious concern. Developers should carefully evaluate the risk factors in their project environment to understand whether the benefits of agile RE practices outweigh the costs imposed by the challenges. © 2007 The Authors. Journal compilation © 2007 Blackwell Publishing Ltd.;Article;10.1111/j.1365-2575.2007.00259.x;https://www.scopus.com/inward/record.uri?eid=2-s2.0-77955396197&doi=10.1111%2fj.1365-2575.2007.00259.x&partnerID=40&md5=b1a2fa5f172583fbd1d1f76356fe922b;;"Agile practices; Agile software development; Requirements engineering; Requirements engineering risks";"Engineering; Requirements engineering; Software design; Agile development; Agile practices; Agile software development; Analysis of data; Empirical research; Empirical studies; Non-functional requirements; Project environment; Risk factors; Software development organizations; Risks";;;English;Cited by: 249;;Rejected
Mind-mapping: An effective technique to facilitate requirements engineering in agile software development;Mahmud, Imran and Veneziano, Vito;14th International Conference on Computer and Information Technology, ICCIT 2011;2011;Scopus;157 – 162;;Merging agile with more traditional approaches in software development is a challenging task, especially when requirements are concerned: the main temptation is to let two opposite schools of thought become rigid in their own assumptions, without trying to recognize which advantages could come from either side. © 2011 IEEE.;Conference paper;10.1109/ICCITechn.2011.6164775;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860013560&doi=10.1109%2fICCITechn.2011.6164775&partnerID=40&md5=ea2fc8b61489e2eae7fd4e5c20cacdc4;;"Agile; Mind Map; Requirement Engineering; Scrum";"Software design; Agile; Agile software development; Mind-mapping; Requirement engineering; Scrum; Information technology";;;English;Cited by: 31;;Rejected
Smart and agile manufacturing framework, a case study for automotive industry;Jadoon, Gullelala and Din, Ikram Ud and Almogren, Ahmad and Almajed, Hisham;Energies;2020;Scopus;;13;"Smartness and agility are two quality measures that are pragmatic to achieve a flexible, maintainable, and adaptable system in any business. The automotive industry also requires an enhanced performance matrix and refinement in the development strategies for manufacturing. The current development models used in automotive manufacturing are not optimal enough; thus, the overall expenditure is not properly managed. Therefore, it is essential to come up with flexible, agile techniques incorporating traceability methods. It overcomes the traditional manufacturing approaches that are usually inflexible, costly, and lack timely customer feedback. The article focuses on significant Requirements Management (RM) activities, including traceability mechanism, smart manufacturing process, and performance evaluation of the proposed methods in the automotive domain. We propose a manufacturing framework that follows smart agile principles along with proper traceability management. Our proposed approach overcomes the complexities generated by traditional manufacturing processes in automotive industries. It gives an insight into the future manufacturing processes in the automotive industries. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.";Article;10.3390/en13215766;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85099276940&doi=10.3390%2fen13215766&partnerID=40&md5=7af55088787db41f00caf187aae27f12;;"Agile manufacturing; Automotive industry; Smart requirements management; Traceability";"Computer science; Energy management; Automotive manufacturing; Development strategies; Manufacturing process; Performance matrices; Requirements management; Traceability managements; Traceability methods; Traditional manufacturing; Manufacture";;;English;"Cited by: 6; All Open Access, Gold Open Access, Green Open Access";;Rejected
Strategies to manage quality requirements in agile software development: a multiple case study;Karhapää, Pertti and Behutiye, Woubshet and Rodríguez, Pilar and Oivo, Markku and Costal, Dolors and Franch, Xavier and Aaramaa, Sanja and Chora?, Micha? and Partanen, Jari and Abherve, Antonin;Empirical Software Engineering;2021;Scopus;;26;"Agile methods can deliver software that fulfills customer needs rapidly and continuously. Quality requirements (QRs) are important in this regard; however, detailed studies on how companies applying agile methods to manage QRs are limited, as are studies on the rationale for choosing specific QR management practices and related challenges. The aim of this study was to address why practitioners manage QRs as they do and what challenges they face. We also analyzed how existing practices mitigate some of the found challenges. Lastly, we connect the contextual elements of the companies with their practices and challenges. We conducted 36 interviews with practitioners from four companies of varying sizes. Since each company operates in different domains, comparing QR management strategies and related challenges in different contexts was possible. We found that the companies apply proactive, reactive, and interactive strategies to manage QRs. Additionally, our study revealed 40 challenges in six categories that companies applying agile methods may face in QR management. We also identified nine contextual elements that affect QR management practice choices and which, importantly, can explain many related challenges. Based on these findings, we constructed a theoretical model about the connection between context, QR management practices, and challenges. Practitioners in similar contexts can learn from the practices identified in this study. Our preliminary theoretical model can help other practitioners identify what challenges they can expect to face in QR management in different developmental contexts as well as which practices to apply to mitigate these challenges. © 2021, The Author(s).";Article;10.1007/s10664-020-09903-x;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102137144&doi=10.1007%2fs10664-020-09903-x&partnerID=40&md5=6cb7f0defb9e1b5c8f2f6aa170526fa0;;"Agile requirements engineering; Agile software development; Non-functional requirements; Quality requirements; Requirements engineering; Requirements management practices";"Software quality; Agile software development; Contextual elements; Interactive strategy; Management practices; Management strategies; Multiple-case study; Quality requirements; Theoretical modeling; Software design";;;English;"Cited by: 10; All Open Access, Green Open Access, Hybrid Gold Open Access";;Rejected
A Case Study on a Hybrid Approach to Assessing the Maturity of Requirements Engineering Practices in Agile Projects (REMMA);Ochodek, Miros?aw and Kopczy?ska, Sylwia and Nawrocki, Jerzy;Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics);2020;Scopus;689 – 698;12011 LNCS;Context: Requirements Engineering (RE) is one of the key processes in software development. With the advent of agile software development methods, new challenges have emerged for traditional, prescriptive maturity models aiming to support the improvement of RE process. One of the main problems is that frequently the guidelines prescribed by agile approaches have to be adapted to a project’s context to provide benefits. Therefore, it might be naive to believe that it is possible to propose a prescriptive method of RE process improvement that will suit all agile projects without any alteration. Objective: The aim of the paper is to evaluate a hybrid approach to assessing the maturity of agile RE (REMMA), which combines elements of prescriptive and problem-oriented improvement methods. Method: The usefulness, ease of use, and cost-effectiveness of REMMA were investigated through a case study performed in one of the biggest software houses in Central Europe. Results: The results of the case study suggest that the method seems easy to use, affordable, and is perceived as a useful tool to support the process of improving RE practices in agile projects. Its feature of taking into account the dependencies between practices and the necessity to adapt them to a certain project context was regarded as well suited for the agile context. Conclusions: REMMA, which includes two main components: a maturity model for agile RE (a set of state-of-the-art agile RE practices) and an assessment method that makes it possible to evaluate how well the agile RE practices are implemented, seems to be a useful tool supporting improvement of RE in agile projects. © 2020, Springer Nature Switzerland AG.;Conference paper;10.1007/978-3-030-38919-2_58;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079087225&doi=10.1007%2f978-3-030-38919-2_58&partnerID=40&md5=dd92191d1bfbcfca22763fec3a025e6c;;"Agile; Process assessment; Process improvement; Process maturity; Requirements Engineering";"Computer software; Cost effectiveness; Process engineering; Requirements engineering; Agile; Agile approaches; Agile software development; Improvement methods; Process assessments; Process Improvement; Process maturity; State of the art; Software design";;;English;Cited by: 0;;Rejected
Improving user story practice with the grimm method: A multiple case study in the software industry;Lucassen, Garm and Dalpiaz, Fabiano and van der Werf, Jan Martijn E. M. and Brinkkemper, Sjaak;Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics);2017;Scopus;235 – 252;10153 LNCS;Context and motivation: Previous research shows that a considerable amount of real-world user stories contain easily preventable syntactic defects that violate desired qualities of good requirements. However, we still do not know the effect of user stories’ intrinsic quality on practitioners’ work. Question/Problem: We study the effects of introducing the Grimm Method’s Quality User Story framework and the AQUSA tool on the productivity and work deliverable quality of 30 practitioners from 3 companies over a period of 2 months. Principal ideas/results: Our multiple case study delivered mixed findings. Despite an improvement in the intrinsic user story quality, practitioners did not perceive such a change. They explained, however, there was more constructive user story conversation in the post-treatment period leading to less unnecessary rework. Conversely, project management metrics did not result in statistically significant changes in the number of comments, issues, defects, velocity, and rework. Contribution: Introducing our treatment has a mildly positive effect but a larger scale investigation is crucial to decisively assess the impact on work practice. Also, our case study protocol serves as an example for evaluating RE research in practice. © Springer International Publishing AG 2017.;Conference paper;10.1007/978-3-319-54045-0_18;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013951931&doi=10.1007%2f978-3-319-54045-0_18&partnerID=40&md5=0a17335509ba9d3a2e0bb6b4c0997446;;"Agile development; Empirical study; Multiple case study; Requirements engineering; User stories";"Computer software selection and evaluation; Project management; Software engineering; Agile development; Empirical studies; Multiple-case study; Post treatment; Real-world; Software industry; User stories; Work practices; Requirements engineering";;;English;Cited by: 11;;Rejected
Towards studying the communication patterns of Kanban teams: A research design;Shafiq, Saad and Inayat, Irum;Proceedings - 2017 IEEE 25th International Requirements Engineering Conference Workshops, REW 2017;2017;Scopus;303 – 306;;Communication among agile software development teams is knit around the requirements (user stories) and is considered vital for information sharing. Researchers have studied communication among agile teams from various perspectives including team distribution, distance, and communication patterns etc. It is worth noticing here that most of the advances done in this domain are for Scrum teams. However, minimal work has been done on exploring the communication among Kanban teams. Since, software industry is taking a big leap from Scrum to Kanban and this encourages us to investigate and find interesting insights on Kanban teams' communication. Therefore, in this study we present our roadmap to study communication patterns of Kanban teams. We believe that the findings of the study will contribute to strengthen the understanding on the topic and will also provide a good comparison of communication patterns of scrum and Kanban teams. © 2017 IEEE.;Conference paper;10.1109/REW.2017.34;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85034631041&doi=10.1109%2fREW.2017.34&partnerID=40&md5=3700cfba4addb48d0a357fb7d8f6ca14;;"Agile software development; Communication patterns; Kanban; Requirement engineering; Social network analysis";"Requirements engineering; Social networking (online); Social sciences computing; Software engineering; Agile software development; Communication pattern; Information sharing; Kanban; Requirement engineering; Research designs; Software industry; User stories; Software design";;;English;Cited by: 5;Studies that do not deal with RE OR ASD;Rejected
Agile requirements engineering with prototyping: A case study;Käpyaho, Marja and Kauppinen, Marjo;2015 IEEE 23rd International Requirements Engineering Conference, RE 2015 - Proceedings;2015;Scopus;334 – 343;;The rise of agile software development methods has led to the abandonment of many traditional practices especially in requirements engineering (RE). Agile RE is still a relatively new research area and the growing use of agile methods in large projects is forcing companies to look for more formal practices for RE. This paper describes experiences gained from a case study of a large agile project. The goal of this case study was to explore how prototyping can solve the challenges of agile RE. Our findings indicate that while prototyping can help with some challenges of agile RE such as lack of documentation, motivation for RE work and poor quality communication, it also needs complementary practices to reach its full potential. These practices include reviewing the big picture regularly, keeping track of quality requirements, and using ATDD (Acceptance Test Driven Development). © 2015 IEEE.;Conference paper;10.1109/RE.2015.7320450;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962430696&doi=10.1109%2fRE.2015.7320450&partnerID=40&md5=24b6f15c13a9c88111f10d4b1d973032;;"agility; good practices; prototyping; RE process; requirements engineering";"Acceptance tests; Requirements engineering; Software design; Software prototyping; Agile methods; Agile software development; agility; Good practices; Large project; Quality requirements; Test driven development; Software engineering";;;English;Cited by: 30;;Rejected
Systematic Literature Review on Decision-Making of Requirement Engineering from Agile Software Development;Reginald Putra Ghozali and Herry Saputra and M. Apriadin Nuriawan and  Suharjito and Ditdit Nugeraha Utama and Ariadi Nugroho;Procedia Computer Science;2019;Science@Direct;274-281;157;This paper presents a systematic literature review of agile software development at decision making method for requirement engineering. Presently, agile software development method is operated to cope with requirements that changes dynamically. This study seeks to find out and discuss what types of method that have been exploited for decision making on managing feasible requirements and challenges of decision making in agile software development. Papers reviewed in this study are published from 2017 to present. Resulting 8 papers that have been identified of presenting decision making methods. Using these papers, 11 methods and 7 challenges of decision making identified. This study contributes a review of requirement management and engineering by providing decision making methods on agile software development and the challenges of decision making for requirement engineering.;;https://doi.org/10.1016/j.procs.2019.08.167;https://www.sciencedirect.com/science/article/pii/S1877050919310853;;;Systematic Literature Review, Agile Software Development, Decision Making, Requirement Engineering;;1877-0509;;The 4th International Conference on Computer Science and Computational Intelligence (ICCSCI 2019) : Enabling Collaboration to Escalate Impact of Research Results for Society;;Accepted
Agile Requirements Engineering: A systematic literature review;Eva-Maria Schön and Jörg Thomaschewski and María José Escalona;Computer Standards & Interfaces;2017;Science@Direct;79-91;49;Nowadays, Agile Software Development (ASD) is used to cope with increasing complexity in system development. Hybrid development models, with the integration of User-Centered Design (UCD), are applied with the aim to deliver competitive products with a suitable User Experience (UX). Therefore, stakeholder and user involvement during Requirements Engineering (RE) are essential in order to establish a collaborative environment with constant feedback loops. The aim of this study is to capture the current state of the art of the literature related to Agile RE with focus on stakeholder and user involvement. In particular, we investigate what approaches exist to involve stakeholder in the process, which methodologies are commonly used to present the user perspective and how requirements management is been carried out. We conduct a Systematic Literature Review (SLR) with an extensive quality assessment of the included studies. We identified 27 relevant papers. After analyzing them in detail, we derive deep insights to the following aspects of Agile RE: stakeholder and user involvement, data gathering, user perspective, integrated methodologies, shared understanding, artifacts, documentation and Non-Functional Requirements (NFR). Agile RE is a complex research field with cross-functional influences. This study will contribute to the software development body of knowledge by assessing the involvement of stakeholder and user in Agile RE, providing methodologies that make ASD more human-centric and giving an overview of requirements management in ASD.;;https://doi.org/10.1016/j.csi.2016.08.011;https://www.sciencedirect.com/science/article/pii/S0920548916300708;;;Systematic literature review, Agile software development, Requirements Engineering, Human-computer interaction, User-centered design;;0920-5489;;;;Accepted
Software product line scoping and requirements engineering in a small and medium-sized enterprise: An industrial case study;Ivonei Freitas {da Silva} and Paulo Anselmo {da Mota Silveira Neto} and Pádraig O’Leary and Eduardo Santana {de Almeida} and Silvio Romero de Lemos Meira;Journal of Systems and Software;2014;Science@Direct;189-206;88;Software product line (SPL) engineering has been applied in several domains, especially in large-scale software development. Given the benefits experienced and reported, SPL engineering has increasingly garnered interest from small to medium-sized companies. It is possible to find a wide range of studies reporting on the challenges of running a SPL project in large companies. However, very little reports exist that consider the situation for small to medium-sized enterprises and these studies try develop universal truths for SPL without lessons learned from empirical evidence need to be contextualized. This study is a step towards bridging this gap in contextual evidence by characterizing the weaknesses discovered in the scoping (SC) and requirements (RE) disciplines of SPL. Moreover, in this study we conducted a case study in a small to medium sized enterprises (SMEs) to justify the use of agile methods when introducing the SPL SC and RE disciplines through the characterization of their bottlenecks. The results of the characterization indicated that ineffective communication and collaboration, long iteration cycles, and the absence of adaptability and flexibility can increase the effort and reduce motivation during project development. These issues can be mitigated by agile methods.;;https://doi.org/10.1016/j.jss.2013.10.040;https://www.sciencedirect.com/science/article/pii/S0164121213002598;;;Requirements engineering, Agile methods, Software product line scoping;;0164-1212;;;;Rejected
Agile requirements prioritization in large-scale outsourced system projects: An empirical study;Maya Daneva and Egbert {van der Veen} and Chintan Amrit and Smita Ghaisas and Klaas Sikkel and Ramesh Kumar and Nirav Ajmeri and Uday Ramteerthkar and Roel Wieringa;Journal of Systems and Software;2013;Science@Direct;1333-1353;86;The application of agile practices for requirements prioritization in distributed and outsourced projects is a relatively recent trend. Hence, not all of its facets are well-understood. This exploratory study sets out to uncover the concepts that practitioners in a large software organization use in the prioritization process and the practices that they deem good. We seek to provide a rich analysis and a deep understanding of three cases in an exploratory study that was carried out in a large and mature company, widely recognized for its excellence and its engagement in outsourced software development. We used in-depth interviews for data collection and grounded theory techniques for data analysis. Our exploration efforts yielded the following findings: (i) understanding requirements dependencies is of paramount importance for the successful deployment of agile approaches in large outsourced projects. (ii) Next to business value, the most important prioritization criterion in the setting of outsourced large agile projects is risk. (iii) The software organization has developed a new artefact that seems to be a worthwhile contribution to agile software development in the large: ‘delivery stories’, which complement user stories with technical implications, effort estimation and associated risk. The delivery stories play a pivotal role in requirements prioritization. (iv) The vendor's domain knowledge is a key asset for setting up successful client-developer collaboration. (v) The use of agile prioritization practices depends on the type of project outsourcing arrangement. Our findings contribute to the empirical software engineering literature by bringing a rich analysis of cases in agile and distributed contexts, from a vendor's perspective. We also discuss the possible implications of the results for research and in practice.;;https://doi.org/10.1016/j.jss.2012.12.046;https://www.sciencedirect.com/science/article/pii/S0164121212003536;;;Agile requirements engineering, Requirements prioritization, Outsourced software development, Requirements dependencies, Large projects, Distributed project management Qualitative research, Case study;;0164-1212;;;;Rejected
A systematic literature review on agile requirements engineering practices and challenges;Irum Inayat and Siti Salwah Salim and Sabrina Marczak and Maya Daneva and Shahaboddin Shamshirband;Computers in Human Behavior;2015;Science@Direct;915-929;51;Unlike traditional software development methods, agile methods are marked by extensive collaboration, i.e. face-to-face communication. Although claimed to be beneficial, the software development community as a whole is still unfamiliar with the role of the requirements engineering practices in agile methods. The term “agile requirements engineering” is used to define the “agile way” of planning, executing and reasoning about requirements engineering activities. Moreover, not much is known about the challenges posed by collaboration-oriented agile way of dealing with requirements engineering activities. Our goal is to map the evidence available about requirements engineering practices adopted and challenges faced by agile teams in order to understand how traditional requirements engineering issues are resolved using agile requirements engineering. We conducted a systematic review of literature published between 2002 and June 2013 and identified 21 papers, that discuss agile requirements engineering. We formulated and applied specific inclusion and exclusion criteria in two distinct rounds to determine the most relevant studies for our research goal. The review identified 17 practices of agile requirements engineering, five challenges traceable to traditional requirements engineering that were overcome by agile requirements engineering, and eight challenges posed by the practice of agile requirements engineering. However, our findings suggest that agile requirements engineering as a research context needs additional attention and more empirical results are required to better understand the impact of agile requirements engineering practices e.g. dealing with non-functional requirements and self-organising teams.;;https://doi.org/10.1016/j.chb.2014.10.046;https://www.sciencedirect.com/science/article/pii/S074756321400569X;;;Agile software development methods, Agile requirements engineering, Collaboration, Traditional requirements engineering, Systematic review;;0747-5632;;Computing for Human Learning, Behaviour and Collaboration in the Social and Mobile Networks Era;;Accepted
Quality requirements challenges in the context of large-scale distributed agile: An empirical study;Wasim Alsaqaf and Maya Daneva and Roel Wieringa;Information and Software Technology;2019;Science@Direct;39-55;110;"Context
Engineering quality requirements in agile projects does not fit organically with agile methods. Despite the agile community acknowledges this, little empirical evidence has been published on this topic.
Objective
This exploratory qualitative interview-based study explicates the challenging situations experienced by practitioners in engineering the quality requirements in the context of large-scale distributed agile projects. Moreover, this study describes the practices that agile distributed teams currently use which could contribute by dealing with the identified challenges.
Method
The challenging situations and possible mitigation practices were studied from the perspective of 17 practitioners from large distributed agile project teams in six organizations in The Netherlands. Qualitative data were collected using semi-structured, open-ended interviews. Qualitative coding techniques were used for data analysis, to identify the challenges of engineering quality requirements, the mechanisms behind the challenges and the practices used that could mitigate the impact of those challenges. Further, by using dialog mapping technique for qualitative data structuring, we have mapped the identified mechanisms and practices to the challenges.
Results
From the perspective of the participating practitioners, our exploratory study revealed 15 challenges classified in five categories: (1) team coordination and communication, (2) quality assurance, (3) quality requirements elicitation, (4) conceptual challenges, and (5) software architecture. The study has also disclosed 13 mechanisms behind the challenges and 9 practices that could mitigate the impact of those challenges.
Conclusions
The main contributions of the paper are: (1) the explication of the challenges from practitioners’ perspective and the comparison of our findings with previously published results, (2) the description of the mechanisms behind the challenges, and (3) the identification of the practices currently used by agile teams that could mitigate the impact of the challenges. The findings of this study provide useful input into the process of designing possible solution approaches to overcome the challenges.";;https://doi.org/10.1016/j.infsof.2019.01.009;https://www.sciencedirect.com/science/article/pii/S0950584918300739;;;Agile large-scale distributed projects, Requirements engineering, Quality requirements, Exploratory empirical research method, Interviews;;0950-5849;;;;Rejected
A comparative study of software tools for user story management;Sonja Dimitrijevi? and Jelena Jovanovi? and Vladan Devedži?;Information and Software Technology;2015;Science@Direct;352-368;57;"Context
User stories have become widely accepted in agile software development. Consequently, a great number of software tools that provide, inter alia, support for practices based on user stories have emerged in recent years. These tools may have different features and focus in terms of support for agile requirements engineering (RE) concepts and practices.
Objective
The present study aims to provide a deep insight into the current capabilities and future trends of software support for agile RE practices based on user stories.
Method
A comparative qualitative study of a set of agile software tools has been conducted according to the following criteria: coverage of the key functional requirements, support for basic agile RE concepts and practices, and user satisfaction with the tool. The criteria for tool selection were: diversity of software tools, high rating on the user-stories community Web site (http://www.userstories.com), and availability for review.
Results
The results show a generally good coverage of key functional requirements related to management of user stories and epics, high-level release planning and low-level iteration planning. On the other hand, user-role modeling and persona support have not been addressed at all, and it has been found that requirements for acceptance testing support were completely covered by only one tool. More importantly, the study has revealed significant differences in the way different tools support agile RE concepts and practices (if at all). Finally, qualitative analysis of user reviews has demonstrated that practitioners prefer tools that are easy to set up, easy to learn, easy to use, and easy to customize, over more sophisticated but simultaneously more demanding tools.
Conclusion
Although the progress that has been made since the inception of these tools is quite clear, there is still room for improvements in terms of support for various agile RE practices within a specific agile process.";;https://doi.org/10.1016/j.infsof.2014.05.012;https://www.sciencedirect.com/science/article/pii/S0950584914001293;;;Requirements engineering, Agile practices, User story management, Software support;;0950-5849;;;;Rejected
Intelligent software engineering in the context of agile software development: A systematic literature review;Mirko Perkusich and Lenardo {Chaves e Silva} and Alexandre Costa and Felipe Ramos and Renata Saraiva and Arthur Freire and Ednaldo Dilorenzo and Emanuel Dantas and Danilo Santos and Kyller Gorgônio and Hyggo Almeida and Angelo Perkusich;Information and Software Technology;2020;Science@Direct;106241;119;CONTEXT: Intelligent Software Engineering (ISE) refers to the application of intelligent techniques to software engineering. We define an “intelligent technique” as a technique that explores data (from digital artifacts or domain experts) for knowledge discovery, reasoning, learning, planning, natural language processing, perception or supporting decision-making. OBJECTIVE: The purpose of this study is to synthesize and analyze the state of the art of the field of applying intelligent techniques to Agile Software Development (ASD). Furthermore, we assess its maturity and identify adoption risks. METHOD: Using a systematic literature review, we identified 104 primary studies, resulting in 93 unique studies. RESULTS: We identified that there is a positive trend in the number of studies applying intelligent techniques to ASD. Also, we determined that reasoning under uncertainty (mainly, Bayesian network), search-based solutions, and machine learning are the most popular intelligent techniques in the context of ASD. In terms of purposes, the most popular ones are effort estimation, requirements prioritization, resource allocation, requirements selection, and requirements management. Furthermore, we discovered that the primary goal of applying intelligent techniques is to support decision making. As a consequence, the adoption risks in terms of the safety of the current solutions are low. Finally, we highlight the trend of using explainable intelligent techniques. CONCLUSION: Overall, although the topic area is up-and-coming, for many areas of application, it is still in its infancy. So, this means that there is a need for more empirical studies, and there are a plethora of new opportunities for researchers.;;https://doi.org/10.1016/j.infsof.2019.106241;https://www.sciencedirect.com/science/article/pii/S0950584919302587;;;Intelligent software engineering, Agile software development, Search-based software engineering, Machine learning, Bayesian networks, Artificial intelligence;;0950-5849;;;;Accepted
A multi-case study of agile requirements engineering and the use of test cases as requirements;Elizabeth Bjarnason and Michael Unterkalmsteiner and Markus Borg and Emelie Engström;Information and Software Technology;2016;Science@Direct;61-79;77;"Context
It is an enigma that agile projects can succeed ‘without requirements’ when weak requirements engineering is a known cause for project failures. While agile development projects often manage well without extensive requirements test cases are commonly viewed as requirements and detailed requirements are documented as test cases.
Objective
We have investigated this agile practice of using test cases as requirements to understand how test cases can support the main requirements activities, and how this practice varies.
Method
We performed an iterative case study at three companies and collected data through 14 interviews and two focus groups.
Results
The use of test cases as requirements poses both benefits and challenges when eliciting, validating, verifying, and managing requirements, and when used as a documented agreement. We have identified five variants of the test-cases-as-requirements practice, namely de facto, behaviour-driven, story-test driven, stand-alone strict and stand-alone manual for which the application of the practice varies concerning the time frame of requirements documentation, the requirements format, the extent to which the test cases are a machine executable specification and the use of tools which provide specific support for the practice of using test cases as requirements.
Conclusions
The findings provide empirical insight into how agile development projects manage and communicate requirements. The identified variants of the practice of using test cases as requirements can be used to perform in-depth investigations into agile requirements engineering. Practitioners can use the provided recommendations as a guide in designing and improving their agile requirements practices based on project characteristics such as number of stakeholders and rate of change.";;https://doi.org/10.1016/j.infsof.2016.03.008;https://www.sciencedirect.com/science/article/pii/S0950584916300544;;;Agile development, Requirements, Testing, Test-first development, Test-driven development, Behaviour-driven development, Acceptance test, Case study, Empirical software engineering;;0950-5849;;;;Rejected
Ambiguity in user stories: A systematic literature review;Anis R. Amna and Geert Poels;Information and Software Technology;2022;Science@Direct;106824;145;"Context
Ambiguity in user stories is a problem that has received little research attention. Due to the absence of review studies, it is not known how and to what extent this problem, which impacts the effectiveness of user stories in supporting systems development, has been solved.
Objectives
We review the studies that investigate or develop solutions for problems related to ambiguity in user stories. We investigate how these problems manifest themselves, what their causes and consequences are, what solutions have been proposed and what evidence of their effectiveness has been presented. Based on the insights we obtain from this review, we identify research gaps and suggest opportunities for future research.
Methods
We followed Systematic Literature Review guidelines to review problems investigated, solutions proposed, and validation/evaluation methods used. We classified the reviewed studies according to the four linguistic levels of ambiguity (i.e., lexical, syntactic, semantic, pragmatic) proposed by Berry and Kamsties to obtain insights from patterns that we observe in the classification of problems and solutions.
Results
A total of 36 studies published in 2001–2020 investigated ambiguity in user stories. Based on four patterns we discern, we identify three research gaps. First, we need more research on human behaviors and cognitive factors causing ambiguity. Second, ambiguity is seldom studied as a problem of a set of related user stories, like a theme or epic in Scrum. Third, there is a lack of holistic solution approaches that consider ambiguity at multiple linguistic levels.
Conclusion
Ambiguity in user stories is a known problem. However, a comprehensive solution for addressing ambiguity in a set of related user stories as it manifests itself at different linguistic levels as a cognitive problem is lacking.";;https://doi.org/10.1016/j.infsof.2022.106824;https://www.sciencedirect.com/science/article/pii/S0950584922000040;;;Requirements engineering, Agile software development, User story, Ambiguity, Systematic Literature Review;;0950-5849;;;;Accepted
Leveraging creativity in requirements elicitation within agile software development: A systematic literature review;Ainhoa Aldave and Juan M. Vara and David Granada and Esperanza Marcos;Journal of Systems and Software;2019;Science@Direct;110396;157;Agile approaches tend to focus solely on scoping and simplicity rather than on problem solving and discovery. This hampers the development of innovative solutions. Additionally, little has been said about how to capture and represent the real user needs. To fill this gap, some authors argue in favor of the application of “Creative thinking” for requirements elicitation within agile software development. This synergy between creativeness and agility has arisen as a new means of bringing innovation and flexibility to increasingly demanding software. The aim of the present study is therefore to employ a systematic review to investigate the state-of-the-art of those approaches that leverage creativity in requirements elicitation within Agile Software Development, as well as the benefits, limitations and strength of evidence of these approaches. The review was carried out by following the guidelines proposed by Dr. Kitchenham. The search strategy identified 1451 studies, 17 of which were eventually classified as primary studies. The selected studies contained 13 different and unique proposals. These approaches provide evidence that enhanced creativity in requirements elicitation can be successfully implemented in real software projects. We specifically observed that projects related to user interface development, such as those for mobile or web applications, are good candidates for the use of these approaches. We have also found that agile methodologies such as Scrum, Extreme Programming or methodologies based on rapid modelling are preferred when introducing creativity into requirements elicitation. Despite this being a new research field, there is a mixture of techniques, tools and processes that have already been and are currently being successfully tested in industry. Finally, we have found that, although creativity is an important ingredient with which to bring about innovation, it is not always sufficient to generate new requirements because this needs to be followed by user engagement and a specific context in which proper conditions, such as flexibility, time or resources, have to be met.;;https://doi.org/10.1016/j.jss.2019.110396;https://www.sciencedirect.com/science/article/pii/S0164121219301712;;;Software development, Software project management, Agile methodologies, Requirements elicitation, Creative thinking, Systematic review;;0164-1212;;;;Accepted
Towards optimal quality requirement documentation in agile software development: A multiple case study;Woubshet Behutiye and Pilar Rodríguez and Markku Oivo and Sanja Aaramaa and Jari Partanen and Antonin Abhervé;Journal of Systems and Software;2022;Science@Direct;111112;183;"Context:
Agile software development (ASD) promotes minimal documentation and often prioritizes functional requirements over quality requirements (QRs). The minimal documentation emphasis may be beneficial in reducing time-to-market for software. However, it can also be a concern, especially with QRs, since they are challenging to specify and document and are crucial for software success. Therefore, understanding how practitioners perceive the importance of QR documentation is valuable because it can provide insight into how they approach this task. It also helps in developing models and guidelines that support the documentation of QRs in ASD, which is a research gap.
Objective:
We aim to understand practitioners’ perceptions of QR documentation and factors influencing this task to derive a model that supports optimal QR documentation in ASD.
Method:
We conducted a multiple case study involving 12 participants from three cases that apply ASD.
Results:
Practitioners identify QR documentation as important and perceive it as contributing to ensuring quality, clarifying QRs, and facilitating decision-making. Time constraints, QR awareness, and communication gaps affect QR documentation. Missing and outdated QR documentation may lead to technical debt and a lack of common understanding regarding QRs. We introduce a model to support optimal QR documentation in ASD by focusing on the factors: time constraints, QR awareness, and communication gaps. The model provides a representation and explanation of the factors affecting QR documentation in ASD and identifies mitigation strategies to overcome issues that may occur due to these factors.
Conclusion:
The study reveals the importance of documenting QRs in ASD. It introduces a model that is based on empirical knowledge of QR documentation practices in ASD. Both practitioners and researchers can potentially benefit from the model. For instance, practitioners can analyze how time constraints or QR awareness affect documentation, see potential issues that may arise from them, and utilize strategies suggested by the model to address these issues. Researchers can learn about QR documentation in ASD and utilize the model to understand the topic. They can also use the study as a baseline to investigate the topic with other cases.";;https://doi.org/10.1016/j.jss.2021.111112;https://www.sciencedirect.com/science/article/pii/S0164121221002090;;;Agile software development, Documentation, Quality requirements, Non-functional requirements;;0164-1212;;;;Rejected
Agile elicitation of scalability requirements for open systems: A case study;Gunnar Brataas and Antonio Martini and Geir Kjetil Hanssen and Georg Ræder;Journal of Systems and Software;2021;Science@Direct;111064;182;Eliciting scalability requirements during agile software development is complicated and poorly described in previous research. This article presents a lightweight artifact for eliciting scalability requirements during agile software development: the ScrumScale model. The ScrumScale model is a simple spreadsheet. The scalability concepts underlying the ScrumScale model are clarified in this design science research, which also utilizes coordination theory. This paper describes the open banking case study, in which a legacy banking system becomes open. This challenges the scalability of this legacy system. The first step in understanding this challenge is to elicit the new scalability requirements. In the open banking case study, key stakeholders from TietoEVRY spent 55 h eliciting the scalability requirements of TietoEVRY’s open banking project. According to TietoEVRY, the ScrumScale model provided a systematic way of producing scalability requirements. For TietoEVRY, the scalability concepts behind the ScrumScale model also offered significant advantages in dialogs with other stakeholders.;;https://doi.org/10.1016/j.jss.2021.111064;https://www.sciencedirect.com/science/article/pii/S0164121221001618;;;Performance requirements, Software performance engineering, Agile software development, Non-functional requirements, Open systems, Design science, Quality requirements, Requirements engineering, Workload charaterization;;0164-1212;;;;Rejected
Requirements engineering: A systematic mapping study in agile software development;Karina Curcio and Tiago Navarro and Andreia Malucelli and Sheila Reinehr;Journal of Systems and Software;2018;Science@Direct;32-50;139;"Context
Requirements engineering in agile software development is a relatively recent software engineering topic and it is not completely explored and understood. The understanding of how this process works on agile world needs a deeper analysis.
Objective
The goal of this paper is to map the subject area of requirements engineering in agile context to identify the main topics that have been researched and to identify gaps to develop future researches. It is also intended to identify the obstacles that practitioners face when using agile requirements engineering.
Method
A systematic mapping study was conducted and as a result 2171 papers were initially identified and further narrowed to 104 by applying exclusion criteria and analysis.
Conclusion
After completing the classification and the analysis of the selected studies it was possible to identify 15 areas (13 based on SWEBOK) where researches were developed. Five of such areas points to the need of future researches, among them are requirements elicitation, change management, measuring requirements, software requirements tools and comparative studies between traditional and agile requirements. In this research, some obstacles that practitioners face dealing with requirements engineering in agile context were also identified. They are related to environment, people and resources.";;https://doi.org/10.1016/j.jss.2018.01.036;https://www.sciencedirect.com/science/article/pii/S0164121218300141;;;Agile software development, Requirements engineering, Systematic mapping study;;0164-1212;;;;Accepted
Requirements specification for developers in agile projects: Evaluation by two industrial case studies;Juliana Medeiros and Alexandre Vasconcelos and Carla Silva and Miguel Goulão;Information and Software Technology;2020;Science@Direct;106194;117;"Context
An inadequate requirements specification activity acts as a catalyst to other problems, such as low team productivity and difficulty in maintaining software. Although Agile Software Development (ASD) has grown in recent years, research pointed out several limitations concerning its requirements engineering activities, such as Software Requirements Specification (SRS) provided in high level and targeted to the customer, lack of information required to perform design activities and low availability of the customer. To overcome these issues, the RSD (Requirements Specification for Developers) approach was proposed to create an SRS that provides information closer to development needs. In addition, existing literature reviews identify a demand for more empirical studies on the requirements specification activity in ASD.
Objective
Face to this, this work presents the evaluation of the RSD approach with respect to how it affects the teamwork and to identify its strengths and limitations.
Methods
This evaluation was performed by means of two industrial case studies conducted using a multiple-case design, focusing on software engineers as the analysis unit. Data were collected during 15 months from documents, observations, and interviews. They were triangulated, analyzed, and synthesized using techniques of grounded theory.
Results
The findings pointed out that the readability of SRS was compromised when several requirements are specified in the same RSD artifact. Evaluation also indicated the need of prioritization and categorization of the acceptance criteria, a tool for creating, searching and tracing the artifacts, and obtaining acceptance tests from acceptance criteria. On the other hand, the findings showed that the practices used to specify requirements using the RSD approach have the potential to produce a more objective SRS, tailored for the development team.
Conclusion
As a consequence, the structure of the RSD artifact was considered as a factor that improved the team performance in the two case studies.";;https://doi.org/10.1016/j.infsof.2019.106194;https://www.sciencedirect.com/science/article/pii/S0950584919302010;;;Software requirements specification, Agile software development, Empirical software engineering;;0950-5849;;;;Rejected
Survey on Differences of Requirements Engineering for Traditional and Agile Development Processes;Alhazmi, Alhejab and Huang, Shihong;;2020;IEEE Digital Library;1-9;;None;;10.1109/SoutheastCon44009.2020.9397492;;;;;;;;;;Accepted
Defining Agile Requirements Change Management: A Mapping Study;Albuquerque, Danyllo and Guimaraes, Everton and Perkusich, Mirko and Costa, Alexandre and Dantas, Emanuel and Ramos, Felipe and Almeida, Hyggo;;2020;ACM Digital Library;1421–1424;;As opposed to traditional software development, agile development encourages requirements change. Given the importance of requirements change management, there is an increasing number of studies discussing this process in both traditional and agile software developments. By examining existing works, we observed that there are many ways to improve the management of agile requirements change. Aiming to addressing this research gap, our study focus on defining a process to handle Agile Requirement Change Management (ARCM), as well as identifying practices to support ARCM process. We performed systematic study to map the main practices applied to manage agile requirements change. Our primary goal was to seek a better understanding of possible directions in the ARCM research, and foster discussions for future work. We identified 3 steps to handle the ARCM process, and grouped 11 distinct agile practices to carry out these steps. Even though agile practices might be, to some extent, for managing requirement change, we were able to identify practical challenges when adopting these practices for Agile Requirements Changes management.;;10.1145/3341105.3374095;https://doi.org/10.1145/3341105.3374095;;;agile requirements, requirements changes management, agile development, exploratory study;Association for Computing Machinery;;;;;Accepted
Overlap between Automated Unit and Acceptance Testing – a Systematic Literature Review;van Heugten Breurkes, Jack and Gilson, Fabian and Galster, Matthias;;2022;ACM Digital Library;80–89;;Unit and automated acceptance testing have different objectives (e.g., testing units of code versus testing complete features). Testing practices (e.g., test-first, model-based) used for one “level” of testing (for either unit or acceptance testing) may require knowledge and skills that are not applicable to the other. This makes it difficult for practitioners to gain the skills required to effectively test at all levels and form a cohesive testing strategy. The aim of this systematic literature review is to understand whether there are any automated unit testing practices that have similarities with automated acceptance testing practices (and vice versa). Understanding these similarities can enable skill transfer across testing activities at different levels. This systematic literature review focuses on empirical research with an industry focus. We found that test-driven development (TDD) and model-based test generation (MBTG) are two practices widely researched for both unit testing and acceptance testing. For TDD we found that a design- and test-first mindset is required and helpful at both the unit and acceptance levels, but practitioners struggle with that practice. For MBTG we found that, despite its ability to increase code coverage, the additional manual effort to enable automated test generation may outweigh its benefits.;;10.1145/3530019.3530028;https://doi.org/10.1145/3530019.3530028;;;test-driven development, model-based test generation, acceptance testing, automated testing, unit testing, testing strategy;Association for Computing Machinery;;;;;Rejected
Agile Transformation Challenges and Solutions in Bureaucratic Government: A Systematic Literature Review;Dwi Harfianto, Hendy and Raharjo, Teguh and Hardian, Bob and Wahbi, Andi;;2022;ACM Digital Library;12–19;;Information technology (IT) provides ease, convenience, and efficiency to run some errands. IT is not only facilitating services to customers, but also as the main backbone to drive business and management in an organization. A lot of IT projects were established to solve problems or improve business problems with IT. The urgency to quickly execute IT projects within a short time made some organizations have to consider changing their development methods from predictive (waterfall) to adaptive (agile). However, transforming to agile in public sector, especially a convoluted hierarchical organization like government, was not as easy as less bureaucratic ones. A layered bureaucracy could hinder the application of agile methods. This study was conducted to summarize challenges of agile transformation in a bureaucratic government and its solutions. A Systematic Literature Review (SLR) was applied as the main method of this research. There were 14 relevant papers from the past 5 years identified from six databases resulting in 20 challenges grouped into 4 categories using TOEI (technology-organization-environment-individual) framework. Several solutions to each challenge were mapped as a recommendation for other bureaucratic governments before transforming to agile. The findings can also be used for future research exploration of agile transformation challenges in other organization types.;;10.1145/3512676.3512679;https://doi.org/10.1145/3512676.3512679;;;Systematic Literature Review, Bureaucratic Government, IT Project, Agile Transformation Challenges;Association for Computing Machinery;;;;;Rejected
Challenges in Combining Agile Development and CMMI: A Systematic Literature Review;Ferdinansyah, Alex and Purwandari, Betty;;2021;ACM Digital Library;63–69;;Recently, Agile Development has emerged as an alternative approach in software engineering. The Agile Software Development (ASD) process provides the ability to cope with ever-changing requirements. On the other hand, the Capability Maturity Model Integration, one of the Software Process Improvement Framework, is widely used to provide software development organizations with structure and stability in their software process. It enables organizations to generate software processes with better quality software, the productivity increase of the development team, and minimal risk of failure. The idea behind combining the Capability Maturity Model Integration (CMMI) and Agile aims to create a software development procedure that is stable and continues to improve while also providing agility for dealing with dynamic business needs. This research compiles the experiences of combining both software and identifies challenges for the collaborative implementation process. This study also highlights the extent of the compatibility of CMMI and Agile Development. This research followed a standardized Systematic Literature Review procedure and used the approach known as Preferred Reporting Items for Systematic Reviews and Meta-Analyses or PRISMA. The findings indicate that the main challenges with regard to combining CMMI and Agile are the lack of relevant knowledge and experience and the culture of CMMI, Agile, or sometimes both. The limited scope of Agile itself poses another considerable challenge. Agile focuses on software development projects, while CMMI has a broader range, from project-level development to organization-level process improvement. This review also finds that Agile Development is compatible with CMMI at a maturity level of 2 and 3. Future studies should determine the optimal method for overcoming the obstacles associated with combining CMMI and Agile.;;10.1145/3457784.3457803;https://doi.org/10.1145/3457784.3457803;;;Scrum, Software Process Improvement, Agile, CMMI, Systematic Literature Review, PRISMA, Extreme Programming;Association for Computing Machinery;;;;;Rejected
A Quest of Software Process Improvements in DevOps and Kanban: A Case Study in Small Software Company;Gunawan, Fandi and K. Budiardjo, Eko;;2021;ACM Digital Library;39–45;;A good software process improves software products. In the case of a small software company, software development is a matter of survivability due to its limited resources to develop software. XYZ Company is a very small software company that adopted Kanban and DevOps and faced software delivery delays. It is necessary to recommend the software process improvements to solve this problem. Software process improvements are the outcomes of measurement and analysis of maturity levels using the ISO 29110 framework in a qualitative study. They are then analyzed using the Lean Six Sigma tools, namely gap analysis, root cause analysis, and Pareto analysis. Delphi method validated them and resulted in 18 improvement recommendations within four domains, namely (a) product, (b) people, (c) technology, and (d) process. The improvements span across two main processes within software development, namely (a) Project Management (PM) and (b) Software Implementation (SI). The XYZ Company or any agile-based software company could adopt the 18 improvement recommendations to enhance the software process and quality.;;10.1145/3451471.3451478;https://doi.org/10.1145/3451471.3451478;;;Kanban, ISO 29110, DevOps, small software company, Software Process Improvement, agile, SPI;Association for Computing Machinery;;;;;Rejected
Digitizing Parliaments: A Case Study of Serbia;Gostoji\'{c}, Stevan and Ledeni\v{c}an, Biljana and Gr\v{s}i\'{c}, Nenad;;2020;ACM Digital Library;705–710;;The technological and following economic, political and social changes that have characterised the last decades have been accompanied with new forms of relationships between governments and citizens. Proliferation of transparent and accountable democratic practices and innovative tools aims to offer a response to a corrosion of democracy and its deformations into autocratic and illiberal regimes. New digital solutions may bring increased citizens participation at the local level, by upgrading the work processes of municipal institutions in a more transparent and inclusive manner. The focus of this paper is on the analysis of an innovative approach in digitalization of municipal, city and regional parliaments in Serbia, by developing e-parliament as a unique software solution for supporting management of parliamentary sessions. First, the benefits of the digitalization process are presented, both for parliaments and citizens. Then, scope of the system is described and high-level design principles are set. The scope was limited to legislative and oversight functions of the parliament. The most important principles were to develop a highly configurable and customizable solution, by using a modular design, open standards and platform-independent open-source components. Organizational and technical issues that have risen during the implementation process are also briefly described in the paper. The lessons learned are summed up as good practices that can hopefully guide parliament digitalization initiatives in other countries. Finally, the paper is concluded with plans to improve the software in the future.;;10.1145/3428502.3428606;https://doi.org/10.1145/3428502.3428606;;;participation, transparency, digitization, parliament, inclusiveness;Association for Computing Machinery;;;;;Rejected
A Descriptive Study of Assumptions Made in LINDDUN Privacy Threat Elicitation;Van Landuyt, Dimitri and Joosen, Wouter;;2020;ACM Digital Library;1280–1287;;Threat modeling is widely adopted and increasingly recognized as an essential step in the secure software development life cycle (SDLC). Focused on privacy-specific threat categories, LINDDUN is a threat modeling framework that allows the identification of privacy-related design flaws at the stage of the initial architecture concept. LINDDUN advocates making explicit any assumptions during the identification and prioritization of privacy threats. These assumptions are in practice documented informally in a free-form, textual format, and the impact, nature and purpose of these assumptions within the context of LINDDUN is not well understood.We present a descriptive study of assumptions made during the application of LINDDUN. This empirical study involves in total 122 threat models created for an IoT-based home automation system and a total of 845 studied assumptions. This study focuses on (i) clarifying the role of assumption-making in the threat modeling process, and (ii) categorizing the types of information provided in these assumptions, and (iii) their relation to the LINDDUN threat categories or more broadly, any privacy-specific concepts.Our results indicate that in practice, (i) assumptions are used to motivate exclusion of potential threats, yet the rationale behind such decisions is often not documented, (ii) many assumption are about the system under analysis, and (iii) a majority is also relevant outside of the specific LINDDUN or privacy scope.;;10.1145/3341105.3375762;https://doi.org/10.1145/3341105.3375762;;;threat modeling, privacy, assumptions, LINDDUN;Association for Computing Machinery;;;;;Rejected
Agile Project Management Challenges and Mapping Solutions: A Systematic Literature Review;Raharjo, Teguh and Purwandari, Betty;;2020;ACM Digital Library;123–129;;The Project Management Institute reported that the Agile approach is widely being used for project management practices. This approach has a significant impact on business growth and project performance. However, its implementation is challenging. Therefore, a systematic literature review (SLR) is used to reveal the challenges faced in Agile project execution. The Project Management Body of Knowledge (PMBOK) knowledge areas were adopted to classify the challenges. A total of 23 papers from 400 were identified as the result of SLR extraction. The challenges from related studies were categorized into the PMBOK knowledge areas. A mapping from the challenges to the solutions was performed using the PMBOK Guide, Prince2 Agile, Agile Practice Guide, and other related references. This study provides a list of Agile challenges and their mapped solutions. The biggest challenge arises from stakeholder management, which includes challenges related to Agile adaption, Agile transition, and Agile transformation. Other challenges include project resource management, project integration management, project scope management, and project schedule management. For academicians, this study provides a new understanding of Agile challenges and their suitable solutions from the perspective of project management. For practitioners, the findings provide potential lessons learned and recommendations to deal with the challenges.;;10.1145/3378936.3378949;https://doi.org/10.1145/3378936.3378949;;;Agile Project Management, Systematic Literature Review, Agile, Agile Approach;Association for Computing Machinery;;;;;Rejected
Continuous Development and Testing of Access and Usage Control: A Systematic Literature Review;Daoudagh, Said and Lonetti, Francesca and Marchetti, Eda;;2020;ACM Digital Library;51–59;;Context: Development and testing of access/usage control systems is a growing research area. With new trends in software development such as DevOps, the development of access/usage control also has to evolve. Objective: The main aim of this paper is to provide an overview of research proposals in the area of continuous development and testing of access and usage control systems. Method: The paper uses a Systematic Literature Review as a research method to define the research questions and answer them following a systematic approach. With the specified search string, 210 studies were retrieved. After applying the inclusion and exclusion criteria in two phases, a final set of 20 primary studies was selected for this review. Results: Results show that primary studies are mostly published in security venues followed by software engineering venues. Furthermore, most of the studies are based on the standard XACML access control language. In addition, a significant portion of the proposals for development and testing is automated with test assessment and generation the most targeted areas. Some general guidelines for leveraging continuous developing and testing of the usage and access control systems inside the DevOps process are also provided.;;10.1145/3393822.3432330;https://doi.org/10.1145/3393822.3432330;;;Testing, DevOps, Systematic Literature Review, Access Control, XACML;Association for Computing Machinery;;;;;Rejected
Challenges in Adopting Continuous Delivery and DevOps in a Globally Distributed Product Team: A Case Study of a Healthcare Organization;Gupta, Rajeev Kumar and Venkatachalapathy, Mekanathan and Jeberla, Ferose Khan;;2019;ACM Digital Library;30–34;;"This paper presents our experiences in a project of a software engineering team spread across three countries that successfully established continuous delivery, DevOps and short release cycles with agile scrum. We had the challenge to find a way from established regulatory heavy-weight processes, long release strategies, legacy tools and technologies and people mindset towards adopting continuous delivery and DevOps.We are describing our experiences in the journey towards timeboxed release strategies compared to legacy fixed scope-based releases; value stream-based execution compared to traditional milestone-based execution; operation, test, and infrastructure as a code compared to executing these activities manually. This paper also describes experiences in transforming traditional scrum team into a DevOps team, technological landscape into lightweight tools. The authors bring their experiences as a Project Manager, Quality Manager, and an Architect, who has been an integral part of this journey.These practices have helped in stabilizing processes and methods to an extent where we have released several products versions within a year. The other business units are adopting our practices for continuous delivery and DevOps. This paper also summaries our lessons learned, and recommendations.";;10.1109/ICGSE.2019.00-10;https://doi.org/10.1109/ICGSE.2019.00-10;;;test as code, operation as code, DevOps, continuous delivery;IEEE Press;;;;;Rejected
Students Perception on the Use of Project-Based Learning in Software Engineering Education;Souza, Maur\'{\i}cio and Moreira, Renata and Figueiredo, Eduardo;;2019;ACM Digital Library;537–546;;Balancing theory and practice is a recurring challenge in Software Engineering (SE) education. However, the curriculum guidelines of the ACM/IEEE and Brazilian Computer Society emphasize the need of providing students with sufficient practical experiences for the development of competences expected for SE professional. Student-centered and learn-by-doing approaches, such as Project-Based Learning (PBL), have been advocated as suited for the development of competences. These approaches aim to promote higher motivation for the learner, a more active role in the learning process, and better learning in the application level. The goal of this paper is to evaluate the students' perception on the adoption of PBL in SE education. To achieve this goal, we performed a long-term study spanning for about 2 years. This study includes a survey to collect responses of 32 undergraduate students enrolled in an introductory SE course that used PBL. We compare the results to the responses of 17 students who participated in a SE course with similar syllabus but with a traditional teacher-centered learning method (non-PBL). Our results show a positive reception of the PBL method, and an increased perception of the contribution of a practical software development assignment in learning specific SE topics in the context of the PBL course, in comparison to a non-PBL method.;;10.1145/3350768.3352457;https://doi.org/10.1145/3350768.3352457;;;PBL, Software Engineering education, project-based learning;Association for Computing Machinery;;;;;Rejected
Knowledge Management Diagnostics in Software Development Organizations: A Systematic Literature Review;Maciel, Claudia P. C. and de Souza, \'{E}rica Ferreira and de Almeia Falbo, Ricardo and Felizardo, Katia Romero and Vijaykumar, Nandamudi L.;;2018;ACM Digital Library;141–150;;Context: Managing knowledge is one of the main challenges for software development organizations. Thus, the principles of Knowledge Management (KM) are presented as determinant and effective factors for the software product quality. There are several approaches to applying KM in an organization. However, for a KM approaches to succeed, it is important to conduct a KM diagnostic in order to analyze the KM current state that already exists in the organization. Objective: The objective of this paper is to present the results of a Systematic Literature Review (SLR) conducted to summarize existing research on KM diagnostic in software development organizations. Method: SLR was performed by searching four electronic databases. We also performed backward snowballing from reference lists of selected studies. Results: From the SLR, we identified 24 studies addressing investigated differents approaches related to KM diagnostics in software development organizations. Conclusion: Based on our results we conclude that in the software engineering context the KM diagnosis practice still does not seem consolidated.;;10.1145/3275245.3275260;https://doi.org/10.1145/3275245.3275260;;;Software Engineering, Knowledge Management Diagnostic, Knowledge Management;Association for Computing Machinery;;;;;Rejected
Is Virtual Reality Product Development Different? An Empirical Study on VR Product Development Practices;Karre, Sai Anirudh and Mathur, Neeraj and Reddy, Y. Raghu;;2019;ACM Digital Library;;;With the rise of Virtual Reality (VR) footprint in many organizations, it was unclear if traditional software engineering practices are still exercised during VR product development. As part of our research, we conducted a year-long multi-level exploratory study to understand the various software development practices within VR product development teams. An empirical study on VR practitioners from 6 different countries was done to examine their development strategies, methods, and models adopted along with the various challenges faced during the course of VR product release. We found that VR practitioners adopted hybrid Software Engineering approaches in VR product development. In this paper, we present our insights from the empirical study and stress on the need for a diverse software development model for VR products.;;10.1145/3299771.3299772;https://doi.org/10.1145/3299771.3299772;;;Industrial Practices, Software Process, Quantitative Study, Software Development Methodology, Virtual Reality;Association for Computing Machinery;;;;;Rejected
An Empirical Study on Scrum Application Patterns in Distributed Teams;Seckin, Ibrahim and Ovatman, Tolga;;2018;ACM Digital Library;135–136;;In this study we dig for scrum application practices in distributed offshore development teams of a multinational company which has in-source offshore development centers across the world. Main location of the research is the Turkey center of the company.;;10.1145/3196369.3196381;https://doi.org/10.1145/3196369.3196381;;;distributed software development, distributed scrum teams, agile methodologies;Association for Computing Machinery;;;;;Rejected
Addressing Requirements of M-Government Services: Empirical Study from Designers' Perspectives;Isagah, Tupokigwe and Wimmer, Maria A.;;2018;ACM Digital Library;599–608;;Despite the potential of m-government in developing countries, research in its design and implementation is still scarce. In an empirical study, requirements of m-government service design have been elicited in developing countries. The study focused on requirements regarding the design and the approaches used to design m-government services. This paper presents part of the empirical results. Raw data were collected through questionnaires and interviews. To analyze collected data, we used MAXQDA software. Results presented in this paper include significant requirements of m-government services and design characteristics and approaches for addressing them. The paper demonstrates a lack of understanding and unclear approaches for addressing requirements of m-government services, which is, however, imperative to ensure successful design and implementation of m-government. We conclude with suggestions for addressing the requirements at the government level.;;10.1145/3209415.3209469;https://doi.org/10.1145/3209415.3209469;;;design characteristics of m-government services, m-government, m-government requirements;Association for Computing Machinery;;;;;Rejected
Why Digital Systems Do Not Reach Their Full Potential in Organizations;Sandblad, Bent and Lind, Thomas;XRDS;2019;ACM Digital Library;32–37;25;The continuous evolution of digital systems shaping the workplace and the optimizing of work processes is revolutionary. But despite decades of accumulated experience, there are still plenty of projects that fail completely or deliver unexpected and unacceptable results. This article discusses why problems with the digitalization of working life persist.;;10.1145/3301481;https://doi.org/10.1145/3301481;;;;Association for Computing Machinery;1528-4972;;;;Rejected
A Meta-Model for Information Systems Quality: A Mixed Study of the Financial Sector;Russo, Daniel and Ciancarini, Paolo and Falasconi, Tommaso and Tomasi, Massimo;ACM Trans. Manage. Inf. Syst.;2018;ACM Digital Library;;9;"Information Systems Quality (ISQ) is a critical source of competitive advantages for organizations. In a scenario of increasing competition on digital services, ISQ is a competitive differentiation asset. In this regard, managing, maintaining, and evolving IT infrastructures have become a primary concern of organizations. Thus, a technical perspective on ISQ provides useful guidance to meet current challenges. The financial sector is paradigmatic, since it is a traditional business, with highly complex business-critical legacy systems, facing a tremendous change due to market and regulation drivers. We carried out a Mixed-Methods study, performing a Delphi-like study on the financial sector. We developed a specific research framework to pursue this vertical study. Data were collected in four phases starting with a high-level randomly stratified panel of 13 senior managers and then a target panel of 124 carefully selected and well-informed domain experts. We have identified and dealt with several quality factors; they were discussed in a comprehensive model inspired by the ISO 25010, 42010, and 12207 standards, corresponding to software quality, software architecture, and software process, respectively. Our results suggest that the relationship among quality, architecture, and process is a valuable technical perspective to explain the quality of an information system. Thus, we introduce and illustrate a novel meta-model, named SQuAP (Software Quality, Architecture, Process), which is intended to give a comprehensive picture of ISQ by abstracting and connecting detailed individual ISO models.";;10.1145/3230713;https://doi.org/10.1145/3230713;;;software process, management information systems, software architecture, software quality, delphi study, Information systems quality, mixed methods;Association for Computing Machinery;2158-656X;;;;Rejected
PBL Integration into a Software Engineering Undergraduate Degree Program Curriculum: An Analysis of the Students' Perceptions;Guedes, G. T. A. and Bordin, A. S. and Mello, A. V. and Melo, A. M.;;2017;ACM Digital Library;308–317;;Problem-Based Learning (PBL) has been adopted by undergraduate degree programs in different knowledge areas. In Brazil, although there are reports about the use of this approach in different formats on Computing Programs, we are not aware of many works available in the literature regarding its integration into the curriculum. On Software Engineering undergraduate degree programs, the only experience that mentions the PBL integration we know until the current date is that being applied at Federal University of Pampa (Unipampa). This paper shows how the PBL approach is integrated into the curriculum of this program by means of six problem-solving courses distributed along the curriculum and organized within thematic axes. Moreover, this work presents and discusses the students' perception regarding PBL adoption. These perceptions were obtained through a research instrument applied to both undergraduate students and bachelors in the program. Based on the results, we concluded that most students agree that the objectives of the PBL adoption in the curriculum have been achieved. However, current results suggest that collaborative work still is a challenge to be addressed.;;10.1145/3131151.3131178;https://doi.org/10.1145/3131151.3131178;;;Problem-Based Learning, Software Engineering Undergraduate Degree Program, PBL integrated into the Curriculum;Association for Computing Machinery;;;;;Rejected
A Systematic Review on the Use of Definition of Done on Agile Software Development Projects;Silva, Ana and Ara\'{u}jo, Thalles and Nunes, Jo\~{a}o and Perkusich, Mirko and Dilorenzo, Ednaldo and Almeida, Hyggo and Perkusich, Angelo;;2017;ACM Digital Library;364–373;;Background: Definition of Done (DoD) is a Scrum practice that consists of a simple list of criteria that adds verifiable or demonstrable value to the product. It is one of the most popular agile practices and assures a balance between short-term delivery of features and long-term product quality, but little is known of its actual use in Agile teams.Objective: To identify possible gaps in the literature and define a starting point to define DoD for practitioners through the identification and synthesis of the DoD criteria used in agile projects as presented in the scientific literature.Method: We applied a Systematic Literature Review of studies published up to (and including) 2016 through database search and backward and forward snowballing.Results: In total, we evaluated 2326 papers, of which 8 included DoD criteria used in agile projects. We identified that some studies presented up to 4 levels of DoD, which include story, sprint, release or project. We identified 62 done criteria, which are related to software verification and validation, deploy, code inspection, test process quality, regulatory compliance, software architecture design, process management, configuration management and non-functional requirements.Conclusion: The main implication for research is a need for more and better empirical studies documenting and evaluating the use of the DoD in agile software development. For the industry, the review provides a map of how DoD is currently being used in the industry and can be used as a starting point to define or compare with their own DoD definition.;;10.1145/3084226.3084262;https://doi.org/10.1145/3084226.3084262;;;Agile Software Development, Systematic Literature Review, Definition of Done;Association for Computing Machinery;;;;;Rejected
Agile for Millennials: A Comparative Study;Missiroli, Marcello and Russo, Daniel and Ciancarini, Paolo;;2017;ACM Digital Library;47–53;;"Context: Comparative study of software development methodologies in millenials high school students.Objective: This paper compares the performance and satisfaction of both students and teachers in using two development strategies in a K-12 Computer Science teaching practice.Method: This study includes an experiment, administered in a laboratory controlled setting to measure students' performances.Results: Scrum produces less usable software with better working features compared to Waterfall; it is also more appreciated by students. Teachers are more experienced with Waterfall, which also offers more control on the development process.Conclusions: From an educational perspective, the two methods are equivalent. Since we noted an overall positive effect on the learning environment, we recommend that at least one method be taught in practice.";;10.1109/SECM.2017.7;https://doi.org/10.1109/SECM.2017.7;;;scrum, software engineering education, K-12 education, waterfall;IEEE Press;;;;;Rejected
Requirements Management in Students' Software Development Projects;"M\""{a}kiaho, Pekka and Poranen, Timo and Zhang, Zheying";;2017;ACM Digital Library;203–210;;In this paper, we study requirements management practices in students' software development projects. The 12 projects studied applied iterative development models and agile practices. We analyze tools usage, methods, processes, common problems, risks, and challenges in requirements management. We also research changes in requirements statuses and conduct a more detailed analysis for status changes in three projects. As a result, we propose guidelines and suggestions to teachers and project managers based on our findings.;;10.1145/3134302.3134340;https://doi.org/10.1145/3134302.3134340;;;tools, Requirements management, student projects, requirements statuses;Association for Computing Machinery;;;;;Rejected
Towards an Automated Functional Size Measurement Procedure: An Industrial Case Study;Quesada-L\'{o}pez, Christian and Jenkins, Marcelo and Salas, Luis Carlos and G\'{o}mez, Juan Carlos;;2017;ACM Digital Library;138–144;;Functional size measurement automatically calculated for specific development frameworks is a challenge for the software industry. Automating function points counting involves benefits such as savings in time and costs and better reliability and accuracy of the measures, but it is hardly automatable. This paper presents an automated functional size measurement procedure, which has been systematically designed to obtain the functional size of software systems modeled in the development framework called FastWorks. In this study, we describe the framework architecture, the procedure design based on IFPUG FPA and the measurement prototype tool. Finally, the approach is preliminarily validated, the results are presented and lessons learned are discussed.;;10.1145/3143434.3143460;https://doi.org/10.1145/3143434.3143460;;;FSM estimation, FSM procedure, measurement tool, functional size measurement, empirical validation, IFPUG function points;Association for Computing Machinery;;;;;Rejected
Impacts of Agile Requirements Documentation Debt on Software Projects: A Retrospective Study;Mendes, Thiago Souto and de F. Farias, M\'{a}rio Andr\'{e} and Mendon\c{c}a, Manoel and Soares, Henrique Frota and Kalinowski, Marcos and Sp\'{\i}nola, Rodrigo Oliveira;;2016;ACM Digital Library;1290–1295;;Documentation debt is a type of technical debt that describes problems in documentation such as missing, inadequate or incomplete artifacts. Unlike traditional methods, agile methodologies usually employ short iterative cycles and rely on tacit knowledge within a team. In particular, Agile Requirements (AR) (e.g., user stories) tend to reduce the focus on requirements specification activities. This scenario contributes to the occurrence of documentation debt. The goal of this paper is to investigate the impact that this type of debt brings to projects developed by using AR. We address this goal by performing a retrospective study in a real software project that used AR in its development. Our analysis was concentrated on data from 132 maintenance and evolution tasks. Of this total, 65 were related to the presence of documentation debt and were performed within a timeframe of 18 months. The findings indicated an extra maintenance effort of about 47% of the total effort estimated for developing the project and an extra cost of about 48% of the initial cost of the development phase.;;10.1145/2851613.2851761;https://doi.org/10.1145/2851613.2851761;;;agile requirements, retrospective study, user stories, documentation debt, technical debt;Association for Computing Machinery;;;;Primary studies;Rejected
Process Mining Software Repositories from Student Projects in an Undergraduate Software Engineering Course;Mittal, Megha and Sureka, Ashish;;2014;ACM Digital Library;344–353;;An undergraduate level Software Engineering courses generally consists of a team-based semester long project and emphasizes on both technical and managerial skills. Software Engineering is a practice-oriented and applied discipline and hence there is an emphasis on hands-on development, process, usage of tools in addition to theory and basic concepts. We present an approach for mining the process data (process mining) from software repositories archiving data generated as a result of constructing software by student teams in an educational setting. We present an application of mining three software repositories: team wiki (used during requirement engineering), version control system (development and maintenance) and issue tracking system (corrective and adaptive maintenance) in the context of an undergraduate Software Engineering course. We propose visualizations, metrics and algorithms to provide an insight into practices and procedures followed during various phases of a software development life-cycle. The proposed visualizations and metrics (learning analytics) provide a multi-faceted view to the instructor serving as a feedback tool on development process and quality by students. We mine the event logs produced by software repositories and derive insights such as degree of individual contributions in a team, quality of commit messages, intensity and consistency of commit activities, bug fixing process trend and quality, component and developer entropy, process compliance and verification. We present our empirical analysis on a software repository dataset consisting of 19 teams of 5 members each and discuss challenges, limitations and recommendations.;;10.1145/2591062.2591152;https://doi.org/10.1145/2591062.2591152;;;Software Engineering Education, Learning Analytic, Mining Software Repositories, Education Data Mining, Process Mining;Association for Computing Machinery;;;;;Rejected
Systematic Mapping Study on Software Engineering for Sustainability (SE4S);Penzenstadler, Birgit and Raturi, Ankita and Richardson, Debra and Calero, Coral and Femmer, Henning and Franch, Xavier;;2014;ACM Digital Library;;;Background/Context: The objective of achieving higher sustainability in our lifestyles by information and communication technology has lead to a plethora of research activities in related fields. Consequently, Software Engineering for Sustainability (SE4S) has developed as an active area of research. Objective/Aim: Though SE4S gained much attention over the past few years and has resulted in a number of contributions, there is only one rigorous survey of the field. We follow up on this systematic mapping study from 2012 with a more in-depth overview of the status of research, as most work has been conducted in the last 4 years. Method: The applied method is a systematic mapping study through which we investigate which contributions were made, which knowledge areas are most explored, and which research type facets have been used, to distill a common understanding of the state-of-the-art in SE4S. Results: We contribute an overview of current research topics and trends, and their distribution according to the research type facet and the application domains. Furthermore, we aggregate the topics into clusters and list proposed and used methods, frameworks, and tools. Conclusion: The research map shows that impact currently is limited to few knowledge areas and there is need for a future roadmap to fill the gaps.;;10.1145/2601248.2601256;https://doi.org/10.1145/2601248.2601256;;;systematic mapping study, sustainability, software engineering;Association for Computing Machinery;;;;;Rejected
A Model-Based Framework for Flexible Safety-Critical Software Development: A Design Study;"Notander, Jesper Pedersen and Runeson, Per and H\""{o}st, Martin";;2013;ACM Digital Library;1137–1144;;This paper presents the findings from a design study of a model-based framework for safety-critical software development, called SimPal. The objective of the study was to better understand the necessary properties of such a framework and to learn more about the challenges of realizing it. Our research approach can be labeled as design research, which means that we try to answer our research questions by developing an artifact, in our case SimPal, and analyzing our experiences from the design of the artifact. In the paper we present what we identify as the necessary quality characteristics, using the ISO25010 quality in use quality model, of a framework like SimPal. These characteristics are then used to evaluate the SimPal framework in combination with a simple design case where we design a soft safety controller. We show that our approach has potential considering safety-critical software development. Although, there are some concerns about its run-time performance, from our results we conclude that the ideas behind the SimPal framework are sound but more work is required to investigate how they can be realized. In the future more effort should be spent on increasing performance and adding more features to the framework.;;10.1145/2480362.2480575;https://doi.org/10.1145/2480362.2480575;;;real-time systems, verification, safety-critical development, frameworks and tools, service-oriented computing;Association for Computing Machinery;;;;;Rejected
SimPal: A Design Study on a Framework for Flexible Safety-Critical Software Development;"Notander, Jesper Pedersen and Runeson, Per and H\""{o}st, Martin";SIGAPP Appl. Comput. Rev.;2013;ACM Digital Library;17–29;13;This paper presents the findings from a design study on a framework for flexible safety-critical software development, called SimPal. It is an extended version of a paper that was published in SAC'13 Proceedings of the 2013 ACM Symposium on Applied Computing, in which additional details about SimPal as well as a more extensive evaluation of the framework is presented. The objective is to identify necessary quality properties and to learn more about the challenges of realizing frameworks such as SimPal. We approach our research questions by developing a framework and by analysing our experiences from the design and evaluation process. Some necessary quality characteristics has been identified by discussing the ISO25010 quality in use quality model in relation to the problem domain, which were then used to design and evaluate the developed framework. The evaluation was conducted as a design case in which a soft safety controller was developed following the methodology outlined in the paper. We show that our approach, which tries to merge service-oriented practices with model-based development techniques, has potential considering safety-critical software development. However, there are some concerns about run-time performance as well as the ability to qualify the tool for safety-critical development. Based on our results we conclude that the ideas behind the SimPal framework are sound but more work is required to investigate how they can be realized. For the future, we plan on further investigating the code generating capabilities of the modelling tool we are using to see if and how it can be utilised to increase performance. We also plan on adding more features to the framework, for instance coordination and configuration of services, as well as monitoring of messages and system properties.;;10.1145/2577554.2577558;https://doi.org/10.1145/2577554.2577558;;;verification, safety-critical development, service-oriented computing, real-time systems, frameworks and tools;Association for Computing Machinery;1559-6915;;;;Rejected
A Systematic Literature Review on Global Software Development Life Cycle;Jain, Ritu and Suman, Ugrasen;SIGSOFT Softw. Eng. Notes;2015;ACM Digital Library;1–14;40;Global software development (GSD) has now become a prominent software development paradigm. Software companies are increasingly adopting GSD approaches in order to produce high quality software. GSD's popularity has attracted the researchers to investigate this field, but most of the research work related to global software development cycle is scattered. Therefore, there is a need to integrate and compile all research work related to GSD life cycle to provide a consolidated understanding for software practitioners as well as researchers. In this paper, we report our findings through systematic literature review that aimed at identifying the challenges faced by the globally distributed teams during various phases of software development. We have also discussed suggested best practices, and tools that can be helpful in alleviating these challenges.;;10.1145/2735399.2735408;https://doi.org/10.1145/2735399.2735408;;;challenges, best practices, tools, systematic literature review, software engineering, software development life cycle, process, problems, global software development, distributed software development;Association for Computing Machinery;0163-5948;;;;Rejected
Research Challenges on Engineering Service-Oriented Applications;"Di Nitto, E. and Meil\""{a}nder, D. and Gorlatch, S. and Metzger, A. and Psaier, H. and Dustdar, S. and Razavian, M. and Tamburri, D. A. and Lago, P.";;2012;ACM Digital Library;14–20;;This paper focuses on providing an overview of the research challenges that have been identified toward the end of the S-Cube network in the area of service engineering. These challenges concern the need for agility and dynamicity of the development process for service-based applications, the importance of focusing on proper approaches to support migration of legacy application into service-based applications and the role of humans and of teams of humans in service-based applications.;;;;;;agile approaches, agile service networks, human-provided services, self-adaptation, real-time applications, engineering of service-based applications, evolution;IEEE Press;;;;;Rejected
An Empirical Study on the Relationship between the Use of Agile Practices and the Success of Scrum Projects;Fran\c{c}a, A. C\'{e}sar C. and da Silva, Fabio Q. B. and de Sousa Mariz, Leila M. R.;;2010;ACM Digital Library;;;In this article, factors considered critical for the success of projects managed using Scrum are correlated to the results of software projects in industry. Using a set of 25 factors compiled in by other researchers, a cross section survey was conducted to evaluate the presence or application of these factors in 11 software projects that used Scrum in 9 different software companies located in Recife-PE, Brazil. The questionnaire was applied to 65 developers and Scrum Masters, representing 75% (65/86) of the professionals that have participated in the projects. The result was correlated with the level of success achieved by the projects, measured by the subjective perception of the project participant, using Spearman's rank correlation coefficient. The main finding is that only 32% (8/25) of the factors correlated positively with project success, raising the question of whether the factors hypothesized in the literature as being critical to the success of agile software projects indeed have an effect on project success. Given the limitations regarding the generalization of this result, other forms of empirical results, in particular case-studies, are needed to test this question.;;10.1145/1852786.1852835;https://doi.org/10.1145/1852786.1852835;;;agile practices, survey, empirical study, project success, Scrum;Association for Computing Machinery;;;;;Rejected
Reflecting the Relevance of Communication in E-Government-Projects: Two Case Studies in the Field of Knowledge Management in the Swiss Public Administration;Fraefel, Marianne and Neuroni, Alessia C. and Riedl, Reinhard;;2009;ACM Digital Library;180–189;;The present paper focuses on the managerial and social perspective of ICT-based change in E-government projects. Taking the political and legal setting into account, it takes a closer look at how a main goal of the Swiss E-government-strategy, the modernisation of public authorities' business processes and their electronic interaction, is realised in the public administration. Illustrated by two examples in the field of knowledge management, the paper reflects the relevance of planned communication in the context of ICT-based change projects.Based on a review of empirical, theoretical and practical literature relevant to the fields of change and project communication and on a comparison of two case studies, the authors aim at clarifying the relation between the impact of communication and its contextual factors when implementing E-Government-projects. Communication clearly is not the only key for success, however, a conscious approach towards communication is likely to increase acceptance of the intended change, decrease some of the typical risks in IT-project management and support controlling. The authors suggest that an integrative approach, drawing on insights from the field of change communication and existing project management methods and tools for managing communication, should be applied when developing a communicational strategy for E-Government projects. Since the adequacy of communicative measures is context-dependent, further research on the characteristics of different forms of ICT-implementation in public administration is needed. This might lead to the identification of prototypical context factors relevant to communication management in E-Government projects.;;;;;;communication, change management, e-government, public management;Digital Government Society of North America;;;;;Rejected
Teaching Game Design and Game Programming through Interdisciplinary Courses;Gestwicki, Paul and Sun, Fu-Shing and Dean, Benjamin;J. Comput. Sci. Coll.;2008;ACM Digital Library;110–115;24;We provide an experience report on experimental methods for teaching interdisciplinary courses on game and software design. We are working with two groups of students: an interdisciplinary group that studies game design and a group of computer science majors that studies game programming. Teams are formed across the two groups, and the groups collaborate to create game software. The designers learn about the process by which software is created, and the programmers learn how to effectively communicate with non-technical colleagues on a project. Formal team management processes were adopted at the beginning of the projects, but we found that external factors prevented the effective use of such professional approaches: the more informal approaches have required less oversight and time investment, have increased morale, and have not negatively impacted productivity. Our approach is compared to some other published work. We include our recommendations for adopting this interdisciplinary approach, and these recommendations are based on student feedback, the literature, and instructors' analysis.;;;;;;;Consortium for Computing Sciences in Colleges;1937-4771;;;;Rejected
Case Study, Interrupted: The Paucity of Subject Systems That Span the Requirements-Architecture Gap;Diallo, Mamadou H. and Sim, Susan Elliott and Alspaugh, Thomas A.;;2007;ACM Digital Library;43–48;;A number of approaches for spanning the requirements-architecture gap have been published in recent years, and we sought to rigorously characterize the gap and to conduct a comparative evaluation of approaches to span the gap using a case study method on a realistic problem. However, our intentions were impeded by the problem of finding appropriate subject systems that included sufficient information in both requirements and architecture document. Most subject systems that we found contained either detailed requirements or detailed architecture description, but not both. In this paper, we report on our search and the seventeen most suitable subject systems with the hope of aiding others undertaking a similar study. We speculate on the reasons for the paucity of suitable subject systems and invite contributions and suggestions for our ongoing work.;;10.1145/1353673.1353683;https://doi.org/10.1145/1353673.1353683;;;;Association for Computing Machinery;;;;;Rejected
Software Quality Practices in Growing Startups: A Qualitative Study;Pizzini, Adriano and Bortolo Vieira, Ricardo and Deda Gomes, Rhodrigo and Santos, Gleison and Malucelli, Andreia and Reinehr, Sheila;;2021;ACM Digital Library;;;Startups arise in environments of extreme uncertainty, with few resources and the need to scale quickly. In the growth phase, they still need agility, but they tend to concern more with software quality and the development process by having more human and financial resources. Studying the factors that lead startups in the growth phase to seek quality in their processes can help new startups anticipate implementing quality practices. In this paper, we aim to identify how startups adopt quality practices in the growth phase. We carried out a multiple case study with four growth phase startups. We applied qualitative analysis techniques to summarize the findings. The studied startups adopt limited quality practices and are influenced by the development team's maturity level, organizational culture, and experience. Furthermore, they tend to be reactive towards quality, solving the problems when they impact their product, business, customer, or when technical debt can no longer be managed. The findings are relevant to support stabilizing and growing startups to define actions to improve the quality of their processes and products. Besides, they suggest that growth phase startups begin a process of change in the organizational culture concerning quality, adopting the behavior of mature companies as soon as they get more human and financial resources.;;10.1145/3493244.3493254;https://doi.org/10.1145/3493244.3493254;;;Software quality, Qualitative analysis, Startups;Association for Computing Machinery;;;;;Rejected
Ecosystems Effects on Software-Consuming Organizations: An Experience Report on Two Observational Studies;dos Santos, Rodrigo Pereira and Werner, Claudia and Finkelstein, Anthony;;2018;ACM Digital Library;;;Software engineers should have the ability to abstract the complexity of a whole system composed of products, demands and suppliers emerging from an interconnected network termed a software ecosystem (SECO). Since software suppliers resort to virtual integration, software-consuming organizations face difficulties performing IT management activities and analyzing what application or technology enter their SECO. In this context, the `silent' effects of nontechnical factors give rise to serious long-term problems, e.g., low productivity, investment loss, financial crisis, or bankruptcy. This paper presents an investigation of SECO effects on software-consuming organizations performing IT management activities in real settings. IT management teams have regular meetings to deliberate on acquisition decisions which they base on experience and IT market recommendations, including spreadsheets and distributed documents. Analysis of the decision space, business objective synergy, and technology/supplier dependency are identified as the most critical health indicators for SECO platform monitoring in IT management activities. This highlights the critical role acquisition preparation plays in the SECO context.;;10.1145/3241403.3241428;https://doi.org/10.1145/3241403.3241428;;;software-consuming organizations, IT management, governance, acquisition, observational studies, software ecosystems;Association for Computing Machinery;;;;;Rejected
How Do Startups Develop Internet-of-Things Systems: A Multiple Exploratory Case Study;Duc, Anh Nguyen and Khalid, Khan and L\o{}nnestad, Tor and Bajwa, Sohaib Shahid and Wang, Xiaofeng and Abrahamsson, Pekka;;2019;ACM Digital Library;74–83;;Internet-of-Things applications are not only the new opportunity for digital businesses but also a major driving force for the modification and creation of software systems in all industries and businesses. Compared to other types of software-intensive products, the development of Internet-of-Things applications lacks a systematic approach and guidelines. This paper aims at understanding the methodological commonalities among startups who are developing Internet-of-Things products. Using the SEMAT Essence framework, we captured common team compositions, common types of Minimum Viable Products and common way of working in early stage Internet-of-Things startups. We found that startups include various engineering and business competence, but do not cover all of what is needed. The development of Internet-of-Things applications adopts certain speed-favor approaches, i.e. rapid prototyping, iterative development and outsourcing. The finding implies some recommendations for both researchers and practitioners in the area of Internet-of-Things development.;;10.1109/ICSSP.2019.00019;https://doi.org/10.1109/ICSSP.2019.00019;;;hardware-related development, case study, SEMAT essence, minimum viable products, internet-of-things;IEEE Press;;;;;Rejected
Understanding Task Interruptions in Service Oriented Software Development Projects: An Exploratory Study;Abad, Zahra Shakeri Hossein and Ruhe, Guenther and Bauer, Mike;;2017;ACM Digital Library;34–40;;The Service Oriented Software Development (SOSD) approach is a common software development paradigm. Previous qualitative and quantitative studies looked at the main reasons for the delay in software development so as to help project's stakeholders to take appropriate actions for improvement in their planning. In SOSD projects, due to the high level of user involvement in new service and product development, service providers need to make dynamic trade-offs to address their clients' demands. In this paper, we look at interruptions and their impact on tasks duration. We used text classification, Natural Language Processing (NLP), and quantitative time series analysis techniques to analyze 7, 770 development tasks of five real SOSD projects at Arcurve Inc. Our results show that fixing an issue, addressing changes, and adding new features are the most frequently perceived causes of interruption in SOSD projects. Furthermore, we have found that requirements engineering and project management tasks experience less delay time over a project's life-cycle. We also visualized the association between the interruption length and the extra tasks' duration resulted from these interruptions within various development task types, which shows there is no strong association between task type with regard to these two parameters.;;10.1109/SER-IP.2017..5;https://doi.org/10.1109/SER-IP.2017..5;;;service oriented software development (SOSD), empirical study, delay;IEEE Press;;;;;Rejected
Concerns in Software Development: A Systematic Mapping Study;Dasanayake, Sandun and Markkula, Jouni and Oivo, Markku;;2014;ACM Digital Library;;;Context: Successfully addressing stakeholder concerns that are related to software system development and operation is crucial to achieving development goals. The importance of using a systematic approach to addressing these concerns throughout the software development life cycle is growing as more and more systems are employed to handle critical tasks. Objective: The goal of this study is to provide an overview of addressing concerns across the software development life cycle. Method: A systematic mapping study was conducted using a pre-defined protocol. Four digital databases were searched for research literature and primary studies were selected after a three round selection process conducted by multiple researchers. Results: The extracted data are processed and the results are reported from different viewpoints. The results are also analyzed against our research goals. Conclusion: We show that there is a considerable variation in the use of terminologies and addressing concerns in different phases of the software development life cycle.;;10.1145/2601248.2601290;https://doi.org/10.1145/2601248.2601290;;;systematic mapping study, stakeholder concerns, software development life cycle;Association for Computing Machinery;;;;;Rejected
Towards a GSE International Teaching Network: Mapping Global Software Engineering Courses;Fortaleza, Luiz Leandro and Conte, Tayana and Marczak, Sabrina and Prikladnicki, Rafael;;2012;ACM Digital Library;1–5;;Teaching Global Software Engineering is challenging since it is not trivial to simulate distance and the changes that distance brings into the traditional software development life cycle. Despite the challenge, the need to teach undergrad and graduate students the skills to work in such environment is well-known in academia. The goal of this paper is two-folded. First, we identify what has been thought, by whom and to whom by conducting a literature review. This review aims to consolidate the body of knowledge on the topic in order to help professors and professionals interested in teaching the subject. For instance, we found that 19 courses have been reported involving 25 countries in total since 1997. Most of the courses involves graduate students as the main audience, and mainly discuss challenges in distributed development. Our second goal is to propose the creation of a collaborative repository to store and to report teaching experiences on the topic helping the development and strengthening of the Teaching Network community.;;;;;;teaching, community building, global software engineering, software engineering, literature review, education;IEEE Press;;;;;Rejected
Model-Based Testing in Practice: An Industrial Case Study Using GraphWalker;Zafar, Muhammad Nouman and Afzal, Wasif and Enoiu, Eduard and Stratis, Athanasios and Arrieta, Aitor and Sagardui, Goiuria;;2021;ACM Digital Library;;;Model-based testing (MBT) is a test design technique that supports the automation of software testing processes and generates test artefacts based on a system model representing behavioural aspects of the system under test (SUT). Previous research has shown some positive aspects of MBT such as low-cost test case generation and fault detection effectiveness. However, it is still a challenge for both practitioners and researchers to evaluate MBT tools and techniques in real, industrial settings. Consequently, the empirical evidence regarding the mainstream use, including the modelling and test case generation using MBT tools, is limited. In this paper, we report the results of a case study on applying GraphWalker, an open-source tool for MBT, on an industrial cyber-physical system (i.e., a Train Control Management System developed by Bombardier Transportation in Sweden), from modelling of real-world requirements and test specifications to test case generation. We evaluate the models of the SUT for completeness and representativeness, compare MBT with manual test cases written by practitioners using multiple attributes as well as share our experiences of selecting and using GraphWalker for industrial application. The results show that a model of the SUT created using both requirements and test specifications provides better understanding of the SUT from testers’ perspective, making it more complete and representative than the model created based only on the requirements specification alone. The generated model-based test cases are longer in terms of the number of test steps, achieve better edge coverage and can cover requirements more frequently in different orders while achieving the same level of requirements coverage as manually created test cases.;;10.1145/3452383.3452388;https://doi.org/10.1145/3452383.3452388;;;GraphWalker, Model-Based Testing, Case Study;Association for Computing Machinery;;;;;Rejected
CMMI Guided Process Improvement for DevOps Projects: An Exploratory Case Study;Rong, Guoping and Zhang, He and Shao, Dong;;2016;ACM Digital Library;76–85;;Very recently, an increasing number of software companies adopted DevOps to adapt themselves to the ever-changing business environment. While it is important to mature adoption of the DevOps for these companies, no dedicated maturity models for DevOps exist. Meanwhile, maturity models such as CMMI models have demonstrated their effects in the traditional paradigm of software industry, however, it is not clear whether the CMMI models could guide the improvements with the context of DevOps. This paper reports a case study aiming at evaluating the feasibility to apply the CMMI models to guide process improvement for DevOps projects and identifying possible gaps. Using a structured method(i.e., SCAMPI C), we conducted a case study by interviewing four employees from one DevOps project. Based on evidence we collected in the case study, we managed to characterize the maturity/capability of the DevOps project, which implies the possibility to use the CMMI models to appraise the current processes in this DevOps project and guide future improvements. Meanwhile, several gaps also are identified between the CMMI models and the DevOps mode. In this sense, the CMMI models could be taken as a good foundation to design suitable maturity models so as to guide process improvement for projects adopting the DevOps.;;10.1145/2904354.2904372;https://doi.org/10.1145/2904354.2904372;;;DevOps, CMMI, software process improvement;Association for Computing Machinery;;;;;Rejected
Design for IoT: An Experimental Study to Understand How Design Thinking Can Help in the Elicitation of Requirements for IoT Systems;Souza, Sabrina Rocha de and Meireles, Maria Alcimar and Duarte, Jos\'{e} Carlos and Maldonado, Jose Carlos and Conte, Tayana;;2022;ACM Digital Library;;;Context: The Internet of Things (IoT) consists of networks of physical objects embedded with sensors, software, and other technologies to maintain communication and exchange data over a network. These characteristics bring new challenges to the entire development cycle, including requirements engineering (RE). RE practices have been adapted to meet market dynamics and ensure software quality, using a variety of approaches to support this process. One approach for RE is the use of design thinking (DT) techniques, as IoT systems are closely related to product and service innovation. Objective: To analyze the use of DT techniques in the context of IoT systems, evaluating the support for requirements elicitation. Method: An experimental study was carried out in the context of a practical requirements elicitation activity, aiming to obtain results on the support of DT techniques and their ease of use during requirements elicitation for IoT systems. Results: The statistical test did not show significant differences between the groups that used different sets of techniques. In both groups, participants were able to identify requirements related to the IoT paradigm, such as hardware integration, connectivity, mobility, sensing and actuation. The feedback analysis on the ease of use of the techniques pointed out similar difficulties reported by the participants of the two groups, mainly in relation to the terms present in the templates of the techniques. Conclusion: This article aims to contribute to RE in the IoT context, presenting quantitative data and on the ease of use of DT techniques during the requirements elicitation activity.;;10.1145/3571473.3571483;https://doi.org/10.1145/3571473.3571483;;;Technique Selection., Design Thinking Techniques, Requirements Elicitation;Association for Computing Machinery;;;;;Rejected
Adoption of Case Tools & UML: A Local Study;Ashour, Osama Ibraheem Ashour and Pusatli, Tolga;;2021;ACM Digital Library;6–10;;This research investigates the role of CASE tools in the software development process by considering importance of CASE in adopting a number of standards. A survey was conducted in six selected companies in Ankara in which semi-structured interviews are conducted with information system managers and developers as key informants. As results, CASE and UML are reported as being considerably used in Ankara with CASE tools being used for project members' communication and documentations. Furthermore, CASE tools have been used for some companies for documentation as parts of contracts and to follow standards such as ISO and CMMI. CASE tools are used to facilitate project developments, especially when enforced by the standards and methodologies required in the contracts.;;10.1145/3436829.3436856;https://doi.org/10.1145/3436829.3436856;;;UML, software developer companies, CASE tools;Association for Computing Machinery;;;;;Rejected
Incremental Development of Safety Cases: A Mapping Study;Almendra, Camilo and Silva, Carla and Vilela, J\'{e}ssyka;;2020;ACM Digital Library;538–547;;Context: Safety assurance case (SAC) development is an approach for discussing, analysing and assessing the safety properties of systems before a certification procedure. Late development of SACs lead to late discovery of hazards, risks, requirement and design issues that affect safety of the systems. Also, increased rework to recall safety evidence information impact project schedules and costs. However, it is still challenging to develop SACs incrementally. Objective: We aim to identify and analyse existing approaches for integrating SAC development as part of the software development processes in an incremental manner and an analysis of such approaches in terms of how the integration with existing processes occurs, which are the roles involved and which are the expected outcomes. Method: We performed a Systematic Mapping Study to identify and analyse the existing approaches for incremental SAC development. We identified 16 peer-reviewed studies from a set of 1242 studies published until January 2020. Results: We developed a classification for the approaches using three aspects: life cycle model, task integration and argument development. We also found that development-related roles are gaining importance in the construction and review of SACs. Finally, we identified the expected outcomes when adopting incremental development of SACs. Conclusions: The analysis presented in this paper can help practitioners to understand the SAC development area better, and to choose how to adopt incremental SAC development into their processes. Also, we present research directions for further work on the topic.;;10.1145/3422392.3422398;https://doi.org/10.1145/3422392.3422398;;;Systematic mapping study, Safety assurance case, Incremental development;Association for Computing Machinery;;;;;Rejected
A Study on the Impact of Model Evolution in MBT Suites;Silva, Anderson G.F. and Andrade, Wilkerson L. and Alves, Everton L.G.;;2018;ACM Digital Library;49–56;;Software testing is known to be a key-factor for the success of a software development project. In this context, Model-Based Testing (MBT) plays an important role by providing an automated way for generating test cases from system models. However, although MBT can be helpful for creating sound test cases, its use can be very sensitive to model changes. Model edits often lead to a great number of obsolete test cases, as the software and its models evolve. This fact is even more evident in agile projects where requirement artifacts are very volatile. This paper presents an empirical study designed for investigating how model edits can impact MBT test suites. For that, we run a case study in the context of two industrial projects that apply agile methodologies combined with the use of MBT. We observed the evolution of specification models and their impact on generated MBT suites. Our results showed that 86% of the generated test cases were discarded due to model edits and their impact. However, a deeper analysis found that 52% of these tests were impacted only by syntactic model edits, which indicate they could be reused with little revision efforts.;;10.1145/3266003.3266009;https://doi.org/10.1145/3266003.3266009;;;Test Suite Maintenance, Use Case Evolution, Model-Based Testing;Association for Computing Machinery;;;;;Rejected
Functional Requirements Elicitation in IoT Systems: A Follow-up Study;Pald\^{e}s, Roberto Avila and Canedo, Edna Dias and Guimar\~{a}es, Fernando de Albuquerque and Calazans, Ang\'{e}lica Toffano Seidel;;2021;ACM Digital Library;;;As the Internet of Things (IoT) advances, specific views have been proposed for the entire software development cycle and also for Requirements Engineering (RE). The analysis of the use of RE techniques, tools, and models can contribute to obtain better results in this field. This paper presents a Systematic Mapping Study (SMS) to investigate techniques for Functional Requirements (FR) elicitation in IoT software systems, as well as gaps and limitations of current solutions. During the SMS, seventeen articles focused on FR in the IoT were found. The analysis was complemented with an input from the experience of practitioners who have dedicated to this topic, obtained through structured and semi-structured interviews. The results show that FR elicitation has started from the use of traditional techniques, but that these do not fully meet the specificities of the IoT. The majority of the models found are based on UML (Unified Modeling Language) and the most important techniques are based on scenarios. The tools that support these proposals are maturing or under development. In the conclusion, the study shows the advancements already achieved, as well as the challenges and opportunities that are still present.;;10.1145/3439961.3439975;https://doi.org/10.1145/3439961.3439975;;;Functional Requirements Elicitation, Internet of Things, Software System, Systematic Mapping Study.;Association for Computing Machinery;;;;;Rejected
Empirical Study on Commonly Used Combinations of Estimation Techniques in Software Development Planning;Kialbekov, Arman;;2020;ACM Digital Library;44–50;;Precise estimation of time and effort in the lifecycle of a project plays an important role in delivering a final product on time within an established budget, and with expected quality. Inappropriate estimation of effort may lead to overestimation or underestimation of required resources. As people remain to be a constant part of the software development process they should also be considered as an influencing factor in software development estimation process. This work presents the most popular estimation techniques that are used by the survey sample. The questionnaire was completed by 51 participants with industrial experience in Innopolis. The goal was to find differences between roles in software development teams and the techniques that are used to estimate efforts. The result of the survey used to derive main groups of the respondents and map them to estimation techniques. These mappings were analyzed and compared between two main groups to find tendencies, differences, and similarities. The study is considered to help understand patterns of effort estimation among software engineers and revising existing estimation techniques.;;10.1145/3393822.3432328;https://doi.org/10.1145/3393822.3432328;;;Software Estimation, Software Development, Effort Estimation;Association for Computing Machinery;;;;;Rejected
Acceptance of the Methods of Decision-Making: A Case Study from Software Development Companies in Ukraine and Malaysia;Mezhuyev, Vitaliy and Lytvyn, Oleg M. and Pershyna, Iuliia and Nechuiviter, Olesia and Lytvyn, Oleg O. and Lavrik, Vladimir and Kovalska, Oksana and Gunchenko, Yurii;;2019;ACM Digital Library;199–204;;Any software development company encounters issues that need decision-making. At the same time, the use of reliable and proven methods of decision-making does not become a common practice in software companies worldwide. The issues here are the need for extra staff training, allocation of additional time, and inertia of the software industry. This research studies the problems of adoption of the methods of decision-making in the software development companies of Ukraine and Malaysia. The survey was conducted to evaluate software engineers' attitudes toward the use of the methods of decision-making. Research outcomes can be used to raise the level of adoption of the methods of decision-making in software companies worldwide.;;10.1145/3316615.3316677;https://doi.org/10.1145/3316615.3316677;;;attitudes, Ukraine, Methods of decision-making, software development, acceptance, Malaysia;Association for Computing Machinery;;;;;Rejected
How Can We Develop Explainable Systems? Insights from a Literature Review and an Interview Study;"Chazette, Larissa and Kl\""{u}nder, Jil and Balci, Merve and Schneider, Kurt";;2022;ACM Digital Library;1–12;;Quality aspects such as ethics, fairness, and transparency have been proven to be essential for trustworthy software systems. Explainability has been identified not only as a means to achieve all these three aspects in systems, but also as a way to foster users’ sentiments of trust. Despite this, research has only marginally focused on the activities and practices to develop explainable systems. To close this gap, we recommend six core activities and associated practices for the development of explainable systems based on the results of a literature review and an interview study. First, we identified and summarized activities and corresponding practices in the literature. To complement these findings, we conducted interviews with 19 industry professionals who provided recommendations for the development process of explainable systems and reviewed the activities and practices based on their expertise and knowledge. We compared and combined the findings of the interviews and the literature review to recommend the activities and assess their applicability in industry. Our findings demonstrate that the activities and practices are not only feasible, but can also be integrated in different development processes.;;10.1145/3529320.3529321;https://doi.org/10.1145/3529320.3529321;;;explainability, explainable systems, interview study, software process;Association for Computing Machinery;;;;;Rejected
Human Factors and Their Influence on Software Development Teams - A Tertiary Study;Dutra, Eliezer and Diirr, Bruna and Santos, Gleison;;2021;ACM Digital Library;442–451;;Background: Software organizations increasingly need developers with high skills for social interactions. Managers, leaders, and academics need to know the human factors influencing the individuals, the development team, and the software project activities. Despite the increasing number of secondary studies about human factors in Software Engineering (SE) and in Agile Software Development (ASD), there is no study synthesizing which human factors influence software development without a specific perspective from SE or human factor thematic. Objective: We aim to summarise human factors and their influence on SE development teams and ASD teams. Method: We executed a tertiary study. We used thematic analysis to examine the resulting data. Results: We found 29 systematic literature reviews and systematic mapping studies addressing the human perspective in SE teams. We identified 101 human factors and 79 influences grouped in 4 categories (Team member, Team, Project, and Organization). Also, we identified 71 human factors and 60 influences on ASD. The most investigated human factors are Communication, Collaboration, Knowledge, and Motivation. Conclusions: The identified human factors and their influences can be considered most significant by software organizations, researchers, and academics in SE practices. Based on our results, practitioners might propose activities that enhance human capital behaviors that influence individual motivation, agile mindset, team climate, software quality, or agile transition in traditional organizations.;;10.1145/3474624.3474625;https://doi.org/10.1145/3474624.3474625;;;Tertiary study, Software Engineering, Human Factor Influence;Association for Computing Machinery;;;;;Rejected
Retrospective Based on Data-Driven Persona Significance in B-to-B Software Development;Watanabe, Yasuhiro and Washizaki, Hironori and Honda, Kiyoshi and Fukazawa, Yoshiaki and Taga, Masahiro and Matsuzaki, Akira and Suzuki, Takayoshi;;2018;ACM Digital Library;89–92;;A Business-to-Business (B-to-B) software development company develops services to satisfy their customers' requirements. Developers should prioritize customer satisfaction because customers greatly influence on agile software development. However, it is possible that a B-to-B software development company has following issues: 1) failure to understand actual users because the requirements are not often derived from actual users and 2) failure to satisfy the future customers' requirements when only satisfying current customers. Although many previous works proposed methods to elicit the requirements based on actual quantitative data, these works had not considered customers and end-users simultaneously. Herein we proposed Retrospective based on Data-Driven Persona Significance (ReD2PS) to help developers to plan future releases. ReD2PS includes Persona Significance Index (PerSil) to reflect the correspondence between target users, which developers assume based on requirements in releases, and end-users' personas. A case study involving a Japanese cloud application shows that PerSil reflects the relationship between target users and end-users to discuss about the validity and effectiveness of ReD2PS.;;10.1145/3183399.3183410;https://doi.org/10.1145/3183399.3183410;;;;Association for Computing Machinery;;;;Primary studies;Rejected
A Model of Software Prototyping Based on a Systematic Map;"Bjarnason, Elizabeth and Lang, Franz and Mj\""{o}berg, Alexander";;2021;ACM Digital Library;;;Background: Prototyping is an established practice for user interface design and for requirements engineering within agile software development, even so there is a lack of theory on prototyping. Aims: The main research objective is to provide a means to categorise prototyping instances, in order to enable comparison and reflection of prototyping practices. Method: We have performed a systematic mapping study of methodological aspects of prototyping consisting of thirty-three primary studies upon which we designed a model of prototyping that was validated through a focus group at a case company. Results: Our model consists of four aspects of prototyping, namely purpose, prototype scope, prototype use, and exploration strategy. This model supported the focus group participants in discussing prototyping practices by considering concrete prototyping instances in terms of the concepts provided by our model. Conclusions: The model can be used to categorise prototyping instances and can support practitioners in reflecting on their prototyping practices. Our study provides a starting point for further research on prototyping and into how the practice can be applied more cost-effectively to elicit, validate, and communicate requirements.;;10.1145/3475716.3475772;https://doi.org/10.1145/3475716.3475772;;;requirements engineering, Agile, systematic mapping study;Association for Computing Machinery;;;;Studies that do not deal with RE OR ASD;Rejected
Software Engineering in Medical Informatics: A Systematic Literature Review;Dalveren, Gonca Gokce Menekse and Mishra, Deepti;;2019;ACM Digital Library;112–117;;This study presents a systematic literature review to provide overall view of the application of Software Engineering (SE) in Medical Informatics (MI) field. Articles published from 2010 to 2019 from seven selected databases (Emerald, PubMed, IEEE, ACM, Taylor Francis, SAGE and Wiley) were investigated. The existing literature was analyzed, and the emerging areas of research in the medical informatics field have been identified. According to the findings of this study, medical informatics research has been applied in many fields but there is still potential of further research in different areas. Most of the reviewed studies were conducted on data mining, decision support, deep learning and IoT. Also, it can be said that most of the applications are provided as web-based instead of mobile applications. To conclude, the results of this study provides insights to the researchers about the research directions and the gaps in the literature in the MI and SE fields.;;10.1145/3357419.3357444;https://doi.org/10.1145/3357419.3357444;;;Health informatics, Software engineering, Medical informatics;Association for Computing Machinery;;;;;Rejected
DevOps in an ISO 13485 Regulated Environment: A Multivocal Literature Review;Lie, Martin Forsberg and S\'{a}nchez-Gord\'{o}n, Mary and Colomo-Palacios, Ricardo;;2020;ACM Digital Library;;;"Background: Medical device development projects must follow proper directives and regulations to be able to market and sell the end-product in their respective territories. The regulations describe requirements that seem to be opposite to efficient software development and short time-to-market. As agile approaches, like DevOps, are becoming more and more popular in software industry, a discrepancy between these modern methods and traditional regulated development has been reported. Although examples of successful adoption in this context exist, the research is sparse. Aims: The objective of this study is twofold: to review the current state of DevOps adoption in regulated medical device environment; and to propose a checklist based on that review for introducing DevOps in that context. Method: A multivocal literature review is performed and evidence is synthesized from sources published between 2015 to March of 2020 to capture the opinions of experts and community in this field. Results: Our findings reveal that adoption of DevOps in a regulated medical device environment such as ISO 13485 has its challenges, but potential benefits may outweigh those in areas such as regulatory, compliance, security, organizational and technical. Conclusion: DevOps for regulated medical device environments is a highly appealing approach as compared to traditional methods and could be particularly suited for regulated medical development. However, an organization must properly anchor a transition to DevOps in top-level management and be supportive in the initial phase utilizing professional coaching and space for iterative learning; as such an initiative is a complex organizational and technical task.";;10.1145/3382494.3410679;https://doi.org/10.1145/3382494.3410679;;;ISO 13485, DevOps, Medical device software development, Multivocal Literature Review;Association for Computing Machinery;;;;;Rejected
Needs and Challenges for a Platform to Support Large-Scale Requirements Engineering: A Multiple-Case Study;"Fucci, Davide and Palomares, Cristina and Franch, Xavier and Costal, Dolors and Raatikainen, Mikko and Stettinger, Martin and Kurtanovic, Zijad and Kojo, Tero and Koenig, Lars and Falkner, Andreas and Schenner, Gottfried and Brasca, Fabrizio and M\""{a}nnist\""{o}, Tomi and Felfernig, Alexander and Maalej, Walid";;2018;ACM Digital Library;;;Background: Requirement engineering is often considered a critical activity in system development projects. The increasing complexity of software as well as number and heterogeneity of stakeholders motivate the development of methods and tools for improving large-scale requirement engineering. Aims: The empirical study presented in this paper aim to identify and understand the characteristics and challenges of a platform, as desired by experts, to support requirement engineering for individual stakeholders, based on the current pain-points of their organizations when dealing with a large number requirements. Method: We conducted a multiple case study with three companies in different domains. We collected data through ten semi-structured interviews with experts from these companies. Results: The main pain-point for stakeholders is handling the vast amount of data from different sources. The foreseen platform should leverage such data to manage changes in requirements according to customers' and users' preferences. It should also offer stakeholders an estimation of how long a requirements engineering task will take to complete, along with an easier requirements dependency identification and requirements reuse strategy. Conclusions: The findings provide empirical evidence about how practitioners wish to improve their requirement engineering processes and tools. The insights are a starting point for in-depth investigations into the problems and solutions presented. Practitioners can use the results to improve existing or design new practices and tools.;;10.1145/3239235.3240498;https://doi.org/10.1145/3239235.3240498;;;stakeholders productivity, case study, recommender systems, large-scale requirement engineering, user participation;Association for Computing Machinery;;;;;Rejected
A Systematic Literature Review on Factors Impacting Agile Adaptation in Global Software Development;Altaf, Areebah and Fatima, Urooj and Butt, Wasi Haider and Anwar, Muhammad Waseem and Hamdani, Maryum;;2019;ACM Digital Library;158–163;;Agile practices are considered as a major attraction for global software development (GSD) projects owing to its flexible nature. Beside the major benefits it offers to GSD, there are few challenges that hinders its implementation across the global software industry. This study contributes in constructing a systematic literature review for exploring the major factors impacting the agile adaptation at global level. We have identified and analyzed 28 research studies (2015-2019). These selected studies have revealed Scrum and Extreme Programming (XP) as the most popular agile practices that are adapted irrespective of the software type and organizational structure. Furthermore 5 tool categories are also presented i.e. modeling, requirement elicitation, data tracking tools etc. that are commonly used while practicing agile. The major findings of this study conclude that these agile methodologies are heavily adapted due to their iterative model and quick code delivery but basic challenges like poor customer involvement and lack of documentation are badly affecting its growth at global level.;;10.1145/3348445.3348463;https://doi.org/10.1145/3348445.3348463;;;scrum, global software development, XP, Agile practices;Association for Computing Machinery;;;;;Rejected
Empirical Study of Customer Communication Problem in Agile Requirements Engineering;Gizzatullina, Ilyuza;;2019;ACM Digital Library;1262–1264;;As Agile principles and values become an integral part of the soft-ware development culture, development processes experience significant changes. Requirements engineering, an individual phase occurring at the beginning of the traditional development, is distributed between various activities according to agile. However, how customer communication related problems are solved within the context of agile requirements engineering (RE)? Empirical study of that problem is done using 2 methods: systematic literature review and semi-structured interviews. Problems related to customer communication in agile RE are revealed and composed into patterns. Patterns are to be supplemented with the solutions in the further research.;;10.1145/3338906.3342511;https://doi.org/10.1145/3338906.3342511;;;case study, empirical research, customer collaboration, agile software development, requirements engineering;Association for Computing Machinery;;;;;Rejected
Coping Strategies for Temporal, Geographical and Sociocultural Distances in Agile GSD: A Case Study;"Szab\'{o}, D\'{a}vid Marcell and Stegh\""{o}fer, Jan-Philipp";;2019;ACM Digital Library;161–170;;Globally distributed software development teams face a number of challenges in their work that are associated with temporal, geographical and sociocultural distances. This case study explores the relationship between agile practices and these three distances in global software development. Data was collected by interviews and secondary data analysis. The results show that the three distances affect agile practices and the case team modifies the agile practices accordingly. Agile practices, in turn, affect the three distances by reducing communication, control and coordination challenges. Non-agile coping strategies such as specialised communication strategies also play an important role to alleviate the effects of the different distances.;;10.1109/ICSE-SEIP.2019.00025;https://doi.org/10.1109/ICSE-SEIP.2019.00025;;;global software development, distances, agile software development;IEEE Press;;;;;Rejected
A Mapping Study on Product Owners in Industry: Identifying Future Research Directions;"Unger-Windeler, Carolin and Kl\""{u}nder, Jil and Schneider, Kurt";;2019;ACM Digital Library;135–144;;Product Owners in the Scrum framework - respectively the On-site Customer when applying eXtreme Programming - have an important role in the development process. The Scrum Guide states that this role is responsible for the requirements and maximizing the value of the product. However, the implementation of this role depends on the individual, the organization and the team and is perceived as difficult in industry.Various research approaches provide insights in the applied PO role in industry - yet, a conclusive bigger picture of the studies and reports on this issue is missing. To fill this gap, we conducted a systematic mapping study. Our findings structure the research area of Product Owners in industry in terms of research topics and applied research methods.In total, we identified 30 contributions addressing seven research topics and generated consolidated answers for each of them. While some of those topics provide congruent results, others point to gaps in current research: So is the PO role in large-scale projects clearly defined as a group effort, but questions regarding the leadership and management responsibilities of POs remain unanswered.Also, the impact of external circumstances on the PO role is a question that is worth to answer in future work.;;10.1109/ICSSP.2019.00026;https://doi.org/10.1109/ICSSP.2019.00026;;;product owner, systematic mapping study, XP, agile software development, scrum, on-site customer;IEEE Press;;;;;Rejected
Impact of the Covid-19 Pandemic on the Requirement Engineering Process in Small Development Projects: A Case Study;Qahtani, Abdulrahman Mohammed;;2022;ACM Digital Library;1–6;;Requirement engineering (RE) is crucial for any software development project. It plays a vital role in the development lifecycle, as it lays the foundation for all subsequent development steps. Ensuring proper collection of project requirements makes the subsequent process, including design, development and testing, easier. The software industry has paid great attention to RE, including tools and techniques, starting with requirement elicitation. In the last couple of years, the Covid-19 pandemic has impacted processes, as meeting clients and stakeholders face-to-face and visiting them in their workplace has been made more difficult by social distancing, changing the techniques for requirement elicitation. Most software development companies rely on distant communication and alternative approaches to collect customers’ requirements to understand their needs, so they can reflect the reality in the work and try to persuade the customers that the developed solution meets their requirements. This study presents a case study of three educational projects at three different universities with different development requirements. The study compares the process before and during the pandemic to identify the challenges and features of the shift which occurred and measure its impact on number of requirements completed in both periods, as well as its impact on development project resources. This study's findings indicate increased requirements during the elicitation process and changes in human resources because of eliminating the practitioners over distance communication during the Covid-19 pandemic.;;10.1145/3551690.3551691;https://doi.org/10.1145/3551690.3551691;;;Covid-19, Software projects, Requirement engineering, Case study;Association for Computing Machinery;;;;;Rejected
Mining Dependencies in Large-Scale Agile Software Development Projects: A Quantitative Industry Study;Biesialska, Katarzyna and Franch, Xavier and Munt\'{e}s-Mulero, Victor;;2021;ACM Digital Library;20–29;;Context: Coordination in large-scale software development is critical yet difficult, as it faces the problem of dependency management and resolution. In this work, we focus on managing requirement dependencies that in Agile software development (ASD) come in the form of user stories. Objective: This work studies decisions of large-scale Agile teams regarding identification of dependencies between user stories. Our goal is to explain detection of dependencies through users’ behavior in large-scale, distributed projects. Method: We perform empirical evaluation on a large real-world dataset from an Agile software organization, provider of a leading software for Agile project management. We mine the usage data of the Agile Lifecycle Management (ALM) tool to extract large-scale development project data for more than 70 teams running over a five-year period. Results: Our results demonstrate that dependencies among user stories are not frequently observed (the problem affects around 10% of user stories), however, their implications on large-scale ASD are considerable. Dependencies have impact on software releases and increase work coordination complexity for members of different teams. Conclusion: Requirement dependencies undermine Agile teams’ autonomy and are difficult to manage at scale. We conclude that leveraging ALM monitoring data to automatically detect dependencies could help Agile teams address work coordination needs and manage risks related to dependencies in a timely manner.;;10.1145/3463274.3463323;https://doi.org/10.1145/3463274.3463323;;;Agile Software Development, Requirement Dependencies, Mining Software Repositories;Association for Computing Machinery;;;;;Rejected
A Pilot Study of Requirement Prioritization Techniques in Agile Software Development.;Kuengjai, Yadamanee and Ramingwong, Lachana;;2021;ACM Digital Library;146–151;;Requirement prioritization (RP) is a method for identifying the most critical requirements that should be immediately addressed. The results show how much all parties truly understand the requirements of the project. A trustworthy requirements prioritization process can ensure that the most important requirements are in line with business needs and should be developed first. The process results in the prioritized list of requirements that support decision making in release planning and subsequent activities to maximize software quality and customer satisfaction. This paper identified strengths and weaknesses of existing RP techniques. That leads to identification of factors in selecting the appropriate RP techniques for software projects. The recommendation can lead to improvement of the existing RP techniques. In addition, this paper presents the survey results of RP techniques used in participating software companies which developed software in Agile Software Development (ASD) context. The results reveal the challenges faced in their RP processes.;;10.1145/3494885.3494912;https://doi.org/10.1145/3494885.3494912;;;Requirement prioritization techniques, Agile Software Development;Association for Computing Machinery;;;;Primary studies;Rejected
A Systematic Literature Review of Improved Knowledge Management in Agile Software Development;Al Hafidz, Mochamad Umar and Sensuse, Dana Indra;;2019;ACM Digital Library;102–105;;Agile Software Development (ASD) is an adaptive software development approach that easily adapts to changing software requirements. It offers an advantage in time management but has disadvantages such as lack of software documentation and knowledge management. This research aims to understand more about research development in the knowledge management improvisation in Agile Software Development by collecting various themes of improved area and method used. To achieve this goal, 226 articles written in 2009-2018 are screened by using Kitchenham method to produce 15 best articles. This systematic literature review (SLR) results in a summary of improvements in knowledge management. The summary includes various approaches of several themes such as documentation, tools or technology, and others. The areas that need improvement are tools for supporting communication and documentation. The suggested improvement that has been proposed by researcher focuses mostly on artifact documentation, decision making, effort estimation and tools. In these studies, research question can be identified, analyzed, and answered.;;10.1145/3305160.3305192;https://doi.org/10.1145/3305160.3305192;;;agile software development, knowledge management, improvement, Systematic literature review;Association for Computing Machinery;;;;;Accepted
A Systematic Literature Review on Implementing Non-functional Requirements in Agile Software Development: Issues and Facilitating Practices;Jarz{\k{e}}bowicz, Aleksanderand Weichbroth, Pawe{\l};;2021;Springer Link;91--110;;"Agile Software Development methods have become a widespread approach used by the software industry. Non-functional requirements (NFRs) are often reported to be a problematic issue for such methods. We aimed to identify (within the context of Agile projects): (1) the issues (challenges and problems) reported as affecting the implementation of NFRs; and (2) practices that facilitate the successful implementation of NFRs. We conducted a systematic literature review and processed its results to obtain a comprehensive summary. We were able to present two lists, dedicated to issues and practices, respectively. Most items from both lists, but not all, are related to the requirements engineering area. We found out that the issues reported are mostly related to the common themes of: NFR documentation techniques, NFR traceability, elicitation and communication activities. The facilitating practices mostly cover similar topics and the recommendation is to start focusing on NFRs early in the project.";;10.1007/978-3-030-67084-9_6;;;;;Springer International Publishing;;;;;Accepted
Analysing Requirements in a Case Study of Pairing;Yu, Yijun and Sharp, Helen;;2011;ACM Digital Library;;;Agile software development methods suggest that sharing tasks between a pair of developers has advantages over letting them work as individuals. This effect has been observed in designing and coding tasks too. However, it is not yet known whether or not pairing on requirements engineering tasks could deliver a similar benefit at an early phase of software projects. Based on first-hand experience in pairing development of the OpenOME tool, we analyse the evolving stakeholder requirements using the i*/Tropos method. Our findings show that sharing tasks of different roles becomes more effective when those roles are played by one stakeholder, possibly due to smaller communication delay at a shorter distance.;;10.1145/2068783.2068787;https://doi.org/10.1145/2068783.2068787;;;pairing, i* methodology, open-source development, case study, agile software development;Association for Computing Machinery;;;;;Rejected
Software Development Processes for Games: A Systematic Literature Review;Osborne O'Hagan, Annand Coleman, Gerryand O'Connor, Rory V.;;2014;Springer Link;182--193;;This paper describes the methodology and results from a Systematic Literature Review (SLR) of the software processes used in game development. A total of 404 papers were analyzed as part of the review and the various process models that are used in industry and academia/research are presented. Software Process Improvement (SPI) initiatives for game development are discussed. The factors that promote or deter the adoption of process models, and implementing SPI in practice are highlighted. Our findings indicate that there is no single model that serves as a best practice process model for game development and it is a matter of deciding which model is best suited for a particular game. Agile models such as Scrum and XP are suited to the knowledge intensive domain of game development where innovation and speed to market are vital. Hybrid approaches such as reuse can also be suitable for game development where the risk of the upfront investment in terms of time and cost is mitigated with a game that has stable requirements and a longer lifespan.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
A Systematic Review of Game Design Methods and Tools;Almeida, Marcos Silvano Oritaand da Silva, Fl{\'a}vio Soares Corr{\^e}a;;2013;Springer Link;17--29;;The game designer's craft is very young if compared to filmmaking and software development. The knowledge base and formal techniques of these areas is far more comprehensive. Even after decades of evolution of the games production software, the range of design centered techniques and tools is still limited, as observed by many authors. Thereby, efforts have been made towards the establishment of game design formal methods. This paper presents a systematization over the contributions of researchers and designers towards conceptual and concrete tools. These efforts converge to two approaches: the build of a shared design vocabulary and a game design modeling language. While valuable, the existing implementations of these approaches are not mature enough to gain industry adepts, serving only as reference to future works. Moreover, it is needed to discover the designer's particular methods, which may contribute to-wards the constitution of a unified design toolbox.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
Global Software Development and Quality Management: A Systematic Review;Mishra, Deeptiand Mishra, Alokand Colomo-Palacios, Ricardoand Casado-Lumbreras, Cristina;;2013;Springer Link;302--311;;This paper presents a systematic literature review of global software development (GSD) and quality management aspects. The main focus is to highlight the current research and practice direction in these areas. The results have been limited to peer-reviewed conference papers and journal articles, published between 2000 and 2011. The analysis reports that major studies have been performed in quality and process management, while verification and validation issues of GSD can only get limited attention among researchers. This indicates the need for future research (quantitative and qualitative) in these areas.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
Distances between Requirements Engineering and Later Software Development Activities: A Systematic Map;Bjarnason, Elizabeth;;2013;Springer Link;292--307;;[Context and Motivation] The main role of requirements engineering (RE) is to guide development projects towards implementing products that will appeal to customers. To effectively achieve this RE needs to be coordinated with and clearly communicated to the later software development activities. [Question/Problem] Communication gaps between RE and other development activities reduce coordination and alignment, and can lead to project delays and failure to meet customer needs. [Principle ideas/results] The main hypothesis is that coordination is enhanced by proximity to RE roles and artefacts, and that distances to later activities increase the effort needed to align requirements with other development work. Thirteen RE-related distances have been identified through a systematic map of existing research. [Contribution] Reported distances are mapped according to research type, RE activity and later software development activities. The results provide an overview of RE distances and can be used a basis for defining a theoretical framework.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
A Review of Prominent Work on Agile Processes Software Process Improvement and Process Tailoring Practices;Akbar, Rehanand Hassan, Mohd Fadziland Abdullah, Azrai;;2011;Springer Link;571--585;;Global software development has changed the overall software development practices. It has introduced various new software development processes and methodologies. A new generation of processes has increasingly replaced the traditional software engineering practices. Emerging practices such as agile based methodologies, software process tailoring, process improvement and management approaches have gained much attention during the recent years. Software engineering researchers have produced a number of good quality works in such areas. In this paper, a review of major contributions of the researchers on various aspects of software development processes is presented. Specifically, the analysis on different approaches of process improvement and tailoring is critically discussed in the paper. This research provides guidelines to the researchers on future research directions. The research emphasizes on the need of industry oriented practical approaches of software development to meet the challenges of global software development.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
From Manufacture to Software Development: A Comparative Review;Katayama, Eduardo T.and Goldman, Alfredo;;2011;Springer Link;88--101;;Agile Software Development methods have caught the attention of software engineers and researchers worldwide, but scientific research on the subject still remains quite scarce. The aim of this study is to organize and facilitate future works on Agile methods derived from manufacturing industry. This comparative review is performed from the standpoint of using Abrahamsson et al.'s analytical perspectives: project management support, life-cycle coverage, type of practical guidance, adaptability in actual use, type of research objectives and existence of empirical evidence. Our results show that Agile methods derived from manufacturing industry cover various phases of the life-cycle and that most fail to provide adequate project management support. To describe the status of research on Agile methods derived from manufacturing, we conducted a literature search in the ISI Web of Science. After ten years of application empirical evidence remains quite limited.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
Software Process Simulation Modeling: An Extended Systematic Review;Zhang, Heand Kitchenham, Barbaraand Pfahl, Dietmar;;2010;Springer Link;309--320;;Software Process Simulation Modeling (SPSM) research has increased in the past two decades, especially since the first ProSim Workshop held in 1998. Our research aims to systematically assess how SPSM has evolved during the past 10 years in particular whether the purposes for SPSM, the simulation paradigms, tools, research topics, and the model scopes and outputs have changed. We performed a systematic literature review of the SPSM research in two subsequent stages, and identified 156 relevant studies in four categories. This paper reports the review process of the second stage and the preliminary results by aggregating studies from the two stages. Although the load of SPSM studies was dominated in ProSim/ICSP community, the outside research presented more diversity in some aspects. We also perceived an immediate need for refining and updating the reasons and the classification scheme for SPSM introduced by Kellner, Madachy and Raffo (KMR).;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
Distributed Information System Development: Review of Some Management Issues;Mishra, Deeptiand Mishra, Alok;;2009;Springer Link;282--291;;Due to the proliferation of the Internet and globalization, distributed information system development is becoming popular. In this paper we have reviewed some significant management issues like process management, project management, requirements management and knowledge management issues which have received much attention in distributed development perspective. In this literature review we found that areas like quality and risk management issues could get only scant attention in distributed information system development.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
Where Is the Proof? - A Review of Experiences from Applying MDE in Industry;Mohagheghi, Parastooand Dehlen, Vegard;;2008;Springer Link;432--443;;Model-Driven Engineering (MDE) has been promoted as a solution to handle the complexity of software development by raising the abstraction level and automating labor-intensive and error-prone tasks. However, few efforts have been made at collecting evidence to evaluate its benefits and limitations, which is the subject of this review. We searched several publication channels in the period 2000 to June 2007 for empirical studies on applying MDE in industry, which produced 25 papers for the review. Our findings include industry motivations for investigating MDE and the different domains it has been applied to. In most cases the maturity of third-party tool environments is still perceived as unsatisfactory for large-scale industrial adoption. We found reports of improvements in software quality and of both productivity gains and losses, but these reports were mainly from small-scale studies. There are a few reports on advantages of applying MDE in larger projects, however, more empirical studies and detailed data are needed to strengthen the evidence. We conclude that there is too little evidence to allow generalization of the results at this stage.;;;;;;;Springer Berlin Heidelberg;;;;;Rejected
Customer Feedback and Data Collection Techniques in Software R{\&}D: A Literature Review;"Fabijan, Aleksanderand Olsson, Helena Holmstr{\""o}mand Bosch, Jan";;2015;Springer Link;139--153;;In many companies, product management struggles in getting accurate customer feedback. Often, validation and confirmation of functionality with customers takes place only after the product has been deployed, and there are no mechanisms that help product managers to continuously learn from customers. Although there are techniques available for collecting customer feedback, these are typically not applied as part of a continuous feedback loop. As a result, the selection and prioritization of features becomes far from optimal, and product deviates from what the customers need. In this paper, we present a literature review of currently recognized techniques for collecting customer feedback. We develop a model in which we categorize the techniques according to their characteristics. The purpose of this literature review is to provide an overview of current software engineering research in this area and to better understand the different techniques that are used for collecting customer feedback.;;;;;;;Springer International Publishing;;;;;Rejected
Crossing the chasm: a 'tube-map' for agent-based social simulationof policy scenarios in spatially-distributed systems;J. Gareth Polhill andJiaqi Ge andMatthew P. Hare andKeith B. Matthews andAlessandro Gimona andDouglas Salt andJagadeesh B. Yeluripati;GeoInformatica;2019;Springer Link;169--199;23;None;;10.1007/s10707-018-00340-z;https://doi.org/10.1007/s10707-018-00340-z;;;;;;;;;Rejected
Business Modeling and Flexibility in Software-Intensive Product Development - A Systematic Literature Review;Wilson, Magnusand Wnuk, Krzysztof;;2018;Springer Link;292--304;;Continuously achieving and maintaining competitive advantage is the critical survival factor for software-intensive product development companies undergoing digitalization transformation. These companies remain uncertain if investments in business modeling is sufficient to cope with rapidly changing business models, technology, and customer demands. We conducted a Systematic Literature Review using the snowballing methodology to explore the effects of business modeling on business flexibility and variability in the realization. Our results confirm a research gap regarding translating desired strategic flexibility into business options that can efficiently and effectively be implemented using software-based variability in the realization. We conclude that more research is needed consolidating business model innovation, experimentation, and operationalization. Building on theories for learning and knowledge creation, we propose a framework for describing change and analyzing strategic, tactical and operational choices in business model experimentation.;;;;;;;Springer International Publishing;;;;;Rejected
Agile Methodologies in Education: A Review;Salza, Pasqualeand Musmarra, Paoloand Ferrucci, Filomena;;2019;Springer Link;25--45;;One of the main challenges faced by teachers in education, both at K-12 and academy levels, is related to the need to attract and retain the attention and the commitment by students, and ensure they achieve the required learning outcomes. Thus, new and exciting methodologies were developed to support teachers. Many of them have been inspired by approaches devised for Agile software development. This chapter aims to review the main Agile methodologies that have inspired educational approaches and to provide a description of the features retained in the educational context. Several experiences reported in the literature are also described.;;10.1007/978-981-13-2751-3_2;https://doi.org/10.1007/978-981-13-2751-3_2;;;;Springer Singapore;;;;;Rejected
A Review of Use Case-Based Development Effort Estimation Methods in the System Development Context;Nhung, Ho Le Thi Kimand Hoc, Huynh Thaiand Hai, Vo Van;;2019;Springer Link;484--499;;Software Effort Estimation -- (further only SEE), is a critical factor in the early phase of the software development life-cycle and hence - the success or failure of a software project depends on the accuracy of the estimated effort. In recent years, Use Cases for Software Effort Estimation has gained wide-ranging popularity. It is suitable for Effort Estimation in the early stages of software development since it helps project managers to bid on projects, and to efficiently allocate resources. It has attracted many researchers' interest in Use Case-based approaches due to the promising results obtained - including their early applicability. In this article, we look into a systematic review of previously published materials in order to summarise various Software Effort Estimation -- (further only SEE), models and developments, based on Use Case Point. The study also provides insights into the effects of all factors that contributed to the Use Case size as an estimation for effort. Apart from this, the paper also provides standard criteria to evaluate the models' accuracy and effectiveness.;;;;;;;Springer International Publishing;;;;;Rejected
Adopting distributed pair programming as an effective team learning activity: a systematic review;Xu, Fan and Correia, Ana-Paula;Journal of Computing in Higher Education;2022;Springer Link;1--30;;None;;;;;;;Springer;;;;;Rejected
The Moderating Effect of Management Review in Enhancing Software Reliability:{A} Partial Least Square Approach;Vibha Verma andAbhishek Tandon andAnu G. Aggarwal;Inf. Syst. Frontiers;2022;Springer Link;1845--1863;24;None;;10.1007/s10796-021-10209-6;https://doi.org/10.1007/s10796-021-10209-6;;;;;;;;;Rejected
Empirical evidence in global software engineering: a systematic review;Darja Smite andClaes Wohlin andTony Gorschek andRobert Feldt;Empir. Softw. Eng.;2010;Springer Link;91--118;15;None;;10.1007/s10664-009-9123-y;https://doi.org/10.1007/s10664-009-9123-y;;;;;;;;;Rejected
Software process improvement in small and medium software enterprises:a systematic review;Francisco J. Pino andF{\'{e}}lix Garc{\'{\i}}a andMario Piattini;Softw. Qual. J.;2008;Springer Link;237--261;16;None;;10.1007/s11219-007-9038-z;https://doi.org/10.1007/s11219-007-9038-z;;;;;;;;;Rejected
Practitioners' experiences with model-driven engineering: a meta-review;Charlotte Verbruggen andMonique Snoeck;Softw. Syst. Model.;2022;Springer Link;111--129;22;None;;10.1007/s10270-022-01020-1;https://doi.org/10.1007/s10270-022-01020-1;;;;;;;;;Rejected
Automatic Code Generation of User-centered Serious Games: {A} Decadein Review;P. O. Silva{-}V{\'{a}}squez andV. Y. Rosales{-}Morales andE. Ben{\'{\i}}tez{-}Guerrero;Program. Comput. Softw.;2022;Springer Link;685--701;48;None;;10.1134/S0361768822080187;https://doi.org/10.1134/S0361768822080187;;;;;;;;;Rejected
Systematic review of web application security development model;Bala Musa Shuaibu andNorita Md Norwawi andMohd Hasan Selamat andAbdulkareem Al{-}Alwani;Artif. Intell. Rev.;2015;Springer Link;259--276;43;None;;10.1007/s10462-012-9375-6;https://doi.org/10.1007/s10462-012-9375-6;;;;;;;;;Rejected
A systematic literature review of empirical research on quality requirements;Thomas Olsson andS{\'{e}}verine Sentilles andEfi Papatheocharous;Requir. Eng.;2022;Springer Link;249--271;27;None;;10.1007/s00766-022-00373-9;https://doi.org/10.1007/s00766-022-00373-9;;;;;;;;;Rejected
Agile methods for embedded systems development - a literature reviewand a mapping study;"Matti Kaisti andVille Rantala andTapio Mujunen andSami Hyrynsalmi andKaisa K{\""{o}}nn{\""{o}}l{\""{a}} andTuomas M{\""{a}}kil{\""{a}} andTeijo Lehtonen";{EURASIP} J. Embed. Syst.;2013;Springer Link;15;2013;None;;10.1186/1687-3963-2013-15;https://doi.org/10.1186/1687-3963-2013-15;;;;;;;;;Rejected
Functional Requirement-Based Test Case Prioritization in RegressionTesting: {A} Systematic Literature Review;Muhammad Hasnain andMuhammad Fermi Pasha andImran Ghani andSeung Ryul Jeong;{SN} Comput. Sci.;2021;Springer Link;421;2;None;;10.1007/s42979-021-00821-3;https://doi.org/10.1007/s42979-021-00821-3;;;;;;;;;Accepted
Empirical evidence on the link between object-oriented measures andexternal quality attributes: a systematic literature review;"Ronald Jabangwe andJ{\""{u}}rgen B{\""{o}}rstler andDarja Smite andClaes Wohlin";Empir. Softw. Eng.;2015;Springer Link;640--693;20;None;;10.1007/s10664-013-9291-7;https://doi.org/10.1007/s10664-013-9291-7;;;;;;;;;Rejected
Data-Driven Requirements Elicitation: {A} Systematic Literature Review;Sachiko Lim andAron Henriksson andJelena Zdravkovic;{SN} Comput. Sci.;2021;Springer Link;16;2;None;;10.1007/s42979-020-00416-4;https://doi.org/10.1007/s42979-020-00416-4;;;;;;;;;Accepted
Assessing the maturity of a research area: bibliometric review andproposed framework;Heather Keathley{-}Herring andEileen M. Van Aken andFernando Gonzalez{-}Aleu andFernando Deschamps andGeert Letens andPablo Cardenas Orlandini;Scientometrics;2016;Springer Link;927--951;109;None;;10.1007/s11192-016-2096-x;https://doi.org/10.1007/s11192-016-2096-x;;;;;;;;;Rejected
A systematic literature review on quality criteria for agile requirements specifications;Petra Heck andAndy Zaidman;Softw. Qual. J.;2018;Springer Link;127--160;26;None;;10.1007/s11219-016-9336-4;https://doi.org/10.1007/s11219-016-9336-4;;;;;;;;;Accepted
Search. Review. Repeat? An empirical study of threats to replicating{SLR} searches;"Jacob Kr{\""{u}}ger andChristian Lausberger andIvonne von Nostitz{-}Wallwitz andGunter Saake andThomas Leich";Empir. Softw. Eng.;2020;Springer Link;627--677;25;None;;10.1007/s10664-019-09763-0;https://doi.org/10.1007/s10664-019-09763-0;;;;;;;;;Rejected
A systematic literature review of requirements engineering education;Daun, Marian and Grubb, Alicia M and Stenkova, Viktoria and Tenbergen, Bastian;Requirements Engineering;2022;Springer Link;1--31;;None;;;;;;;Springer;;;;;Rejected
A Comprehensive Review of Student Data Management System;Dsouza, Ozwin Dominicand Tanvith Shenoy, B.and Singh, Mrinaland Kottary, Pratiksha U.and Agarwala, Shringar;;2022;Springer Link;813--822;;Student data management system deals with the storing of attendance and exam mark data. It gives the class attendance summary in the form of absence or presence in a particular class. The faculty will be provided with login credentials to maintain class data. When it comes to analytics, a consolidated student report will be generated typically once a month. Off late due to the advent of the accreditation process in education, it is crucial to maintain a reliable, user-friendly database of students to carry out further analysis. That is where this student data management system comes into the picture. In this paper, a comprehensive study is been made on the available tools/software available for student data management. An improved methodology is also been proposed in the end.;;;;;;;Springer Singapore;;;;;Rejected
Mining textual requirements to assist architectural software design:a state of the art review;Agustin Casamayor andDaniela Godoy andMarcelo Campo;Artif. Intell. Rev.;2012;Springer Link;173--191;38;None;;10.1007/s10462-011-9237-7;https://doi.org/10.1007/s10462-011-9237-7;;;;;;;;;Rejected
Game development software engineering process life cycle: a systematicreview;Saiqa Aleem andLuiz Fernando Capretz andFaheem Ahmed;J. Softw. Eng. Res. Dev.;2016;Springer Link;6;4;None;;10.1186/s40411-016-0032-7;https://doi.org/10.1186/s40411-016-0032-7;;;;;;;;;Rejected
Bayesian networks for enhancement of requirements engineering: a literaturereview;Isabel Mar{\'{\i}}a del {\'{A}}guila andJos{\'{e}} del Sagrado;Requir. Eng.;2016;Springer Link;461--480;21;None;;10.1007/s00766-015-0225-3;https://doi.org/10.1007/s00766-015-0225-3;;;;;;;;;Rejected
Aspects of software quality applied to the process of agile softwaredevelopment: a systematic literature review;Gloria Arcos{-}Medina andDavid Mauricio;Int. J. Syst. Assur. Eng. Manag.;2019;Springer Link;867--897;10;None;;10.1007/s13198-019-00840-7;https://doi.org/10.1007/s13198-019-00840-7;;;;;;;;;Rejected
A systematic review and analytical evaluation of security requirements engineering approaches;Anwar Mohammad, Malik Nadeem and Nazir, Mohammed and Mustafa, Khurram;Arabian Journal for Science and Engineering;2019;Springer Link;8963--8987;44;None;;;;;;;Springer;;;;;Rejected
A systematic literature review of modern software visualization;Noptanit Chotisarn andLeonel Merino andXu Zheng andSupaporn Lonapalawong andTianye Zhang andMingliang Xu andWei Chen;J. Vis.;2020;Springer Link;539--558;23;None;;10.1007/s12650-020-00647-w;https://doi.org/10.1007/s12650-020-00647-w;;;;;;;;;Rejected
A Novel Approach for Improving Security in Software Development in Small Software Firms: A Literature Review;Behera, Prakash Chandraand Dash, Chinmayaand Pareek, Piyush Kumar;;2021;Springer Link;689--698;;Developing secure software is really a challenge now for all types of software industry like small or big industry. Security is an essential part of any type of software development. There is a number of drawbacks to our existing system of software development starting from conceptualization to the last phase of an SDLC Software security does not depend on maintaining security in each step of software development but also it depends on the technology we are using for maintaining the security of the software. In this paper, we did a literature review to identify the basic security challenges during development of a software and also pointing out research gap. Here, around sixty research articles are reviewed related to software issues or software security.;;;;;;;Springer Singapore;;;;;Rejected
Non-functional Requirements Engineering Questionnaire: Novel Visions and Review of Literature;Handa, Nainaand Sharma, Aniland Gupta, Amardeep;;2021;Springer Link;799--808;;The aim of this research study is to evaluate the non-functional requirements (NFRs) of educational websites from the usability perspective. The online questionnaire is used for gathering and analyzing the NFRs. The non-functional questionnaires are filled by the 52 software developers. The questionnaire contains different questions related to different factors of ISO 25010. The different NFRs that are related to the usability are considered accessibility, orphan pages, irritating elements, placement and content of sitemap, website content updating, download time, hyperlink description, design consistency and compatibility of website with different web browsers to mention a few. The different views that are given by software developers on the basis of these questions are discussed. We have also added the suggestions column in questionnaire.;;;;;;;Springer Singapore;;;;;Rejected
Agile Methods and Cyber-Physical Systems Development---A Review with Preliminary Analysis;Ahmad, Muhammad Ovais;;2020;Springer Link;274--285;;The software companies are using Agile methods and practices to tackle challenges in the rapidly changing environments and increasingly complex software systems. However, companies developing cyber physical systems (CPS) are still infancy in the use of Agile methods and hesitate to adopt. This systematic literature review was conducted in order to analyze the current trends of Agile methods use for CPS development. The search strategy resulted in 101 papers, of which 15 were identified as primary studies relevant to our research. The results show growing trend of Agile processes and Scrum is widely used reported for CPS development. The primary studies also exhibits a growing interest in teaching Agile in embedded systems, CPS and other engineering degree programs. The reported challenges included synchronization of software and hardware development, software and hardware developers use different vocabulary, lack of visibility and track of software releases and project progress. Additionally, lesson learned were extracted from the primary studies for guiding the practitioners interested in adopting Agile for CPS development.;;;;;;;Springer Singapore;;;;;Rejected
Establishing the State of the Art of Frameworks, Methods and Methodologies Focused on Lightening Software Process: A Systematic Literature Review;Miramontes, Juanand Mu{\~{n}}oz, Mirnaand Calvo-Manzano, Jose A.and Corona, Brisia;;2016;Springer Link;71--85;;"There are several models used in the software process improvement such as CMMI and ISO/IEC 15504 that provide advantages to software organizations, like their improvement in ability and maturity which is reflected in their competitiveness. However, most of the time they are not properly implemented, demanding too many resources and long-term commitments, hindering its implementation in software organizations. Moreover, a properly implementation of a model or standard, involves not only the definition of processes, but introducing the organizations in the development of a continuous process improvement culture. In this context, a feasible way to achieve continuous process improvement is the optimization of processes through their lightening. This paper presents the results of a systematic review method in order to establish the state of art for lightening software process, focusing on three aspects: (1) frameworks, methods and methodologies; (2) targeted processes; and (3) strategies.";;;;;;;Springer International Publishing;;;;;Accepted
Integration of Usability and Agile Methodologies: A Systematic Review;Zapata, Claudia;;2015;Springer Link;368--378;;Nowadays, Agile Methodologies are widely used and accepted among software development teams. These methodologies allow speeding up the development process while permitting less documentation and more flexible processes. Moreover, Usability is a measure of software quality and has become more important with the changes that users have experienced. This paper aims to answer how usability and agile methodologies have been integrated into the various stages of software development through a systematic review.;;;;;;;Springer International Publishing;;;;;Rejected
Systematic Literature Review on the Characteristics of Agile Project Management in the Context of Maturity Models;Chagas, Larissa Fernandesand de Carvalho, Daniel Diasand Lima, Adailton Magalh{\~a}esand Reis, Carla Alessandra Lima;;2014;Springer Link;177--189;;Popularity of Agile Methods is growing up and along with this popularity is also growing the interest in adopting these methods in conjunction with maturity models, like CMMI. Dozens of reports about this topic can be found with different results. Therefore, a Systematic Literature Review was conducted with the goal of identifying characteristics of agile project management in organizations using agile methods and maturity models. We accepted 34 primary studies published from 2001 to 2013. The results show that the area still lacks details on how to perform the software development activities, what techniques can be used to meet issues not directly addressed by agile methods without losing the desired agility and what tools can be used to facilitate the combination of approaches.;;;;;;;Springer International Publishing;;;;;Rejected
A Systematic Literature Review of Requirements Modeling and Analysis for Self-adaptive Systems;Yang, Zhuoqunand Li, Zhiand Jin, Zhiand Chen, Yunchuan;;2014;Springer Link;55--71;;[Context and motivation] Over the last decade, researchers and engineers have developed a vast body of methodologies and technologies in requirements engineering for self-adaptive systems. Although existing studies have explored various aspects of this topic, few of them have categorized and evaluated these areas of research in requirements modeling and analysis. [Question/Problem] This review aims to investigate what modeling methods, RE activities, requirements quality attributes, application domains and research topics have been studied and how well these studies have been conveyed. [Principal ideas/results] We conduct a systematic literature review to answer the research questions by searching relevant studies, appraising the quality of these studies and extracting available data. The results are derived by synthesizing the extracted data with statistical methods. [Contributions] This paper provides an updated review of the research literature, enabling researchers and practitioners to better understand the research trends in these areas and identify research gaps which need to be further studied.;;;;;;;Springer International Publishing;;;;;Rejected
A systematic mapping study on security in agile requirements engineering;Villamizar, Hugo and Kalinowski, Marcos and Viana, Marx and Fernández, Daniel Méndez;Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018;2018;Scopus;454 – 461;;[Background] The rapidly changing business environments in which many companies operate is challenging traditional Requirements Engineering (RE) approaches. This gave rise to agile approaches for RE. Security, at the same time, is an essential non-functional requirement that still tends to be difficult to address in agile development contexts. Given the fuzzy notion of 'agile' in context of RE and the difficulties of appropriately handling security requirements, the overall understanding of how to handle security requirements in agile RE is still vague. [Objective] Our goal is to characterize the publication landscape of approaches that handle security requirements in agile software projects. [Method] We conducted a systematic mapping to outline relevant work and contemporary gaps for future research. [Results] In total, we identified 21 studies that met our inclusion criteria, dated from 2005 to 2017. We found that the approaches typically involve modifying agile methods, introducing new artifacts (e.g., extending the concept of user story to abuser story), or introducing guidelines to handle security issues. We also identified limitations of using these approaches related to environment, people, effort and resources. [Conclusion] Our analysis suggests that more effort needs to be invested into empirically evaluating the existing approaches and that there is an avenue for future research in the direction of mitigating the identified limitations. © 2018 IEEE.;Conference paper;10.1109/SEAA.2018.00080;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057164164&doi=10.1109%2fSEAA.2018.00080&partnerID=40&md5=988db072a2f04ac3b77c5f3068ae37a1;;"Agile methods; Requirements engineering; Security; Systematic mapping study";"Application programs; Cryptography; Mapping; Requirements engineering; Agile development; Agile methods; Changing business environment; Non-functional requirements; Security; Security requirements; Systematic mapping; Systematic mapping studies; Engineering research";;;English;"Cited by: 25; All Open Access, Green Open Access";;Accepted
Understanding challenging situations in agile quality requirements engineering and their solution strategies: Insights from a case study;Alsaqaf, Wasim and Daneva, Maya and Wieringa, Roel;Proceedings - 2018 IEEE 26th International Requirements Engineering Conference, RE 2018;2018;Scopus;274 – 285;;In the last few years, agile development methods are getting increasingly popular in large-scale distributed contexts. Despite this popularity, empirical studies have reported several challenges that large-scale distributed agile projects face regarding the implementation of quality requirements. However, there is little known about the mechanisms behind those challenges and the practices currently used by agile practitioners to adequately assure the implementation of quality requirements in distributed context. To look deeper into this, we performed a qualitative multi-case study in six different organizations in the Netherlands. Our multi-case study included seventeen semi-structured open-ended in-depth interviews with agile practitioners of different background and expertise. The analysis of the collected data re-sulted in identifying eleven mechanisms that could be associated with the previously published list of challenges. Moreover, the analysis uncovered nine practices used by agile practitioners as solutions to the challenges, in order to ensure the implementation of quality requirements. Last, we have mapped the identified mechanisms and practices to the previously identified challenges to get insight into the possible cause and mitigation of those challenges. © 2018 IEEE.;Conference paper;10.1109/RE.2018.00035;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056892700&doi=10.1109%2fRE.2018.00035&partnerID=40&md5=2caae9160afd6962a22d95c077239067;;"Agile; Case study; Empirical research method; Interviews; Quality requirements; Requirements engineering";"Requirements engineering; Agile; Agile development methods; Empirical research method; Empirical studies; In-depth interviews; Interviews; Quality requirements; Solution strategy; Quality control";;;English;Cited by: 17;;Rejected
Patterns of collaboration driven by requirements in agile software development teams: Findings from a multiple case study;Inayat, Irum and Marczak, Sabrina and Salim, Siti Salwah and Damian, Daniela;Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics);2017;Scopus;131 – 147;10153 LNCS;Context and motivation: Due to their emphasis on communication, agile methods and requirements engineering activities seem to mutually support each other in software development. Question/Problem: But how do agile teams manage the collaboration required to perform requirements related activities, especially when their members work from geographically distributed locations? Principle Ideas/Results: In this paper we investigated the requirements-driven collaboration translated as communication and awareness among agile teams from four distributed projects. We identified some collaboration patterns that are similar to those reported in the literature for the traditional, non-agile teams, but also some more specific to agile teams. For instance, we found that the number of team members involved in actual collaboration is different than the number of assigned members, that little communication exists with members outside the team, and that project managers are still key players in knowledge sharing patterns. We also found that distance does not matter for knowledge management, that familiarity from past projects facilitates awareness, and communication is still an important source of awareness. Contributions: Our results suggest an exploration on the role of project managers as the key players in agile teams. Also, the correlation of distance and communication needs to be investigated in largely distributed agile teams. © Springer International Publishing AG 2017.;Conference paper;10.1007/978-3-319-54045-0_10;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85013984725&doi=10.1007%2f978-3-319-54045-0_10&partnerID=40&md5=f2cf14e428920614e1e0be814526d5d9;;"Agile development; Case study; Empirical research; Requirements-driven collaboration; Social network analysis";"Computer software selection and evaluation; Human resource management; Knowledge management; Managers; Requirements engineering; Social networking (online); Software design; Agile development; Agile software development; Collaboration patterns; Distributed projects; Empirical research; Knowledge-sharing; Multiple-case study; Requirements-driven collaboration; Software engineering";;;English;Cited by: 4;;Rejected
Evaluating a novel agile requirements engineering method: A case study;Tenso, Tanel and Norta, Alex and Vorontsova, Irina;ENASE 2016 - Proceedings of the 11th International Conference on Evaluation of Novel Software Approaches to Software Engineering;2016;Scopus;156 – 163;;The use of agile methods during software development is a standard practice and user stories are an established way of breaking complex system requirements into smaller subsets. However, user stories do not suffice for understanding the bigger picture of system goals. While methods exists that try to solve this problem, they lack visual tool support and are too heavy for smaller projects. This article fills the gap by evaluating a novel agile agent-oriented modelling (AAOM) method for requirements engineering. The AAOM-method comprises a visual approach to agile requirements engineering that links goal-model creation techniques taken from agentoriented modelling and connects goals intuitively to user stories. A case study based evaluation explores the applicability of AAOM for requirements engineering in an agile software development process. Copyright © 2016 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.;Conference paper;10.5220/0005829701560163;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979543876&doi=10.5220%2f0005829701560163&partnerID=40&md5=23adfe822cd1ba505109305a460516fb;;"Agile; Goals; Modelling; Requirements engineering; Visualization";"Agile manufacturing systems; Flow visualization; Models; Requirements engineering; Agent-oriented modelling; Agile; Agile methods; Agile software development process; Goals; Standard practices; System requirements; Visual tool supports; Software design";;;English;Cited by: 6;;Rejected
Light-weight development method: A case study;Chen, Jim Q. and Phan, Dien and Wang, B. and Vogel, Douglas R.;Proceedings - ICSSSM'07: 2007 International Conference on Service Systems and Service Management;2007;Scopus;;;The Internet technology has changed the way software applications are designed, built, and distributed. The technology enables us to deliver applications easily and quickly, and provides more efficient methods to do maintenance and updates. Web application developments present specific challenges to developers, such as content-rich, security, volatile system requirements, application scalability, rapidly evolving development tools, and ever increasing demand for fast system deployment by customers. These add up to the difficulty of software project planning, budgeting, and controlling. In recent years a number of new development methodologies, called agile methodologies, have become increasingly popular in the software industry. This paper reviews several major agile methodologies, compares them with traditional methods, and proposes a selection framework for business. The paper also provides a case study of an early attempt to use agile development at Intel. The success at Intel proved that agile methods can be used to develop successful web-based applications at large organizations. © 2007 IEEE.;Conference paper;10.1109/ICSSSM.2007.4280199;https://www.scopus.com/inward/record.uri?eid=2-s2.0-40549104765&doi=10.1109%2fICSSSM.2007.4280199&partnerID=40&md5=e7c03accf0ef4e1e42b7b82da11174ef;;"Agile methodologies; Extreme programming; Light-weight development; Software development";"Budget control; Computer programming; Project management; Requirements engineering; Software design; Web services; Extreme programming; Light weight development; Software project planning; Volatile system requirements; Internet";;;English;Cited by: 3;;Rejected
Agile requirements engineering for a social insurance for occupational risks organization: A case study;Pichler, Mario and Rumetshofer, Hildegard and Wahler, Wilhelm;Proceedings of the IEEE International Conference on Requirements Engineering;2006;Scopus;251 – 256;;"The objective of this paper is to report on the challenges and experiences gained during a three years multidisciplinary software development project in the insurance domain, focusing on the employed requirements process. Although, there has been consensus on an agile development process among the project partners, this approach stands in some contrast to the traditional (standardized or regulated) development processes commonly employed in the insurance domain, or general, in the public sector. The lessons learned of applying an agile requirements process under the conditions of traditional processes at the customer's site; geographically distributed offices of the customer and development team; diverse interests of involved customers' departments, administrative and operational staff; limited availability of field workers etc. are provided as recommendations for other research and development institutions. Thereby, the viewpoint of each project partner, including the customer's perspective, is described. © 2006 IEEE.";Conference paper;10.1109/RE.2006.8;https://www.scopus.com/inward/record.uri?eid=2-s2.0-34848847341&doi=10.1109%2fRE.2006.8&partnerID=40&md5=c823498ebabc1062cf619c32ecf9ee0d;;;"Agile manufacturing systems; Customer satisfaction; Occupational risks; Project management; Software engineering; Agile requirements engineering; Occupational risks organization; Operational staff; Software development project; Requirements engineering";;;English;Cited by: 15;;Rejected
Ordering the product backlog in agile software development projects: A systematic literature review;Silvax, Ana and Silva, André and Araújo, Thalles and Willamy, Renan and Ramos, Felipe and Costa, Alexandre and Perkusich, Mirko and Dilorenzo, Ednaldo;Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE;2017;Scopus;74 – 80;;Recently, agile software development methods have attracted the attention of academic and industrial domains. Unlike traditional approaches, agile methods focus on rapid delivery of business value to customers through fast delivery of working code. Therefore, requirement prioritization is considered a crucial process in this context, since there is the need to identify which requirements must be developed first, based on stakeholders preferences and taking into account business and technical challenges such as dependencies of tasks, developers skills, limitation of budget, etc. In Scrum, the most popular agile method, requirement management is done by maintaining the product backlog, which contains the list of functionalities that must be developed. Although some works conducted systematic reviews on the topic of agile requirement engineering, to the best of our knowledge, there is no study that reviewed the specific subject of ordering the product backlog in agile projects. Therefore, in this work, we conducted a Systematic Literature Review of studies on this topic published up to (and including) 2016 through a database search, to identify and analyze factors and techniques used to accomplish the task of ordering the product backlog in agile projects. In total, we evaluated 1556 papers, of which 13 reported on the subject of study.;Conference paper;10.18293/SEKE2017-007;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029511826&doi=10.18293%2fSEKE2017-007&partnerID=40&md5=69bfed8a86002f907db665e708682ddf;;"Agile software development; Product backlog; Requirements management; Requirements prioritization; Systematic literature review";"Budget control; Knowledge engineering; Search engines; Software design; Agile software development; Product backlog; Requirements management; Requirements prioritization; Systematic literature review; Software engineering";;;English;"Cited by: 3; All Open Access, Bronze Open Access";;Rejected
Classification of requirements elicitation practices in agile developments: A systematic mapping;Carrizo, Dante and Rojas, Jorge;Ingeniare;2016;Scopus;654 – 662;24;Agile development methods prioritize the requirements for incremental delivery functionality. So the elicitation of these requirements must select these main features and specify them efficiently. However, there are still no registers that drive practices in this way. This work aims to identify as many elicitation practices in agile developments of scientific literature and classify them according to the main focus of each guideline. For this, it carries out a systematic mapping over main databases in this area. The results obtained show insufficient reporting guidelines for agile developers. Primary studies are mainly theoretical, this means that the requirements for elicitation practices in agile methods still require further empirical validation to be accepted. The definition of ontology is absolutely necessary, regarding elicitation in agile developments, to facilitate the identification of useful practices for obtaining successful products. © 2016, Universidad de Tarapaca. All rights reserved.;Article;10.4067/S0718-33052016000400010;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85005949159&doi=10.4067%2fS0718-33052016000400010&partnerID=40&md5=0fc2328849fe5672c92835d2a717af6e;;"Agile methods; Elicitation; Practices; Software requirements; Systematic mapping";;;;Spanish;"Cited by: 3; All Open Access, Gold Open Access, Green Open Access";Papers that were not written in English.;Rejected
An evidence-based study of agile approaches to support the software requirements development;Santos, Kleoson B. C. and Oliveira, Sandro R. B.;CIbSE 2017 - XX Ibero-American Conference on Software Engineering;2017;Scopus;127 – 140;;This study presents agile approaches to support Requirements Development activities, a subarea of Requirements Engineering of great importance for success in software projects. These approaches were identified by a systematic mapping of the literature. Among the results several methods, techniques and practices have been discovered, with User Stories being the most mentioned by the primary studies, the elicitation activity obtained the largest number of support approaches and only two approaches support all the Requirements Development activities. The results contribute to the software industry by providing an empirical framework of approaches, which can serve as a reference for organizations seeking the adoption of agile methods related to the requirements area, as well as to provide the scientific community with a better understanding of the practical aspect of relationship between requirements and agile methods.;Conference paper;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026681653&partnerID=40&md5=637b3c5f9b5b8f9a966fa86e6f8d4655;;;"Requirements engineering; Agile approaches; Development activity; Scientific community; Software industry; Software project; Software requirements; Support requirements; Systematic mapping; Software engineering";;;English;Cited by: 2;Papers that do not present online versions available.;Rejected
Exploring the challenges and benefits for scaling agile project managementto large projects: a review;Paula de Oliveira Santos andMarly Monteiro de Carvalho;Requir. Eng.;2022;Springer Link;117--134;27;"Organizations have increasingly applied agile project management; however, they face challenges in scaling up this approach to large projects. Thus, this study investigates the key barriers and benefits of scaling agile methods to large projects. The research approach is a literature review, applying bibliometrics and content analysis with Bibliometrix and UCINET software. We conducted a sampling process in the Web of Science and Scopus databases and surveyed 76 articles in depth. The results identified 53 barriers clustered into six main categories: organizational issues, managerial issues, agile method-specific barriers, product/process issues, customer issues, and team issues. Thirty-two benefits were coded and clustered into three categories: business, project, and team. Requirement management appears as a core topic, impacting both barriers and benefits for scaling agile project management. We identified a strong relationship between the barriers and benefits. These results can be used to create questionnaires to explore these barriers and benefits in practice. © 2021, The Author(s), under exclusive licence to Springer-Verlag London Ltd., part of Springer Nature.";;10.1007/s00766-021-00363-3;https://doi.org/10.1007/s00766-021-00363-3;;;;;;;;;Accepted
A Qualitative Study on Non-Functional Requirements in Agile Software Development;Jarz?bowicz, Aleksander and Weichbroth, Pawe?;IEEE Access;2021;IEEE Digital Library;40458-40475;9;Context: Widespread use of agile software development (ASD) methods can be observed nowadays. Non-functional requirements (NFRs) are often reported to be a problematic issue for agile projects, since ASD methods tend to neglect NFRs while focusing on incremental delivery of functional features. Despite that, only very few studies have explored the requirements engineering practices used in ASD and dedicated particularly to NFRs. Objective: We aimed to identify and investigate the practices used in industrial ASD projects to identify, elicit and document NFRs. Method: We conducted a systematic literature review (SLR) and used its findings to prepare an interview guide. We then conducted a series of semi-structured interviews with 10 experienced practitioners. Results: The SLR revealed a number of strategies related to the timing of NFR identification as well as 13 elicitation practices and 20 documentation techniques. At least some of these findings show discrepancies between ASD theory and practice. The interviews provided a more in-depth understanding of the practices used, and their context. The main findings from the interviews include: practitioners' attempts to start identifying NFRs early in the project, a lack of elicitation techniques aimed at NFRs only, and different choices about documentation techniques, including the additional techniques introduced to cope specifically with NFRs. Conclusions: It was not confirmed that requirements engineering activities related to NFRs are perceived by ASD practitioners as a problem, as they developed effective practices to deal with this issue. Moreover, our findings show that different approaches to NFRs can be used and give satisfactory results. © 2013 IEEE.;;10.1109/ACCESS.2021.3064424;;;;;;;;;;Accepted
Behavior-Driven Development: A Case Study on Its Impacts on Agile Development Teams;Nascimento, Nicolas and Santos, Alan R. and Sales, Afonso and Chanin, Rafael;;2020;ACM Digital Library;109–116;;Software development practices which enhance software quality and help teams better develop collaboratively have received attention by the academic community. Among these techniques is Behavior-Driven Development (BDD), a development method which proposes software to be developed focusing primarily on its expected behavior. In this context, this paper investigates how BDD impacts agile software development teams. In order to achieve this, we have conducted a case study on a mobile application development environment which develops software using agile. In total, 42 interviews were performed. Our results indicate that BDD can have positive impacts, increasing collaboration among team members, and negative impacts, like difficulties in writing unit tests. We concluded that BDD has more positive than negative outcomes.;;10.1145/3387940.3391480;https://doi.org/10.1145/3387940.3391480;;;Challenge Based Learning, Behavior-Driven Development, Software Engineering, Agile Development;Association for Computing Machinery;;;;;Rejected
Machine Learning for Software Engineering: A Tertiary Study;Kotti, Zoe and Galanopoulou, Rafaila and Spinellis, Diomidis;ACM Comput. Surv.;2022;ACM Digital Library;;55;Machine learning (ML) techniques increase the effectiveness of software engineering (SE) lifecycle activities. We systematically collected, quality-assessed, summarized, and categorized 83 reviews in ML for SE published between 2009 and 2022, covering 6,117 primary studies. The SE areas most tackled with ML are software quality and testing, while human-centered areas appear more challenging for ML. We propose a number of ML for SE research challenges and actions, including conducting further empirical validation and industrial studies on ML, reconsidering deficient SE methods, documenting and automating data collection and pipeline processes, reexamining how industrial practitioners distribute their proprietary data, and implementing incremental ML approaches.;;10.1145/3572905;https://doi.org/10.1145/3572905;;;software engineering, systematic literature review, machine learning, Tertiary study;Association for Computing Machinery;0360-0300;;;;Rejected
Recommendation for Continuous Ethical Analysis of AI Algorithms;Steinke, Gerhard and LaBrie, Ryan and Sarkar, Satadipa;;2022;ACM Digital Library;104–106;;Artificial Intelligence (AI) algorithms and applications have become more prevalent in our information society. Organizations that build AI applications incorporate various ethical evaluation frameworks, policies, and guidelines – and yet the outcome of many AI systems are producing questionable, biased, unfair, opaque, unjustified, and/or unexplained results. In this research project we determine the necessity for not just an initial ethical review of such algorithms, but suggest the ongoing ethical evaluation of AI algorithms as applications are updated and enhanced – a Continuous Ethical Analysis process.;;10.1145/3528580.3532996;https://doi.org/10.1145/3528580.3532996;;;Continuous Ethical Analysis, AI Algorithms;Association for Computing Machinery;;;;;Rejected
Strength of Evidence in Systematic Reviews in Software Engineering;Dyb\r{a}, Tore and Dings\o{}yr, Torgeir;;2008;ACM Digital Library;178–187;;Systematic reviews are only as good as the evidence they are based on. It is important, therefore, that users of systematic reviews know how much confidence they can place in the conclusions and recommendations arising from such reviews. In this paper we present an overview of some of the most influential systems for assessing the quality of individual primary studies and for grading the overall strength of a body of evidence. We also present an example of the use of such systems based on a systematic review of empirical studies of agile software development. Our findings suggest that the systems used in other disciplines for grading the strength of evidence for and reporting of systematic reviews, especially those that take account of qualitative and observational studies are of particular relevance for software engineering.;;10.1145/1414004.1414034;https://doi.org/10.1145/1414004.1414034;;;quality assessment, systematic review, strength of evidence;Association for Computing Machinery;;;;;Rejected
Challenges and Recommendations for the Design and Conduct of Global Software Engineering Courses: A Systematic Review;Clear, Tony and Beecham, Sarah and Barr, John and Daniels, Mats and McDermott, Roger and Oudshoorn, Michael and Savickaite, Airina and Noll, John;;2015;ACM Digital Library;1–39;;"Context: Global Software Engineering (GSE) has become the predominant form of software development for global companies and has given rise to a demand for students trained in GSE. In response, universities are developing courses and curricula around GSE and researchers have begun to disseminate studies of these new approaches. Problem: GSE differs from most other computer science fields, however, in that practice is inseparable from theory. As a result, educators looking to create GSE courses face a daunting task: integrating global practice into the local classroom. Aim: This study aims to ameliorate the very difficult task of teaching GSE by delineating the challenges and providing some recommendations for overcoming them. Method: To meet our aims we pose two research questions (""When teaching GSE to students in Higher Education, what are the (a) challenges, and (b) recommendations for addressing them"") and then conduct a systematic literature review (SLR) to determine the answers to these questions. Our SLR follows a carefully designed and validated protocol.Results: We found 82 papers that addressed our research questions. Our findings indicate that in addition to the challenges posed by GSE in general, particular problems arise in educational situations. The majority of these challenges fall into the ""global distance"" category, though teamwork challenges and people issues (such as trust) also commonly arise. Organizational differences between institutions, differing skill sets between students in different locations, and varying cultural work norms, for example, all operate within educational settings in quite different ways than in professional development teams. Integrating cultural training, conducting teamwork exercises to build trust, and instructor monitoring of team communication are all examples of techniques that have been used successfully by educators according to our review Conclusion: Despite the severity of the challenges in GSE education, many institutions have successfully developed courses and curricula targeting GSE. Indeed, for each of the challenges we have identified in the literature there are numerous recommendations for overcoming them. Instructors can use the recommendations given in this study as a starting point to running successful GSE courses.";;10.1145/2858796.2858797;https://doi.org/10.1145/2858796.2858797;;;global software development, open ended group project, systematic literature review, teaching and learning, global software engineering, international collaboration, capstone;Association for Computing Machinery;;;;;Rejected
Big Data System Development: An Embedded Case Study with a Global Outsourcing Firm;Chen, Hong-Mei and Kazman, Rick and Haziyev, Serge and Hrytsay, Olha;;2015;ACM Digital Library;44–50;;Big data system development is dramatically different from small (traditional, structured) data system development. At the end of 2014, big data deployment is still scarce and failures abound. Outsourcing has become a main strategy for many enterprises. We therefore selected an outsourcing company who has successfully deployed big data projects for our study. Our research results from analyzing 10 outsourced big data projects provide a glimpse into early adopters of big data, illuminates the challenges for system development that stem from the 5Vs of big data and crystallizes the importance of architecture design choices and technology selection. We followed a collaborative practice research (CPR) method to develop and validate a new method, called BDD. BDD is the first attempt to systematically combine architecture design with data modeling approaches to address big data system development challenges. The use of reference architectures and a technology catalog are advancements to architecture design methods and are proving to be well-suited for big data system architecture design and system development.;;;;;;system engineering, software architecture, embedded case study methodology, data system design methods, collaborative practice research, big data;IEEE Press;;;;;Rejected
Requirements engineering in agile projects: A systematic mapping based in evidences of industry;Medeiros, J.D.R.V. and Alves, D C P and Vasconcelos, A and Silva, C and Wanderley, E;;2015;El Compendex;460--473;;Interest in the adoption of Agile methodologies has grown in recent years as a strategy to minimize problems in software development. However recent studies indicate high rates of failure also in projects that use agile processes. In this context, this research conducted an exploratory study to investigate how Requirements Engineering is used in projects that adopt agile methodologies. For this, a Systematic Mapping was performed and it identified the engineering requirements techniques that are running in the industry, the problems and limitations in projects that adopt agile methodologies. The low involvement of users and the constant changes of requirements were identified as the main challenges to be overcome. Copyright {\textcopyright} 2015 by the authors.;;;https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936074918{\&}partnerID=40{\&}md5=7f3dbeb28ef69f2a2b7e18d85aa89381;;;Agile Methodologies,Agile methodologies,Agile process,Exploratory studies,High rate,Mapping,Requirements,Requirements engineering,Requirements techniques,Running-in,Software design,Software engineering,Systematic mapping;Ibero-American Conference on Software Engineering;;English A4 -;;;Accepted
Agile development in the cloud computing environment: A systematic review;Muhammad Younas and Dayang N.A. Jawawi and Imran Ghani and Terrence Fries and Rafaqut Kazmi;Information and Software Technology;2018;Science@Direct;142-158;103;Background: Agile software development is based on a set of values and principles. The twelve principles are inferred from agile values. Agile principles are composition of evolutionary requirement, simple design, continuous delivery, self-organizing team and face-to-face communication. Due to changing market demand, agile methodology faces problems such as scalability, more effort and cost required in setting up hardware and software infrastructure, availability of skilled resource and ability to build application from multiple locations. Twelve (12) principles may be practiced more appropriately with the support of cloud computing. This merger of agile and cloud computing may provide infrastructure optimization and automation benefits to agile practitioners. Objective: This Systematic Literature Review (SLR) identifies the techniques employed in cloud computing environment that are useful for agile development. In addition, SLR discusses the significance of cloud and its challenges. Method: By applying the SLR procedure, the authors select thirty-seven (37) studies out of six-hundred-forty-seven (647) from 2010 to 2017. Result: The result of SLR shows that the techniques using existing tools were reported in 35%, simulations in 20% and application developed in 15% of the studies. Evaluation of techniques was reported in 32% of the studies. The impact of cloud computing was measured by the classification of four major categories such as transparency 32%, collaboration 50%, development infrastructure 29% and cloud quality attributes in 39%. Furthermore, a large number of tools were reported in primary studies. The challenges posed by cloud adoption in agile was reported as interoperability 13%, security & privacy 18% and rest of the primary studies did not report any other research gaps. Conclusions: The study concludes that agile development in cloud computing environment is an important area in software engineering. There are many open challenges and gaps. In particular, more quality tools, evaluation research and empirical studies are required in this area.;;https://doi.org/10.1016/j.infsof.2018.06.014;https://www.sciencedirect.com/science/article/pii/S0950584918301319;;;Agile, Agile software development, Agile methodology, Cloud computing, Systematic review;;0950-5849;;;;Accepted
A systematic literature review of the improved agile software development;Satria, Deki and Sensuse, Dana Indra and Noprisson, Handrie;;2017;IEEE Digital Library;94-99;;None;;10.1109/ICITSI.2017.8267925;;;;;;;;;;Accepted
Process-Centered Review of Object Oriented Software Development Methodologies;Ramsin, Raman and Paige, Richard F.;ACM Comput. Surv.;2008;ACM Digital Library;;40;We provide a detailed review of existing object-oriented software development methodologies, focusing on their development processes. The review aims at laying bare their core philosophies, processes, and internal activities. This is done by using a process-centered template for summarizing the methodologies, highlighting the activities prescribed in the methodology while describing the modeling languages used (mainly diagrams and tables) as secondary to the activities. The descriptions produced using this template aim not to offer a critique on the methodologies and processes, but instead provide an abstract and structured description in a way that facilitates their elaborate analysis for the purposes of improving understanding, and making it easier to tailor, select, and evaluate the processes.;;10.1145/1322432.1322435;https://doi.org/10.1145/1322432.1322435;;;agile methods, Object-oriented methodologies, seminal methodologies, methodology engineering, integrated methodologies;Association for Computing Machinery;0360-0300;;;;Rejected
Training Students to Be Agile Information Systems Developers: A Pedagogical Approach;Tan, Chuan-Hoo and Tan, Wee-Kek and Teo, Hock-Hai;;2008;ACM Digital Library;88–96;;This article reports four consecutive semesters of continuous effort to refine an Information Systems (IS) development course in a public university. The course seeks to impart IS undergraduates, future Information Technology (IT) professionals, on the importance of agility, flexibility and adaptability in enterprise-level software development. Several unique characteristics of the course include (1) the emphasis on team-based guidance rather than traditional lecture-based teaching, (2) the stress on providing working, integrated software solution, (3) the value of adopting progressive and flexible method of software development, and, most notably, (4) the importance of being adaptive to changes in system requirements. A hybrid agile methodology developed for conducting the course is also discussed.;;10.1145/1355238.1355259;https://doi.org/10.1145/1355238.1355259;;;IT training, agile software development, course curriculum design;Association for Computing Machinery;;;;;Rejected
A Family of Empirical Studies to Compare Informal and Optimization-Based Planning of Software Releases;Du, Gengshen and McElroy, Jim and Ruhe, Guenther;;2006;ACM Digital Library;212–221;;Replication of experiments, or performing a series of related studies, aims at attaining a higher level of validity of results. This paper reports on a series of empirical studies devoted to comparing informal release planning with two variants of optimization-based release planning.Two research questions were studied: How does optimization-based release planning compare with informal planning in terms of (i) time to generate release plans, and the feasibility and quality of those plans, and (ii) understanding and confidence of generated solutions and trust in the release planning process.For the family of empirical studies, the paper presents two types of results related to (i) the two research questions to compare the release planning techniques, and (ii) the evolution and lessons learned while conducting the studies.;;10.1145/1159733.1159766;https://doi.org/10.1145/1159733.1159766;;;family of empirical studies, release planning, decision support;Association for Computing Machinery;;;;;Rejected
A Study of the Documentation Essential to Software Maintenance;de Souza, Sergio Cozzetti B. and Anquetil, Nicolas and de Oliveira, K\'{a}thia M.;;2005;ACM Digital Library;68–75;;"Software engineering has been striving for years to improve the practice of software development and maintenance. Documentation has long been prominent on the list of recommended practices to improve development and help maintenance. Recently however, agile methods started to shake this view, arguing that the goal of the game is to produce software and that documentation is only useful as long as it helps to reach this goal.On the other hand, in the re-engineering field, people wish they could re-document useful legacy software so that they may continue maintain them or migrate them to new platform.In these two case, a crucial question arises: ""How much documentation is enough?"" In this article, we present the results of a survey of software maintainers to try to establish what documentation artifacts are the most useful to them.";;10.1145/1085313.1085331;https://doi.org/10.1145/1085313.1085331;;;software system documentation, empirical study, software maintenance, program understanding;Association for Computing Machinery;;;;;Rejected
Can Students Design Software? The Answer Is More Complex Than You Think;Hu, Chenglie;;2016;ACM Digital Library;199–204;;In this paper, we first present an assessment on students' software design abilities based on qualitative data from a design class. We will then provide, using the assessment as a backdrop, a discussion on the nature of software design, the challenges of teaching design, and ways to improve design education.;;10.1145/2839509.2844563;https://doi.org/10.1145/2839509.2844563;;;software design, teaching of software design, design education;Association for Computing Machinery;;;;;Rejected
A Systematic Mapping Study on Requirements Scoping;Wnuk, Krzysztof and Kollu, Ravichandra Kumar;;2016;ACM Digital Library;;;Context: Requirements scoping is one of the key activities in requirements management but also a major risk for project management. Continuously changing scope may create a congestion state in handling the requirements inflow which causes negative consequences, e.g. delays or scope creep. Objectives: In this paper, we look at requirements scoping literature outside Software Product Line (SPL) by exploring the current literature on the phenomenon, summarizing publication trends, performing thematic analysis and analyzing the strength of the evidence in the light of rigor and relevance assessment. Method: We run a Systematic Mapping Study (SMS) using snowballing procedure, supported by a database search for the start set identification, and identified 21 primary studies and 2 secondary studies. Results: The research interest in this area steadily increases and includes mainly case studies, validation or evaluation studies. The results were categorized into four themes: definitions, negative effects associated with scoping, challenges and identified methods/tools. The identified scope management techniques are also matched against the identified requirements scoping challenges.;;10.1145/2915970.2915985;https://doi.org/10.1145/2915970.2915985;;;snowballing, requirements scoping, systematic mapping study;Association for Computing Machinery;;;;;Rejected
Computer Science Curricula 2013: Curriculum Guidelines for Undergraduate Degree Programs in Computer Science;Joint Task Force on Computing Curricula, Association for Computing Machinery (ACM) and IEEE Computer Society;;2013;ACM Digital Library;;;None;;;;;;;Association for Computing Machinery;;;;;Rejected
